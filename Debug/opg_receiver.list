
opg_receiver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a08c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e0  0800a198  0800a198  0001a198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a278  0800a278  0002017c  2**0
                  CONTENTS
  4 .ARM          00000000  0800a278  0800a278  0002017c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800a278  0800a278  0002017c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a278  0800a278  0001a278  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a27c  0800a27c  0001a27c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000017c  20000000  0800a280  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000130c  2000017c  0800a3fc  0002017c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001488  0800a3fc  00021488  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002017c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000168a5  00000000  00000000  000201a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003a9b  00000000  00000000  00036a4a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001428  00000000  00000000  0003a4e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001250  00000000  00000000  0003b910  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c271  00000000  00000000  0003cb60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019137  00000000  00000000  00058dd1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000961f5  00000000  00000000  00071f08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001080fd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005398  00000000  00000000  00108150  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000017c 	.word	0x2000017c
 8000128:	00000000 	.word	0x00000000
 800012c:	0800a180 	.word	0x0800a180

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000180 	.word	0x20000180
 8000148:	0800a180 	.word	0x0800a180

0800014c <__aeabi_fmul>:
 800014c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000150:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000154:	bf1e      	ittt	ne
 8000156:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800015a:	ea92 0f0c 	teqne	r2, ip
 800015e:	ea93 0f0c 	teqne	r3, ip
 8000162:	d06f      	beq.n	8000244 <__aeabi_fmul+0xf8>
 8000164:	441a      	add	r2, r3
 8000166:	ea80 0c01 	eor.w	ip, r0, r1
 800016a:	0240      	lsls	r0, r0, #9
 800016c:	bf18      	it	ne
 800016e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000172:	d01e      	beq.n	80001b2 <__aeabi_fmul+0x66>
 8000174:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000178:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 800017c:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000180:	fba0 3101 	umull	r3, r1, r0, r1
 8000184:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000188:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 800018c:	bf3e      	ittt	cc
 800018e:	0049      	lslcc	r1, r1, #1
 8000190:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000194:	005b      	lslcc	r3, r3, #1
 8000196:	ea40 0001 	orr.w	r0, r0, r1
 800019a:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 800019e:	2afd      	cmp	r2, #253	; 0xfd
 80001a0:	d81d      	bhi.n	80001de <__aeabi_fmul+0x92>
 80001a2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80001a6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001aa:	bf08      	it	eq
 80001ac:	f020 0001 	biceq.w	r0, r0, #1
 80001b0:	4770      	bx	lr
 80001b2:	f090 0f00 	teq	r0, #0
 80001b6:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80001ba:	bf08      	it	eq
 80001bc:	0249      	lsleq	r1, r1, #9
 80001be:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80001c2:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80001c6:	3a7f      	subs	r2, #127	; 0x7f
 80001c8:	bfc2      	ittt	gt
 80001ca:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80001ce:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80001d2:	4770      	bxgt	lr
 80001d4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80001d8:	f04f 0300 	mov.w	r3, #0
 80001dc:	3a01      	subs	r2, #1
 80001de:	dc5d      	bgt.n	800029c <__aeabi_fmul+0x150>
 80001e0:	f112 0f19 	cmn.w	r2, #25
 80001e4:	bfdc      	itt	le
 80001e6:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 80001ea:	4770      	bxle	lr
 80001ec:	f1c2 0200 	rsb	r2, r2, #0
 80001f0:	0041      	lsls	r1, r0, #1
 80001f2:	fa21 f102 	lsr.w	r1, r1, r2
 80001f6:	f1c2 0220 	rsb	r2, r2, #32
 80001fa:	fa00 fc02 	lsl.w	ip, r0, r2
 80001fe:	ea5f 0031 	movs.w	r0, r1, rrx
 8000202:	f140 0000 	adc.w	r0, r0, #0
 8000206:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800020a:	bf08      	it	eq
 800020c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000210:	4770      	bx	lr
 8000212:	f092 0f00 	teq	r2, #0
 8000216:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800021a:	bf02      	ittt	eq
 800021c:	0040      	lsleq	r0, r0, #1
 800021e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000222:	3a01      	subeq	r2, #1
 8000224:	d0f9      	beq.n	800021a <__aeabi_fmul+0xce>
 8000226:	ea40 000c 	orr.w	r0, r0, ip
 800022a:	f093 0f00 	teq	r3, #0
 800022e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000232:	bf02      	ittt	eq
 8000234:	0049      	lsleq	r1, r1, #1
 8000236:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800023a:	3b01      	subeq	r3, #1
 800023c:	d0f9      	beq.n	8000232 <__aeabi_fmul+0xe6>
 800023e:	ea41 010c 	orr.w	r1, r1, ip
 8000242:	e78f      	b.n	8000164 <__aeabi_fmul+0x18>
 8000244:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000248:	ea92 0f0c 	teq	r2, ip
 800024c:	bf18      	it	ne
 800024e:	ea93 0f0c 	teqne	r3, ip
 8000252:	d00a      	beq.n	800026a <__aeabi_fmul+0x11e>
 8000254:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000258:	bf18      	it	ne
 800025a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800025e:	d1d8      	bne.n	8000212 <__aeabi_fmul+0xc6>
 8000260:	ea80 0001 	eor.w	r0, r0, r1
 8000264:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000268:	4770      	bx	lr
 800026a:	f090 0f00 	teq	r0, #0
 800026e:	bf17      	itett	ne
 8000270:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000274:	4608      	moveq	r0, r1
 8000276:	f091 0f00 	teqne	r1, #0
 800027a:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 800027e:	d014      	beq.n	80002aa <__aeabi_fmul+0x15e>
 8000280:	ea92 0f0c 	teq	r2, ip
 8000284:	d101      	bne.n	800028a <__aeabi_fmul+0x13e>
 8000286:	0242      	lsls	r2, r0, #9
 8000288:	d10f      	bne.n	80002aa <__aeabi_fmul+0x15e>
 800028a:	ea93 0f0c 	teq	r3, ip
 800028e:	d103      	bne.n	8000298 <__aeabi_fmul+0x14c>
 8000290:	024b      	lsls	r3, r1, #9
 8000292:	bf18      	it	ne
 8000294:	4608      	movne	r0, r1
 8000296:	d108      	bne.n	80002aa <__aeabi_fmul+0x15e>
 8000298:	ea80 0001 	eor.w	r0, r0, r1
 800029c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80002a0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80002a4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80002a8:	4770      	bx	lr
 80002aa:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80002ae:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80002b2:	4770      	bx	lr

080002b4 <__aeabi_frsub>:
 80002b4:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 80002b8:	e002      	b.n	80002c0 <__addsf3>
 80002ba:	bf00      	nop

080002bc <__aeabi_fsub>:
 80002bc:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

080002c0 <__addsf3>:
 80002c0:	0042      	lsls	r2, r0, #1
 80002c2:	bf1f      	itttt	ne
 80002c4:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80002c8:	ea92 0f03 	teqne	r2, r3
 80002cc:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80002d0:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80002d4:	d06a      	beq.n	80003ac <__addsf3+0xec>
 80002d6:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80002da:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80002de:	bfc1      	itttt	gt
 80002e0:	18d2      	addgt	r2, r2, r3
 80002e2:	4041      	eorgt	r1, r0
 80002e4:	4048      	eorgt	r0, r1
 80002e6:	4041      	eorgt	r1, r0
 80002e8:	bfb8      	it	lt
 80002ea:	425b      	neglt	r3, r3
 80002ec:	2b19      	cmp	r3, #25
 80002ee:	bf88      	it	hi
 80002f0:	4770      	bxhi	lr
 80002f2:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80002f6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80002fa:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80002fe:	bf18      	it	ne
 8000300:	4240      	negne	r0, r0
 8000302:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000306:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 800030a:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 800030e:	bf18      	it	ne
 8000310:	4249      	negne	r1, r1
 8000312:	ea92 0f03 	teq	r2, r3
 8000316:	d03f      	beq.n	8000398 <__addsf3+0xd8>
 8000318:	f1a2 0201 	sub.w	r2, r2, #1
 800031c:	fa41 fc03 	asr.w	ip, r1, r3
 8000320:	eb10 000c 	adds.w	r0, r0, ip
 8000324:	f1c3 0320 	rsb	r3, r3, #32
 8000328:	fa01 f103 	lsl.w	r1, r1, r3
 800032c:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000330:	d502      	bpl.n	8000338 <__addsf3+0x78>
 8000332:	4249      	negs	r1, r1
 8000334:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000338:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 800033c:	d313      	bcc.n	8000366 <__addsf3+0xa6>
 800033e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000342:	d306      	bcc.n	8000352 <__addsf3+0x92>
 8000344:	0840      	lsrs	r0, r0, #1
 8000346:	ea4f 0131 	mov.w	r1, r1, rrx
 800034a:	f102 0201 	add.w	r2, r2, #1
 800034e:	2afe      	cmp	r2, #254	; 0xfe
 8000350:	d251      	bcs.n	80003f6 <__addsf3+0x136>
 8000352:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000356:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800035a:	bf08      	it	eq
 800035c:	f020 0001 	biceq.w	r0, r0, #1
 8000360:	ea40 0003 	orr.w	r0, r0, r3
 8000364:	4770      	bx	lr
 8000366:	0049      	lsls	r1, r1, #1
 8000368:	eb40 0000 	adc.w	r0, r0, r0
 800036c:	3a01      	subs	r2, #1
 800036e:	bf28      	it	cs
 8000370:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000374:	d2ed      	bcs.n	8000352 <__addsf3+0x92>
 8000376:	fab0 fc80 	clz	ip, r0
 800037a:	f1ac 0c08 	sub.w	ip, ip, #8
 800037e:	ebb2 020c 	subs.w	r2, r2, ip
 8000382:	fa00 f00c 	lsl.w	r0, r0, ip
 8000386:	bfaa      	itet	ge
 8000388:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 800038c:	4252      	neglt	r2, r2
 800038e:	4318      	orrge	r0, r3
 8000390:	bfbc      	itt	lt
 8000392:	40d0      	lsrlt	r0, r2
 8000394:	4318      	orrlt	r0, r3
 8000396:	4770      	bx	lr
 8000398:	f092 0f00 	teq	r2, #0
 800039c:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 80003a0:	bf06      	itte	eq
 80003a2:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 80003a6:	3201      	addeq	r2, #1
 80003a8:	3b01      	subne	r3, #1
 80003aa:	e7b5      	b.n	8000318 <__addsf3+0x58>
 80003ac:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80003b0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80003b4:	bf18      	it	ne
 80003b6:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80003ba:	d021      	beq.n	8000400 <__addsf3+0x140>
 80003bc:	ea92 0f03 	teq	r2, r3
 80003c0:	d004      	beq.n	80003cc <__addsf3+0x10c>
 80003c2:	f092 0f00 	teq	r2, #0
 80003c6:	bf08      	it	eq
 80003c8:	4608      	moveq	r0, r1
 80003ca:	4770      	bx	lr
 80003cc:	ea90 0f01 	teq	r0, r1
 80003d0:	bf1c      	itt	ne
 80003d2:	2000      	movne	r0, #0
 80003d4:	4770      	bxne	lr
 80003d6:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 80003da:	d104      	bne.n	80003e6 <__addsf3+0x126>
 80003dc:	0040      	lsls	r0, r0, #1
 80003de:	bf28      	it	cs
 80003e0:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 80003e4:	4770      	bx	lr
 80003e6:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 80003ea:	bf3c      	itt	cc
 80003ec:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 80003f0:	4770      	bxcc	lr
 80003f2:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80003f6:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 80003fa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80003fe:	4770      	bx	lr
 8000400:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000404:	bf16      	itet	ne
 8000406:	4608      	movne	r0, r1
 8000408:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 800040c:	4601      	movne	r1, r0
 800040e:	0242      	lsls	r2, r0, #9
 8000410:	bf06      	itte	eq
 8000412:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000416:	ea90 0f01 	teqeq	r0, r1
 800041a:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 800041e:	4770      	bx	lr

08000420 <__aeabi_ui2f>:
 8000420:	f04f 0300 	mov.w	r3, #0
 8000424:	e004      	b.n	8000430 <__aeabi_i2f+0x8>
 8000426:	bf00      	nop

08000428 <__aeabi_i2f>:
 8000428:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 800042c:	bf48      	it	mi
 800042e:	4240      	negmi	r0, r0
 8000430:	ea5f 0c00 	movs.w	ip, r0
 8000434:	bf08      	it	eq
 8000436:	4770      	bxeq	lr
 8000438:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 800043c:	4601      	mov	r1, r0
 800043e:	f04f 0000 	mov.w	r0, #0
 8000442:	e01c      	b.n	800047e <__aeabi_l2f+0x2a>

08000444 <__aeabi_ul2f>:
 8000444:	ea50 0201 	orrs.w	r2, r0, r1
 8000448:	bf08      	it	eq
 800044a:	4770      	bxeq	lr
 800044c:	f04f 0300 	mov.w	r3, #0
 8000450:	e00a      	b.n	8000468 <__aeabi_l2f+0x14>
 8000452:	bf00      	nop

08000454 <__aeabi_l2f>:
 8000454:	ea50 0201 	orrs.w	r2, r0, r1
 8000458:	bf08      	it	eq
 800045a:	4770      	bxeq	lr
 800045c:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000460:	d502      	bpl.n	8000468 <__aeabi_l2f+0x14>
 8000462:	4240      	negs	r0, r0
 8000464:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000468:	ea5f 0c01 	movs.w	ip, r1
 800046c:	bf02      	ittt	eq
 800046e:	4684      	moveq	ip, r0
 8000470:	4601      	moveq	r1, r0
 8000472:	2000      	moveq	r0, #0
 8000474:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000478:	bf08      	it	eq
 800047a:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 800047e:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000482:	fabc f28c 	clz	r2, ip
 8000486:	3a08      	subs	r2, #8
 8000488:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 800048c:	db10      	blt.n	80004b0 <__aeabi_l2f+0x5c>
 800048e:	fa01 fc02 	lsl.w	ip, r1, r2
 8000492:	4463      	add	r3, ip
 8000494:	fa00 fc02 	lsl.w	ip, r0, r2
 8000498:	f1c2 0220 	rsb	r2, r2, #32
 800049c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80004a0:	fa20 f202 	lsr.w	r2, r0, r2
 80004a4:	eb43 0002 	adc.w	r0, r3, r2
 80004a8:	bf08      	it	eq
 80004aa:	f020 0001 	biceq.w	r0, r0, #1
 80004ae:	4770      	bx	lr
 80004b0:	f102 0220 	add.w	r2, r2, #32
 80004b4:	fa01 fc02 	lsl.w	ip, r1, r2
 80004b8:	f1c2 0220 	rsb	r2, r2, #32
 80004bc:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 80004c0:	fa21 f202 	lsr.w	r2, r1, r2
 80004c4:	eb43 0002 	adc.w	r0, r3, r2
 80004c8:	bf08      	it	eq
 80004ca:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80004ce:	4770      	bx	lr

080004d0 <__gesf2>:
 80004d0:	f04f 3cff 	mov.w	ip, #4294967295
 80004d4:	e006      	b.n	80004e4 <__cmpsf2+0x4>
 80004d6:	bf00      	nop

080004d8 <__lesf2>:
 80004d8:	f04f 0c01 	mov.w	ip, #1
 80004dc:	e002      	b.n	80004e4 <__cmpsf2+0x4>
 80004de:	bf00      	nop

080004e0 <__cmpsf2>:
 80004e0:	f04f 0c01 	mov.w	ip, #1
 80004e4:	f84d cd04 	str.w	ip, [sp, #-4]!
 80004e8:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80004ec:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80004f0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80004f4:	bf18      	it	ne
 80004f6:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80004fa:	d011      	beq.n	8000520 <__cmpsf2+0x40>
 80004fc:	b001      	add	sp, #4
 80004fe:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000502:	bf18      	it	ne
 8000504:	ea90 0f01 	teqne	r0, r1
 8000508:	bf58      	it	pl
 800050a:	ebb2 0003 	subspl.w	r0, r2, r3
 800050e:	bf88      	it	hi
 8000510:	17c8      	asrhi	r0, r1, #31
 8000512:	bf38      	it	cc
 8000514:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000518:	bf18      	it	ne
 800051a:	f040 0001 	orrne.w	r0, r0, #1
 800051e:	4770      	bx	lr
 8000520:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000524:	d102      	bne.n	800052c <__cmpsf2+0x4c>
 8000526:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800052a:	d105      	bne.n	8000538 <__cmpsf2+0x58>
 800052c:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000530:	d1e4      	bne.n	80004fc <__cmpsf2+0x1c>
 8000532:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000536:	d0e1      	beq.n	80004fc <__cmpsf2+0x1c>
 8000538:	f85d 0b04 	ldr.w	r0, [sp], #4
 800053c:	4770      	bx	lr
 800053e:	bf00      	nop

08000540 <__aeabi_cfrcmple>:
 8000540:	4684      	mov	ip, r0
 8000542:	4608      	mov	r0, r1
 8000544:	4661      	mov	r1, ip
 8000546:	e7ff      	b.n	8000548 <__aeabi_cfcmpeq>

08000548 <__aeabi_cfcmpeq>:
 8000548:	b50f      	push	{r0, r1, r2, r3, lr}
 800054a:	f7ff ffc9 	bl	80004e0 <__cmpsf2>
 800054e:	2800      	cmp	r0, #0
 8000550:	bf48      	it	mi
 8000552:	f110 0f00 	cmnmi.w	r0, #0
 8000556:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000558 <__aeabi_fcmpeq>:
 8000558:	f84d ed08 	str.w	lr, [sp, #-8]!
 800055c:	f7ff fff4 	bl	8000548 <__aeabi_cfcmpeq>
 8000560:	bf0c      	ite	eq
 8000562:	2001      	moveq	r0, #1
 8000564:	2000      	movne	r0, #0
 8000566:	f85d fb08 	ldr.w	pc, [sp], #8
 800056a:	bf00      	nop

0800056c <__aeabi_fcmplt>:
 800056c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000570:	f7ff ffea 	bl	8000548 <__aeabi_cfcmpeq>
 8000574:	bf34      	ite	cc
 8000576:	2001      	movcc	r0, #1
 8000578:	2000      	movcs	r0, #0
 800057a:	f85d fb08 	ldr.w	pc, [sp], #8
 800057e:	bf00      	nop

08000580 <__aeabi_fcmple>:
 8000580:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000584:	f7ff ffe0 	bl	8000548 <__aeabi_cfcmpeq>
 8000588:	bf94      	ite	ls
 800058a:	2001      	movls	r0, #1
 800058c:	2000      	movhi	r0, #0
 800058e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000592:	bf00      	nop

08000594 <__aeabi_fcmpge>:
 8000594:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000598:	f7ff ffd2 	bl	8000540 <__aeabi_cfrcmple>
 800059c:	bf94      	ite	ls
 800059e:	2001      	movls	r0, #1
 80005a0:	2000      	movhi	r0, #0
 80005a2:	f85d fb08 	ldr.w	pc, [sp], #8
 80005a6:	bf00      	nop

080005a8 <__aeabi_fcmpgt>:
 80005a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005ac:	f7ff ffc8 	bl	8000540 <__aeabi_cfrcmple>
 80005b0:	bf34      	ite	cc
 80005b2:	2001      	movcc	r0, #1
 80005b4:	2000      	movcs	r0, #0
 80005b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80005ba:	bf00      	nop

080005bc <spi_rx_word>:
		shift -= 8;
	}
}

uint32_t spi_rx_word()
{
 80005bc:	b480      	push	{r7}
 80005be:	b085      	sub	sp, #20
 80005c0:	af00      	add	r7, sp, #0
	uint8_t spi_rx_buffer[4] = {0};
 80005c2:	2300      	movs	r3, #0
 80005c4:	607b      	str	r3, [r7, #4]

	// CS -> LOW
	GPIOA->BSRR = SPI_CS_LOW;
 80005c6:	4b1d      	ldr	r3, [pc, #116]	; (800063c <spi_rx_word+0x80>)
 80005c8:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80005cc:	611a      	str	r2, [r3, #16]
	// HAL_GPIO_WritePin(GPIOA, SPI1_MANUAL_CS_Pin, GPIO_PIN_RESET);

	// Receive a 32 bit word byte wise.
	for(int byte_index = 0; byte_index < 4; byte_index++)
 80005ce:	2300      	movs	r3, #0
 80005d0:	60fb      	str	r3, [r7, #12]
 80005d2:	e01b      	b.n	800060c <spi_rx_word+0x50>
	{
		// Wait for the SPI to finish tx/rx communication.
		while(SPI1->SR & SPI_SR_BSY){}
 80005d4:	bf00      	nop
 80005d6:	4b1a      	ldr	r3, [pc, #104]	; (8000640 <spi_rx_word+0x84>)
 80005d8:	689b      	ldr	r3, [r3, #8]
 80005da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80005de:	2b00      	cmp	r3, #0
 80005e0:	d1f9      	bne.n	80005d6 <spi_rx_word+0x1a>
		SPI1->DR = 0xAA; // Write something to the DR to trigger the spi clock.
 80005e2:	4b17      	ldr	r3, [pc, #92]	; (8000640 <spi_rx_word+0x84>)
 80005e4:	22aa      	movs	r2, #170	; 0xaa
 80005e6:	60da      	str	r2, [r3, #12]
		// wait for reception to finish
		while((SPI1->SR & SPI_SR_RXNE) == 0){}
 80005e8:	bf00      	nop
 80005ea:	4b15      	ldr	r3, [pc, #84]	; (8000640 <spi_rx_word+0x84>)
 80005ec:	689b      	ldr	r3, [r3, #8]
 80005ee:	f003 0301 	and.w	r3, r3, #1
 80005f2:	2b00      	cmp	r3, #0
 80005f4:	d0f9      	beq.n	80005ea <spi_rx_word+0x2e>

		spi_rx_buffer[byte_index] = SPI1->DR;
 80005f6:	4b12      	ldr	r3, [pc, #72]	; (8000640 <spi_rx_word+0x84>)
 80005f8:	68db      	ldr	r3, [r3, #12]
 80005fa:	b2d9      	uxtb	r1, r3
 80005fc:	1d3a      	adds	r2, r7, #4
 80005fe:	68fb      	ldr	r3, [r7, #12]
 8000600:	4413      	add	r3, r2
 8000602:	460a      	mov	r2, r1
 8000604:	701a      	strb	r2, [r3, #0]
	for(int byte_index = 0; byte_index < 4; byte_index++)
 8000606:	68fb      	ldr	r3, [r7, #12]
 8000608:	3301      	adds	r3, #1
 800060a:	60fb      	str	r3, [r7, #12]
 800060c:	68fb      	ldr	r3, [r7, #12]
 800060e:	2b03      	cmp	r3, #3
 8000610:	dde0      	ble.n	80005d4 <spi_rx_word+0x18>
	}
	// CS -> HIGH.
	GPIOA->BSRR = SPI_CS_HIGH;
 8000612:	4b0a      	ldr	r3, [pc, #40]	; (800063c <spi_rx_word+0x80>)
 8000614:	2210      	movs	r2, #16
 8000616:	611a      	str	r2, [r3, #16]

	// Reconstruct data word (32 bit) MSB first.
	uint32_t data_word = (spi_rx_buffer[0] << 24)
 8000618:	793b      	ldrb	r3, [r7, #4]
 800061a:	061a      	lsls	r2, r3, #24
					   + (spi_rx_buffer[1] << 16)
 800061c:	797b      	ldrb	r3, [r7, #5]
 800061e:	041b      	lsls	r3, r3, #16
 8000620:	441a      	add	r2, r3
					   + (spi_rx_buffer[2] << 8)
 8000622:	79bb      	ldrb	r3, [r7, #6]
 8000624:	021b      	lsls	r3, r3, #8
 8000626:	4413      	add	r3, r2
					   + spi_rx_buffer[3];
 8000628:	79fa      	ldrb	r2, [r7, #7]
 800062a:	4413      	add	r3, r2
	uint32_t data_word = (spi_rx_buffer[0] << 24)
 800062c:	60bb      	str	r3, [r7, #8]

	return data_word;
 800062e:	68bb      	ldr	r3, [r7, #8]
}
 8000630:	4618      	mov	r0, r3
 8000632:	3714      	adds	r7, #20
 8000634:	46bd      	mov	sp, r7
 8000636:	bc80      	pop	{r7}
 8000638:	4770      	bx	lr
 800063a:	bf00      	nop
 800063c:	40010800 	.word	0x40010800
 8000640:	40013000 	.word	0x40013000

08000644 <spi_tx_word>:


void spi_tx_word(uint32_t tx_cmd_word)
{
 8000644:	b480      	push	{r7}
 8000646:	b087      	sub	sp, #28
 8000648:	af00      	add	r7, sp, #0
 800064a:	6078      	str	r0, [r7, #4]
	// TODO: is buffer alloc and sending slower than
	// serializing the word right before sending?

	uint8_t spi_tx_buffer[4] = {0};
 800064c:	2300      	movs	r3, #0
 800064e:	60fb      	str	r3, [r7, #12]

	// Fast serialization with MSB fist.
	spi_tx_buffer[0] = tx_cmd_word >> 24;
 8000650:	687b      	ldr	r3, [r7, #4]
 8000652:	0e1b      	lsrs	r3, r3, #24
 8000654:	b2db      	uxtb	r3, r3
 8000656:	733b      	strb	r3, [r7, #12]
	spi_tx_buffer[1] = tx_cmd_word >> 16;
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	0c1b      	lsrs	r3, r3, #16
 800065c:	b2db      	uxtb	r3, r3
 800065e:	737b      	strb	r3, [r7, #13]
	spi_tx_buffer[2] = tx_cmd_word >> 8;
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	0a1b      	lsrs	r3, r3, #8
 8000664:	b2db      	uxtb	r3, r3
 8000666:	73bb      	strb	r3, [r7, #14]
	spi_tx_buffer[3] = tx_cmd_word;
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	b2db      	uxtb	r3, r3
 800066c:	73fb      	strb	r3, [r7, #15]

	// CS -> LOW
	GPIOA->BSRR = SPI_CS_LOW;
 800066e:	4b1b      	ldr	r3, [pc, #108]	; (80006dc <spi_tx_word+0x98>)
 8000670:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8000674:	611a      	str	r2, [r3, #16]

	// Transmit a 32 bit word byte wise.
	for(int byte_index = 0; byte_index < 4; byte_index++)
 8000676:	2300      	movs	r3, #0
 8000678:	617b      	str	r3, [r7, #20]
 800067a:	e010      	b.n	800069e <spi_tx_word+0x5a>
	{
		// Wait for the TX bit to set, indicating tx buffer is empty.
		while((SPI1->SR & SPI_SR_TXE) == 0){}
 800067c:	bf00      	nop
 800067e:	4b18      	ldr	r3, [pc, #96]	; (80006e0 <spi_tx_word+0x9c>)
 8000680:	689b      	ldr	r3, [r3, #8]
 8000682:	f003 0302 	and.w	r3, r3, #2
 8000686:	2b00      	cmp	r3, #0
 8000688:	d0f9      	beq.n	800067e <spi_tx_word+0x3a>
		// Fill the tx buffer and trigger the clock for simul. tx.
		// Ignore any rx bytes.
		SPI1->DR = spi_tx_buffer[byte_index];
 800068a:	f107 020c 	add.w	r2, r7, #12
 800068e:	697b      	ldr	r3, [r7, #20]
 8000690:	4413      	add	r3, r2
 8000692:	781a      	ldrb	r2, [r3, #0]
 8000694:	4b12      	ldr	r3, [pc, #72]	; (80006e0 <spi_tx_word+0x9c>)
 8000696:	60da      	str	r2, [r3, #12]
	for(int byte_index = 0; byte_index < 4; byte_index++)
 8000698:	697b      	ldr	r3, [r7, #20]
 800069a:	3301      	adds	r3, #1
 800069c:	617b      	str	r3, [r7, #20]
 800069e:	697b      	ldr	r3, [r7, #20]
 80006a0:	2b03      	cmp	r3, #3
 80006a2:	ddeb      	ble.n	800067c <spi_tx_word+0x38>
	}

	// Before exiting, wait for the last TX to finish,
	// for the BSY flag to lift and read the DR/SR again
	// (https://controllerstech.com/spi-using-registers-in-stm32/)
	while((SPI1->SR & SPI_SR_TXE) == 0){}
 80006a4:	bf00      	nop
 80006a6:	4b0e      	ldr	r3, [pc, #56]	; (80006e0 <spi_tx_word+0x9c>)
 80006a8:	689b      	ldr	r3, [r3, #8]
 80006aa:	f003 0302 	and.w	r3, r3, #2
 80006ae:	2b00      	cmp	r3, #0
 80006b0:	d0f9      	beq.n	80006a6 <spi_tx_word+0x62>
	while(SPI1->SR & SPI_SR_BSY){}
 80006b2:	bf00      	nop
 80006b4:	4b0a      	ldr	r3, [pc, #40]	; (80006e0 <spi_tx_word+0x9c>)
 80006b6:	689b      	ldr	r3, [r3, #8]
 80006b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d1f9      	bne.n	80006b4 <spi_tx_word+0x70>

	uint8_t garbage_val = SPI1->DR;
 80006c0:	4b07      	ldr	r3, [pc, #28]	; (80006e0 <spi_tx_word+0x9c>)
 80006c2:	68db      	ldr	r3, [r3, #12]
 80006c4:	74fb      	strb	r3, [r7, #19]
	garbage_val = SPI1->SR;
 80006c6:	4b06      	ldr	r3, [pc, #24]	; (80006e0 <spi_tx_word+0x9c>)
 80006c8:	689b      	ldr	r3, [r3, #8]
 80006ca:	74fb      	strb	r3, [r7, #19]
	// CS -> HIGH.
	GPIOA->BSRR = SPI_CS_HIGH;
 80006cc:	4b03      	ldr	r3, [pc, #12]	; (80006dc <spi_tx_word+0x98>)
 80006ce:	2210      	movs	r2, #16
 80006d0:	611a      	str	r2, [r3, #16]
}
 80006d2:	bf00      	nop
 80006d4:	371c      	adds	r7, #28
 80006d6:	46bd      	mov	sp, r7
 80006d8:	bc80      	pop	{r7}
 80006da:	4770      	bx	lr
 80006dc:	40010800 	.word	0x40010800
 80006e0:	40013000 	.word	0x40013000

080006e4 <get_ads8671_value_ext_lsb>:

/* "Overloaded" adc function with exernal memory management.
 * The number of received bytes is fixed to 4, still.
 */
uint16_t get_ads8671_value_ext_lsb(uint8_t *spi_rx_buffer)
{
 80006e4:	b480      	push	{r7}
 80006e6:	b085      	sub	sp, #20
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	6078      	str	r0, [r7, #4]
	// CS -> LOW
	GPIOA->BSRR = SPI_CS_LOW;
 80006ec:	4b1a      	ldr	r3, [pc, #104]	; (8000758 <get_ads8671_value_ext_lsb+0x74>)
 80006ee:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80006f2:	611a      	str	r2, [r3, #16]

	// Receive a 32 bit word byte wise.
	for(int byte_index = 0; byte_index < 4; byte_index++)
 80006f4:	2300      	movs	r3, #0
 80006f6:	60fb      	str	r3, [r7, #12]
 80006f8:	e014      	b.n	8000724 <get_ads8671_value_ext_lsb+0x40>
	{
		SPI1->DR = 0; // Write something to the DR to trigger the spi clock.
 80006fa:	4b18      	ldr	r3, [pc, #96]	; (800075c <get_ads8671_value_ext_lsb+0x78>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	60da      	str	r2, [r3, #12]
					  // As long as it is not a valid data word for the ads8671,
		  	  	  	  // it will return the current adc value.
		while(!(SPI1->SR & SPI_SR_RXNE))
 8000700:	e000      	b.n	8000704 <get_ads8671_value_ext_lsb+0x20>
		{
			asm("NOP");
 8000702:	bf00      	nop
		while(!(SPI1->SR & SPI_SR_RXNE))
 8000704:	4b15      	ldr	r3, [pc, #84]	; (800075c <get_ads8671_value_ext_lsb+0x78>)
 8000706:	689b      	ldr	r3, [r3, #8]
 8000708:	f003 0301 	and.w	r3, r3, #1
 800070c:	2b00      	cmp	r3, #0
 800070e:	d0f8      	beq.n	8000702 <get_ads8671_value_ext_lsb+0x1e>
		}
		spi_rx_buffer[byte_index] = SPI1->DR;
 8000710:	4b12      	ldr	r3, [pc, #72]	; (800075c <get_ads8671_value_ext_lsb+0x78>)
 8000712:	68d9      	ldr	r1, [r3, #12]
 8000714:	68fb      	ldr	r3, [r7, #12]
 8000716:	687a      	ldr	r2, [r7, #4]
 8000718:	4413      	add	r3, r2
 800071a:	b2ca      	uxtb	r2, r1
 800071c:	701a      	strb	r2, [r3, #0]
	for(int byte_index = 0; byte_index < 4; byte_index++)
 800071e:	68fb      	ldr	r3, [r7, #12]
 8000720:	3301      	adds	r3, #1
 8000722:	60fb      	str	r3, [r7, #12]
 8000724:	68fb      	ldr	r3, [r7, #12]
 8000726:	2b03      	cmp	r3, #3
 8000728:	dde7      	ble.n	80006fa <get_ads8671_value_ext_lsb+0x16>
	}

	// CS -> HIGH.
	GPIOA->BSRR = SPI_CS_HIGH;
 800072a:	4b0b      	ldr	r3, [pc, #44]	; (8000758 <get_ads8671_value_ext_lsb+0x74>)
 800072c:	2210      	movs	r2, #16
 800072e:	611a      	str	r2, [r3, #16]

	// Reconstruct the adc value from the first two MSBs.
	uint16_t adc_value_lsb = ((spi_rx_buffer[0] << 6) + (spi_rx_buffer[1] >> 2));
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	781b      	ldrb	r3, [r3, #0]
 8000734:	b29b      	uxth	r3, r3
 8000736:	019b      	lsls	r3, r3, #6
 8000738:	b29a      	uxth	r2, r3
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	3301      	adds	r3, #1
 800073e:	781b      	ldrb	r3, [r3, #0]
 8000740:	089b      	lsrs	r3, r3, #2
 8000742:	b2db      	uxtb	r3, r3
 8000744:	b29b      	uxth	r3, r3
 8000746:	4413      	add	r3, r2
 8000748:	817b      	strh	r3, [r7, #10]

	return adc_value_lsb;
 800074a:	897b      	ldrh	r3, [r7, #10]
}
 800074c:	4618      	mov	r0, r3
 800074e:	3714      	adds	r7, #20
 8000750:	46bd      	mov	sp, r7
 8000752:	bc80      	pop	{r7}
 8000754:	4770      	bx	lr
 8000756:	bf00      	nop
 8000758:	40010800 	.word	0x40010800
 800075c:	40013000 	.word	0x40013000

08000760 <get_emitter_current_mA>:
#include "stm32f103xb.h"
#include "current_source.h"
#include "math.h"

float get_emitter_current_mA()
{
 8000760:	b580      	push	{r7, lr}
 8000762:	b082      	sub	sp, #8
 8000764:	af00      	add	r7, sp, #0
	ADC1->CR2 |= ADC_CR2_ADON;
 8000766:	4b10      	ldr	r3, [pc, #64]	; (80007a8 <get_emitter_current_mA+0x48>)
 8000768:	689b      	ldr	r3, [r3, #8]
 800076a:	4a0f      	ldr	r2, [pc, #60]	; (80007a8 <get_emitter_current_mA+0x48>)
 800076c:	f043 0301 	orr.w	r3, r3, #1
 8000770:	6093      	str	r3, [r2, #8]
	// Wait for the ADC to finish conversion.
	while(!(ADC1->SR & ADC_SR_EOC))
 8000772:	e000      	b.n	8000776 <get_emitter_current_mA+0x16>
	{
	  asm("NOP");
 8000774:	bf00      	nop
	while(!(ADC1->SR & ADC_SR_EOC))
 8000776:	4b0c      	ldr	r3, [pc, #48]	; (80007a8 <get_emitter_current_mA+0x48>)
 8000778:	681b      	ldr	r3, [r3, #0]
 800077a:	f003 0302 	and.w	r3, r3, #2
 800077e:	2b00      	cmp	r3, #0
 8000780:	d0f8      	beq.n	8000774 <get_emitter_current_mA+0x14>
	}
	uint32_t adc_value = ADC1->DR;
 8000782:	4b09      	ldr	r3, [pc, #36]	; (80007a8 <get_emitter_current_mA+0x48>)
 8000784:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000786:	607b      	str	r3, [r7, #4]
	float current_mA = (float)adc_value*(float)LSB_TO_mA_CONVERSION_FACTOR;
 8000788:	6878      	ldr	r0, [r7, #4]
 800078a:	f7ff fe49 	bl	8000420 <__aeabi_ui2f>
 800078e:	4603      	mov	r3, r0
 8000790:	4906      	ldr	r1, [pc, #24]	; (80007ac <get_emitter_current_mA+0x4c>)
 8000792:	4618      	mov	r0, r3
 8000794:	f7ff fcda 	bl	800014c <__aeabi_fmul>
 8000798:	4603      	mov	r3, r0
 800079a:	603b      	str	r3, [r7, #0]

	return current_mA;
 800079c:	683b      	ldr	r3, [r7, #0]
}
 800079e:	4618      	mov	r0, r3
 80007a0:	3708      	adds	r7, #8
 80007a2:	46bd      	mov	sp, r7
 80007a4:	bd80      	pop	{r7, pc}
 80007a6:	bf00      	nop
 80007a8:	40012400 	.word	0x40012400
 80007ac:	3c040840 	.word	0x3c040840

080007b0 <get_emitter_current_lsb>:

uint16_t get_emitter_current_lsb()
{
 80007b0:	b480      	push	{r7}
 80007b2:	b083      	sub	sp, #12
 80007b4:	af00      	add	r7, sp, #0
	// Function to return the adc value of the current directly.

	ADC1->CR2 |= ADC_CR2_ADON;
 80007b6:	4b0c      	ldr	r3, [pc, #48]	; (80007e8 <get_emitter_current_lsb+0x38>)
 80007b8:	689b      	ldr	r3, [r3, #8]
 80007ba:	4a0b      	ldr	r2, [pc, #44]	; (80007e8 <get_emitter_current_lsb+0x38>)
 80007bc:	f043 0301 	orr.w	r3, r3, #1
 80007c0:	6093      	str	r3, [r2, #8]
	// Wait for the ADC to finish conversion.
	while(!(ADC1->SR & ADC_SR_EOC))
 80007c2:	e000      	b.n	80007c6 <get_emitter_current_lsb+0x16>
	{
	  asm("NOP");
 80007c4:	bf00      	nop
	while(!(ADC1->SR & ADC_SR_EOC))
 80007c6:	4b08      	ldr	r3, [pc, #32]	; (80007e8 <get_emitter_current_lsb+0x38>)
 80007c8:	681b      	ldr	r3, [r3, #0]
 80007ca:	f003 0302 	and.w	r3, r3, #2
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	d0f8      	beq.n	80007c4 <get_emitter_current_lsb+0x14>
	}
	uint32_t adc_value = ADC1->DR;
 80007d2:	4b05      	ldr	r3, [pc, #20]	; (80007e8 <get_emitter_current_lsb+0x38>)
 80007d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007d6:	607b      	str	r3, [r7, #4]

	return (uint16_t)adc_value;
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	b29b      	uxth	r3, r3
}
 80007dc:	4618      	mov	r0, r3
 80007de:	370c      	adds	r7, #12
 80007e0:	46bd      	mov	sp, r7
 80007e2:	bc80      	pop	{r7}
 80007e4:	4770      	bx	lr
 80007e6:	bf00      	nop
 80007e8:	40012400 	.word	0x40012400

080007ec <calculate_checksum>:
 * @param startIndex: start index from which the checksum is calculated.
 * @param stopIndex: stop index (not including it) until the checksum is calculated.
 * @return None.
 */
uint8_t calculate_checksum(uint8_t* buffer, uint32_t startIndex, uint32_t stopIndex)
{
 80007ec:	b480      	push	{r7}
 80007ee:	b087      	sub	sp, #28
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	60f8      	str	r0, [r7, #12]
 80007f4:	60b9      	str	r1, [r7, #8]
 80007f6:	607a      	str	r2, [r7, #4]
	uint8_t checksum = 0;
 80007f8:	2300      	movs	r3, #0
 80007fa:	75fb      	strb	r3, [r7, #23]

	for(int index = startIndex; index < stopIndex; index++)
 80007fc:	68bb      	ldr	r3, [r7, #8]
 80007fe:	613b      	str	r3, [r7, #16]
 8000800:	e009      	b.n	8000816 <calculate_checksum+0x2a>
	{
		checksum += buffer[index];
 8000802:	693b      	ldr	r3, [r7, #16]
 8000804:	68fa      	ldr	r2, [r7, #12]
 8000806:	4413      	add	r3, r2
 8000808:	781a      	ldrb	r2, [r3, #0]
 800080a:	7dfb      	ldrb	r3, [r7, #23]
 800080c:	4413      	add	r3, r2
 800080e:	75fb      	strb	r3, [r7, #23]
	for(int index = startIndex; index < stopIndex; index++)
 8000810:	693b      	ldr	r3, [r7, #16]
 8000812:	3301      	adds	r3, #1
 8000814:	613b      	str	r3, [r7, #16]
 8000816:	693b      	ldr	r3, [r7, #16]
 8000818:	687a      	ldr	r2, [r7, #4]
 800081a:	429a      	cmp	r2, r3
 800081c:	d8f1      	bhi.n	8000802 <calculate_checksum+0x16>
	}

	return checksum;
 800081e:	7dfb      	ldrb	r3, [r7, #23]
}
 8000820:	4618      	mov	r0, r3
 8000822:	371c      	adds	r7, #28
 8000824:	46bd      	mov	sp, r7
 8000826:	bc80      	pop	{r7}
 8000828:	4770      	bx	lr
	...

0800082c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800082c:	b480      	push	{r7}
 800082e:	b083      	sub	sp, #12
 8000830:	af00      	add	r7, sp, #0
 8000832:	4603      	mov	r3, r0
 8000834:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000836:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800083a:	2b00      	cmp	r3, #0
 800083c:	db0b      	blt.n	8000856 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800083e:	79fb      	ldrb	r3, [r7, #7]
 8000840:	f003 021f 	and.w	r2, r3, #31
 8000844:	4906      	ldr	r1, [pc, #24]	; (8000860 <__NVIC_EnableIRQ+0x34>)
 8000846:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800084a:	095b      	lsrs	r3, r3, #5
 800084c:	2001      	movs	r0, #1
 800084e:	fa00 f202 	lsl.w	r2, r0, r2
 8000852:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000856:	bf00      	nop
 8000858:	370c      	adds	r7, #12
 800085a:	46bd      	mov	sp, r7
 800085c:	bc80      	pop	{r7}
 800085e:	4770      	bx	lr
 8000860:	e000e100 	.word	0xe000e100

08000864 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	b0b0      	sub	sp, #192	; 0xc0
 8000868:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  // Measurement variables.
  int16_t sensor_values[NUM_SENSORS] = {0};
 800086a:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800086e:	221e      	movs	r2, #30
 8000870:	2100      	movs	r1, #0
 8000872:	4618      	mov	r0, r3
 8000874:	f009 fc7c 	bl	800a170 <memset>
  int16_t sensor_values_tx[NUM_SENSORS] = {0};
 8000878:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800087c:	221e      	movs	r2, #30
 800087e:	2100      	movs	r1, #0
 8000880:	4618      	mov	r0, r3
 8000882:	f009 fc75 	bl	800a170 <memset>
  int16_t offset_values[NUM_SENSORS] = {0};
 8000886:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800088a:	221e      	movs	r2, #30
 800088c:	2100      	movs	r1, #0
 800088e:	4618      	mov	r0, r3
 8000890:	f009 fc6e 	bl	800a170 <memset>

  uint8_t frame_buffer[FRAME_BUFFER_LENGTH_BYTES] = {0};
 8000894:	2300      	movs	r3, #0
 8000896:	603b      	str	r3, [r7, #0]
 8000898:	1d3b      	adds	r3, r7, #4
 800089a:	2223      	movs	r2, #35	; 0x23
 800089c:	2100      	movs	r1, #0
 800089e:	4618      	mov	r0, r3
 80008a0:	f009 fc66 	bl	800a170 <memset>
  frame_buffer[0] = START_BYTE_0; // Initialize here b.c. these never change.
 80008a4:	23aa      	movs	r3, #170	; 0xaa
 80008a6:	703b      	strb	r3, [r7, #0]
  frame_buffer[1] = START_BYTE_1; // -"-
 80008a8:	2355      	movs	r3, #85	; 0x55
 80008aa:	707b      	strb	r3, [r7, #1]

  // Timer variables.
  uint32_t PRESC_VALUE = TIM3_PERIPHERAL_CLOCK_FREQ_HZ/(MEASURING_FREQUENCY_HZ*ARR_VALUE) - 1;
 80008ac:	232f      	movs	r3, #47	; 0x2f
 80008ae:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  uint32_t PRESC_VALUE_BUTTON_CAPTURE = TIM3_PERIPHERAL_CLOCK_FREQ_HZ/(BUTTON_CAPTURE_MIN_FREQ_HZ*ARR_VALUE) - 1;
 80008b2:	f240 13df 	movw	r3, #479	; 0x1df
 80008b6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  if(PRESC_VALUE >= 65535)
 80008ba:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80008be:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80008c2:	4293      	cmp	r3, r2
 80008c4:	d902      	bls.n	80008cc <main+0x68>
  {
	  GPIOB->BSRR = STATUS_LED_RED_B_HIGH;
 80008c6:	4ba6      	ldr	r3, [pc, #664]	; (8000b60 <main+0x2fc>)
 80008c8:	2202      	movs	r2, #2
 80008ca:	611a      	str	r2, [r3, #16]
  }

  if(PRESC_VALUE_BUTTON_CAPTURE >= 65535)
 80008cc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80008d0:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80008d4:	4293      	cmp	r3, r2
 80008d6:	d902      	bls.n	80008de <main+0x7a>
  {
	  GPIOB->BSRR = STATUS_LED_RED_B_HIGH;
 80008d8:	4ba1      	ldr	r3, [pc, #644]	; (8000b60 <main+0x2fc>)
 80008da:	2202      	movs	r2, #2
 80008dc:	611a      	str	r2, [r3, #16]
  }

  // ADC1 & current source variables.
  uint16_t current_lsb = 0;
 80008de:	2300      	movs	r3, #0
 80008e0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008e4:	f000 ff7e 	bl	80017e4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008e8:	f000 fa40 	bl	8000d6c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008ec:	f000 fbda 	bl	80010a4 <MX_GPIO_Init>
  MX_ADC1_Init();
 80008f0:	f000 fa9a 	bl	8000e28 <MX_ADC1_Init>
  MX_USB_DEVICE_Init();
 80008f4:	f008 ff7c 	bl	80097f0 <MX_USB_DEVICE_Init>
  MX_SPI1_Init();
 80008f8:	f000 fad4 	bl	8000ea4 <MX_SPI1_Init>
  MX_TIM2_Init();
 80008fc:	f000 fb08 	bl	8000f10 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000900:	f000 fb82 	bl	8001008 <MX_TIM3_Init>
	// ************** Initiaizations *****************
	// ***********************************************

  // ++++++++++++++++ Configure the timer. ++++++++++++++++++
  // Set the measuring frequency. f_meas = f_apb1/((PSC+1)*ARR)
    TIM3->PSC = (uint16_t)PRESC_VALUE;
 8000904:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8000908:	b29a      	uxth	r2, r3
 800090a:	4b96      	ldr	r3, [pc, #600]	; (8000b64 <main+0x300>)
 800090c:	629a      	str	r2, [r3, #40]	; 0x28
    TIM3->ARR = (uint16_t)ARR_VALUE;
 800090e:	4b95      	ldr	r3, [pc, #596]	; (8000b64 <main+0x300>)
 8000910:	f242 7210 	movw	r2, #10000	; 0x2710
 8000914:	62da      	str	r2, [r3, #44]	; 0x2c
    // TIM3->CCR1 = (uint16_t)ARR_VALUE;
	TIM3->DIER |= TIM_DIER_UIE; // Enable interrupt generation when CNT = ARR.
 8000916:	4b93      	ldr	r3, [pc, #588]	; (8000b64 <main+0x300>)
 8000918:	68db      	ldr	r3, [r3, #12]
 800091a:	4a92      	ldr	r2, [pc, #584]	; (8000b64 <main+0x300>)
 800091c:	f043 0301 	orr.w	r3, r3, #1
 8000920:	60d3      	str	r3, [r2, #12]

	  // SPI SETUP
	  // Enable interrupts when transmission or reception is completed and rx buffer is not empty
	  // or the tranmit buffer is empty.
	  SPI1->CR2 |= SPI_CR2_RXNEIE;
 8000922:	4b91      	ldr	r3, [pc, #580]	; (8000b68 <main+0x304>)
 8000924:	685b      	ldr	r3, [r3, #4]
 8000926:	4a90      	ldr	r2, [pc, #576]	; (8000b68 <main+0x304>)
 8000928:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800092c:	6053      	str	r3, [r2, #4]
	  SPI1->CR2 |= SPI_CR2_TXEIE;
 800092e:	4b8e      	ldr	r3, [pc, #568]	; (8000b68 <main+0x304>)
 8000930:	685b      	ldr	r3, [r3, #4]
 8000932:	4a8d      	ldr	r2, [pc, #564]	; (8000b68 <main+0x304>)
 8000934:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000938:	6053      	str	r3, [r2, #4]
	  SPI1->CR1 |= SPI_CR1_SPE;
 800093a:	4b8b      	ldr	r3, [pc, #556]	; (8000b68 <main+0x304>)
 800093c:	681b      	ldr	r3, [r3, #0]
 800093e:	4a8a      	ldr	r2, [pc, #552]	; (8000b68 <main+0x304>)
 8000940:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000944:	6013      	str	r3, [r2, #0]

	// ++++++++++++++++ ADC SETUP ++++++++++++++++
    // TODO: PUT INTO OWN FUNCTION.

    // Enable end of conversion (EOC) interrupts.
  	ADC1->CR1 |= ADC_CR1_EOCIE;
 8000946:	4b89      	ldr	r3, [pc, #548]	; (8000b6c <main+0x308>)
 8000948:	685b      	ldr	r3, [r3, #4]
 800094a:	4a88      	ldr	r2, [pc, #544]	; (8000b6c <main+0x308>)
 800094c:	f043 0320 	orr.w	r3, r3, #32
 8000950:	6053      	str	r3, [r2, #4]
  	NVIC_EnableIRQ(ADC1_2_IRQn); // TODO: NECESSARY?
 8000952:	2012      	movs	r0, #18
 8000954:	f7ff ff6a 	bl	800082c <__NVIC_EnableIRQ>

  	// Set the trigger as software trigger (page 241).
  	ADC1->CR2 |= (ADC_CR2_EXTSEL_2 & ADC_CR2_EXTSEL_1 & ADC_CR2_EXTSEL_0);
 8000958:	4b84      	ldr	r3, [pc, #528]	; (8000b6c <main+0x308>)
 800095a:	4a84      	ldr	r2, [pc, #528]	; (8000b6c <main+0x308>)
 800095c:	689b      	ldr	r3, [r3, #8]
 800095e:	6093      	str	r3, [r2, #8]

	// Wake up the ADC from any power-down mode.
	ADC1->CR2 |= ADC_CR2_ADON;
 8000960:	4b82      	ldr	r3, [pc, #520]	; (8000b6c <main+0x308>)
 8000962:	689b      	ldr	r3, [r3, #8]
 8000964:	4a81      	ldr	r2, [pc, #516]	; (8000b6c <main+0x308>)
 8000966:	f043 0301 	orr.w	r3, r3, #1
 800096a:	6093      	str	r3, [r2, #8]
	HAL_Delay(1);
 800096c:	2001      	movs	r0, #1
 800096e:	f000 ff9b 	bl	80018a8 <HAL_Delay>

	// Turn the ADC on a second time (TODO: NECESSARY?).
	ADC1->CR2 |= ADC_CR2_ADON;
 8000972:	4b7e      	ldr	r3, [pc, #504]	; (8000b6c <main+0x308>)
 8000974:	689b      	ldr	r3, [r3, #8]
 8000976:	4a7d      	ldr	r2, [pc, #500]	; (8000b6c <main+0x308>)
 8000978:	f043 0301 	orr.w	r3, r3, #1
 800097c:	6093      	str	r3, [r2, #8]

	// Calibrate the ADC.
	ADC1->CR2 |= ADC_CR2_CAL; // set calibration start bit
 800097e:	4b7b      	ldr	r3, [pc, #492]	; (8000b6c <main+0x308>)
 8000980:	689b      	ldr	r3, [r3, #8]
 8000982:	4a7a      	ldr	r2, [pc, #488]	; (8000b6c <main+0x308>)
 8000984:	f043 0304 	orr.w	r3, r3, #4
 8000988:	6093      	str	r3, [r2, #8]
	while(ADC1->CR2 & ADC_CR2_CAL)
 800098a:	e000      	b.n	800098e <main+0x12a>
	{
		asm("NOP"); // Wait for the calibration to finish. ADC_CR2_CAL flips back to 0.
 800098c:	bf00      	nop
	while(ADC1->CR2 & ADC_CR2_CAL)
 800098e:	4b77      	ldr	r3, [pc, #476]	; (8000b6c <main+0x308>)
 8000990:	689b      	ldr	r3, [r3, #8]
 8000992:	f003 0304 	and.w	r3, r3, #4
 8000996:	2b00      	cmp	r3, #0
 8000998:	d1f8      	bne.n	800098c <main+0x128>
	// ***********************************************

  // +++++ Test the current source and emitter +++++++

  // ++++++ Read out the current through each emitter. ++++++
  int failing_sensor_index = check_sensor_currents();
 800099a:	f000 fce1 	bl	8001360 <check_sensor_currents>
 800099e:	f8c7 0098 	str.w	r0, [r7, #152]	; 0x98
  if(failing_sensor_index > 0)
 80009a2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	dd02      	ble.n	80009b0 <main+0x14c>
  {
	  state = ST_ERROR;
 80009aa:	4b71      	ldr	r3, [pc, #452]	; (8000b70 <main+0x30c>)
 80009ac:	2203      	movs	r2, #3
 80009ae:	701a      	strb	r2, [r3, #0]
  }

  // TODO: Blink STATUS_LED if any of the emitter is out of range [2, XXX] mA.

  // ++++++ Test the STATUS_LED once ++++++++++++++++++++++++
  GPIOB->BSRR = STATUS_LED_B_HIGH;
 80009b0:	4b6b      	ldr	r3, [pc, #428]	; (8000b60 <main+0x2fc>)
 80009b2:	2201      	movs	r2, #1
 80009b4:	611a      	str	r2, [r3, #16]
  HAL_Delay(1000);
 80009b6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80009ba:	f000 ff75 	bl	80018a8 <HAL_Delay>
  GPIOB->BSRR = STATUS_LED_B_LOW;
 80009be:	4b68      	ldr	r3, [pc, #416]	; (8000b60 <main+0x2fc>)
 80009c0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80009c4:	611a      	str	r2, [r3, #16]

  // +++++++++++++++++ Test the ADC +++++++++++++++++++++++++
  // Toggle the CS Line high initially.
  GPIOA->BSRR = SPI_CS_HIGH;
 80009c6:	4b6b      	ldr	r3, [pc, #428]	; (8000b74 <main+0x310>)
 80009c8:	2210      	movs	r2, #16
 80009ca:	611a      	str	r2, [r3, #16]

  uint32_t data_word = 0;
 80009cc:	2300      	movs	r3, #0
 80009ce:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

  // Change the device id for testing.
  spi_tx_word(WRITE_ID_TO_DEVICE);
 80009d2:	4869      	ldr	r0, [pc, #420]	; (8000b78 <main+0x314>)
 80009d4:	f7ff fe36 	bl	8000644 <spi_tx_word>
  spi_tx_word(READ_ID_FROM_DEVICE);
 80009d8:	4868      	ldr	r0, [pc, #416]	; (8000b7c <main+0x318>)
 80009da:	f7ff fe33 	bl	8000644 <spi_tx_word>
  data_word = spi_rx_word();
 80009de:	f7ff fded 	bl	80005bc <spi_rx_word>
 80009e2:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94

    uint8_t return_reg_value = data_word >> 24; // spi_rx_buffer[0];
 80009e6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80009ea:	0e1b      	lsrs	r3, r3, #24
 80009ec:	f887 3093 	strb.w	r3, [r7, #147]	; 0x93
  // return_reg_value = spi_rx_buffer[0];
  if(return_reg_value != 0x05)
 80009f0:	f897 3093 	ldrb.w	r3, [r7, #147]	; 0x93
 80009f4:	2b05      	cmp	r3, #5
 80009f6:	d002      	beq.n	80009fe <main+0x19a>
  {
	  GPIOA->BSRR = STATUS_LED_B_HIGH;
 80009f8:	4b5e      	ldr	r3, [pc, #376]	; (8000b74 <main+0x310>)
 80009fa:	2201      	movs	r2, #1
 80009fc:	611a      	str	r2, [r3, #16]
  }

  // Change the range select register to a range of 0 to 3xVref.
  spi_tx_word(WRITE_RANGE_SELECTION);
 80009fe:	4860      	ldr	r0, [pc, #384]	; (8000b80 <main+0x31c>)
 8000a00:	f7ff fe20 	bl	8000644 <spi_tx_word>
  // Check, by reading back the register value.
  spi_tx_word(READ_RANGE_SEL_REG);
 8000a04:	485f      	ldr	r0, [pc, #380]	; (8000b84 <main+0x320>)
 8000a06:	f7ff fe1d 	bl	8000644 <spi_tx_word>
  data_word = spi_rx_word();
 8000a0a:	f7ff fdd7 	bl	80005bc <spi_rx_word>
 8000a0e:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94

  return_reg_value = data_word >> 24; // spi_rx_buffer[0];
 8000a12:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8000a16:	0e1b      	lsrs	r3, r3, #24
 8000a18:	f887 3093 	strb.w	r3, [r7, #147]	; 0x93
  if(return_reg_value != 0x08)
 8000a1c:	f897 3093 	ldrb.w	r3, [r7, #147]	; 0x93
 8000a20:	2b08      	cmp	r3, #8
 8000a22:	d002      	beq.n	8000a2a <main+0x1c6>
  {
	  GPIOA->BSRR = STATUS_LED_B_HIGH;
 8000a24:	4b53      	ldr	r3, [pc, #332]	; (8000b74 <main+0x310>)
 8000a26:	2201      	movs	r2, #1
 8000a28:	611a      	str	r2, [r3, #16]
  calculate_crosstalk(crosstalk_values); // should take around 30 ms.
  GPIOB->BSRR = STATUS_LED_RED_B_LOW;
  */

  // Start the state machine.
  TIM3->CR1 |= TIM_CR1_CEN; // Start the timer.
 8000a2a:	4b4e      	ldr	r3, [pc, #312]	; (8000b64 <main+0x300>)
 8000a2c:	681b      	ldr	r3, [r3, #0]
 8000a2e:	4a4d      	ldr	r2, [pc, #308]	; (8000b64 <main+0x300>)
 8000a30:	f043 0301 	orr.w	r3, r3, #1
 8000a34:	6013      	str	r3, [r2, #0]
  // Start the button capture timer 2.
  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);
 8000a36:	2100      	movs	r1, #0
 8000a38:	4853      	ldr	r0, [pc, #332]	; (8000b88 <main+0x324>)
 8000a3a:	f003 ff81 	bl	8004940 <HAL_TIM_IC_Start_IT>
  TIM2->CR1 |= TIM_CR1_CEN; // Start the timer.
 8000a3e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000a48:	f043 0301 	orr.w	r3, r3, #1
 8000a4c:	6013      	str	r3, [r2, #0]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  switch(state)
 8000a4e:	4b48      	ldr	r3, [pc, #288]	; (8000b70 <main+0x30c>)
 8000a50:	781b      	ldrb	r3, [r3, #0]
 8000a52:	2b03      	cmp	r3, #3
 8000a54:	d8fb      	bhi.n	8000a4e <main+0x1ea>
 8000a56:	a201      	add	r2, pc, #4	; (adr r2, 8000a5c <main+0x1f8>)
 8000a58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a5c:	08000a6d 	.word	0x08000a6d
 8000a60:	08000a71 	.word	0x08000a71
 8000a64:	08000c09 	.word	0x08000c09
 8000a68:	08000a4f 	.word	0x08000a4f
	  {
	  case ST_IDLE:
		  asm("NOP");
 8000a6c:	bf00      	nop
		  break;
 8000a6e:	e172      	b.n	8000d56 <main+0x4f2>

	  case ST_MEASURE: ;

		  // Check first, if a crosstalk recalculation is scheduled.
		  if(do_crosstalk_recalculation)
 8000a70:	4b46      	ldr	r3, [pc, #280]	; (8000b8c <main+0x328>)
 8000a72:	781b      	ldrb	r3, [r3, #0]
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	d00c      	beq.n	8000a92 <main+0x22e>
		  {
			  GPIOB->BSRR = STATUS_LED_RED_B_HIGH;
 8000a78:	4b39      	ldr	r3, [pc, #228]	; (8000b60 <main+0x2fc>)
 8000a7a:	2202      	movs	r2, #2
 8000a7c:	611a      	str	r2, [r3, #16]
			  calculate_crosstalk(crosstalk_values); // should take around 30 ms.
 8000a7e:	4844      	ldr	r0, [pc, #272]	; (8000b90 <main+0x32c>)
 8000a80:	f000 fcb2 	bl	80013e8 <calculate_crosstalk>
			  GPIOB->BSRR = STATUS_LED_RED_B_LOW;
 8000a84:	4b36      	ldr	r3, [pc, #216]	; (8000b60 <main+0x2fc>)
 8000a86:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000a8a:	611a      	str	r2, [r3, #16]
			  do_crosstalk_recalculation = 0;
 8000a8c:	4b3f      	ldr	r3, [pc, #252]	; (8000b8c <main+0x328>)
 8000a8e:	2200      	movs	r2, #0
 8000a90:	701a      	strb	r2, [r3, #0]
		  }

		  // On every second button press, reset the crosstalk values.
		  if(reset_crosstalk_values)
 8000a92:	4b40      	ldr	r3, [pc, #256]	; (8000b94 <main+0x330>)
 8000a94:	781b      	ldrb	r3, [r3, #0]
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d01c      	beq.n	8000ad4 <main+0x270>
		  {
			  GPIOB->BSRR = STATUS_LED_RED_B_HIGH;
 8000a9a:	4b31      	ldr	r3, [pc, #196]	; (8000b60 <main+0x2fc>)
 8000a9c:	2202      	movs	r2, #2
 8000a9e:	611a      	str	r2, [r3, #16]
			  for(int i = 0; i < NUM_SENSORS; i++)
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8000aa6:	e00a      	b.n	8000abe <main+0x25a>
			  {
				  crosstalk_values[i] = 0;
 8000aa8:	4a39      	ldr	r2, [pc, #228]	; (8000b90 <main+0x32c>)
 8000aaa:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8000aae:	2100      	movs	r1, #0
 8000ab0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			  for(int i = 0; i < NUM_SENSORS; i++)
 8000ab4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8000ab8:	3301      	adds	r3, #1
 8000aba:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8000abe:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8000ac2:	2b0e      	cmp	r3, #14
 8000ac4:	ddf0      	ble.n	8000aa8 <main+0x244>
			  }
			  GPIOB->BSRR = STATUS_LED_RED_B_LOW;
 8000ac6:	4b26      	ldr	r3, [pc, #152]	; (8000b60 <main+0x2fc>)
 8000ac8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000acc:	611a      	str	r2, [r3, #16]
			  reset_crosstalk_values = 0;
 8000ace:	4b31      	ldr	r3, [pc, #196]	; (8000b94 <main+0x330>)
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	701a      	strb	r2, [r3, #0]
		  }

		  // Do OFFSET calculation prior to sensing until the current source can
		  // be enabled without zeroing out the PD response for a short time.

		  current_lsb = measure_sensors(offset_values, NUM_MEASUREMENTS_PER_SENSOR_DC_OFFSET);
 8000ad4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000ad8:	2120      	movs	r1, #32
 8000ada:	4618      	mov	r0, r3
 8000adc:	f000 fbaa 	bl	8001234 <measure_sensors>
 8000ae0:	4603      	mov	r3, r0
 8000ae2:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe

		  // Read out the sensor values with the current source turned on.
		  GPIOA->BSRR = CURRENT_SOURCE_A_ON;
 8000ae6:	4b23      	ldr	r3, [pc, #140]	; (8000b74 <main+0x310>)
 8000ae8:	2202      	movs	r2, #2
 8000aea:	611a      	str	r2, [r3, #16]
		  current_lsb = measure_sensors(sensor_values, NUM_MEASUREMENTS_PER_SENSOR);
 8000aec:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8000af0:	2120      	movs	r1, #32
 8000af2:	4618      	mov	r0, r3
 8000af4:	f000 fb9e 	bl	8001234 <measure_sensors>
 8000af8:	4603      	mov	r3, r0
 8000afa:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
		  // Measure the emitter current once for transmit before turning it off.

		  // current_lsb = get_emitter_current_lsb();
		  GPIOA->BSRR = CURRENT_SOURCE_A_OFF;
 8000afe:	4b1d      	ldr	r3, [pc, #116]	; (8000b74 <main+0x310>)
 8000b00:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000b04:	611a      	str	r2, [r3, #16]

		  // Calculate the PD value-dependent small deviation in the crosstalk value.
		  uint32_t mean_offset_value = 0;
 8000b06:	2300      	movs	r3, #0
 8000b08:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
		  for(int sensor_index = 0; sensor_index < NUM_SENSORS; sensor_index++)
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8000b12:	e011      	b.n	8000b38 <main+0x2d4>
		  {
			  mean_offset_value += offset_values[sensor_index];
 8000b14:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8000b18:	005b      	lsls	r3, r3, #1
 8000b1a:	33c0      	adds	r3, #192	; 0xc0
 8000b1c:	443b      	add	r3, r7
 8000b1e:	f933 3c98 	ldrsh.w	r3, [r3, #-152]
 8000b22:	461a      	mov	r2, r3
 8000b24:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8000b28:	4413      	add	r3, r2
 8000b2a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
		  for(int sensor_index = 0; sensor_index < NUM_SENSORS; sensor_index++)
 8000b2e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8000b32:	3301      	adds	r3, #1
 8000b34:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8000b38:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8000b3c:	2b0e      	cmp	r3, #14
 8000b3e:	dde9      	ble.n	8000b14 <main+0x2b0>
		  }
		  mean_offset_value = mean_offset_value/NUM_SENSORS;
 8000b40:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8000b44:	4a14      	ldr	r2, [pc, #80]	; (8000b98 <main+0x334>)
 8000b46:	fba2 2303 	umull	r2, r3, r2, r3
 8000b4a:	08db      	lsrs	r3, r3, #3
 8000b4c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

		  // int16_t crosstalk_offset = 50 - (int16_t)(log((double)mean_offset_value/0.5189)/0.2027);
		  crosstalk_offset = 0; // TODO: crosstalk_offset is not yet compatible with single optode board
 8000b50:	4b12      	ldr	r3, [pc, #72]	; (8000b9c <main+0x338>)
 8000b52:	2200      	movs	r2, #0
 8000b54:	801a      	strh	r2, [r3, #0]

		  // Calculate the final sensor values (minus DC offset and cross-talk).
		  for(int sensor_index = 0; sensor_index < NUM_SENSORS; sensor_index++)
 8000b56:	2300      	movs	r3, #0
 8000b58:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8000b5c:	e04d      	b.n	8000bfa <main+0x396>
 8000b5e:	bf00      	nop
 8000b60:	40010c00 	.word	0x40010c00
 8000b64:	40000400 	.word	0x40000400
 8000b68:	40013000 	.word	0x40013000
 8000b6c:	40012400 	.word	0x40012400
 8000b70:	200002dc 	.word	0x200002dc
 8000b74:	40010800 	.word	0x40010800
 8000b78:	d0020005 	.word	0xd0020005
 8000b7c:	48020000 	.word	0x48020000
 8000b80:	d0140008 	.word	0xd0140008
 8000b84:	48140000 	.word	0x48140000
 8000b88:	20000220 	.word	0x20000220
 8000b8c:	200002b8 	.word	0x200002b8
 8000b90:	200002bc 	.word	0x200002bc
 8000b94:	200002b9 	.word	0x200002b9
 8000b98:	88888889 	.word	0x88888889
 8000b9c:	200002da 	.word	0x200002da
		  {
			  sensor_values_tx[sensor_index] = sensor_values[sensor_index]
 8000ba0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8000ba4:	005b      	lsls	r3, r3, #1
 8000ba6:	33c0      	adds	r3, #192	; 0xc0
 8000ba8:	443b      	add	r3, r7
 8000baa:	f933 3c58 	ldrsh.w	r3, [r3, #-88]
 8000bae:	b29a      	uxth	r2, r3
											 - offset_values[sensor_index]
 8000bb0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8000bb4:	005b      	lsls	r3, r3, #1
 8000bb6:	33c0      	adds	r3, #192	; 0xc0
 8000bb8:	443b      	add	r3, r7
 8000bba:	f933 3c98 	ldrsh.w	r3, [r3, #-152]
 8000bbe:	b29b      	uxth	r3, r3
 8000bc0:	1ad3      	subs	r3, r2, r3
 8000bc2:	b29a      	uxth	r2, r3
											 - crosstalk_values[sensor_index]
 8000bc4:	4964      	ldr	r1, [pc, #400]	; (8000d58 <main+0x4f4>)
 8000bc6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8000bca:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
 8000bce:	b29b      	uxth	r3, r3
 8000bd0:	1ad3      	subs	r3, r2, r3
 8000bd2:	b29a      	uxth	r2, r3
											 + crosstalk_offset;
 8000bd4:	4b61      	ldr	r3, [pc, #388]	; (8000d5c <main+0x4f8>)
 8000bd6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000bda:	b29b      	uxth	r3, r3
 8000bdc:	4413      	add	r3, r2
 8000bde:	b29b      	uxth	r3, r3
 8000be0:	b21a      	sxth	r2, r3
			  sensor_values_tx[sensor_index] = sensor_values[sensor_index]
 8000be2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8000be6:	005b      	lsls	r3, r3, #1
 8000be8:	33c0      	adds	r3, #192	; 0xc0
 8000bea:	443b      	add	r3, r7
 8000bec:	f823 2c78 	strh.w	r2, [r3, #-120]
		  for(int sensor_index = 0; sensor_index < NUM_SENSORS; sensor_index++)
 8000bf0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8000bf4:	3301      	adds	r3, #1
 8000bf6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8000bfa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8000bfe:	2b0e      	cmp	r3, #14
 8000c00:	ddce      	ble.n	8000ba0 <main+0x33c>
		  }

		  state = ST_TRANSMIT;
 8000c02:	4b57      	ldr	r3, [pc, #348]	; (8000d60 <main+0x4fc>)
 8000c04:	2202      	movs	r2, #2
 8000c06:	701a      	strb	r2, [r3, #0]

	  case ST_TRANSMIT: ; // https://www.educative.io/edpresso/resolving-the-a-label-can-only-be-part-of-a-statement-error
		  // Construct the frame.
		  // (ADC module range register value) TODO IF NEEDED.

	  	  uint32_t byte_index = NUM_START_BYTES;
 8000c08:	2302      	movs	r3, #2
 8000c0a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

	  	  // **** Fill the frame buffer, all MSB first. ************
		  // 2 Alignment bits (already done).

	  	  // 32 bit frame buffer first.
	  	  frame_buffer[byte_index++] = frame_number >> 24;
 8000c0e:	4b55      	ldr	r3, [pc, #340]	; (8000d64 <main+0x500>)
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	0e19      	lsrs	r1, r3, #24
 8000c14:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8000c18:	1c5a      	adds	r2, r3, #1
 8000c1a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8000c1e:	b2ca      	uxtb	r2, r1
 8000c20:	33c0      	adds	r3, #192	; 0xc0
 8000c22:	443b      	add	r3, r7
 8000c24:	f803 2cc0 	strb.w	r2, [r3, #-192]
	  	  frame_buffer[byte_index++] = frame_number >> 16;
 8000c28:	4b4e      	ldr	r3, [pc, #312]	; (8000d64 <main+0x500>)
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	0c19      	lsrs	r1, r3, #16
 8000c2e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8000c32:	1c5a      	adds	r2, r3, #1
 8000c34:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8000c38:	b2ca      	uxtb	r2, r1
 8000c3a:	33c0      	adds	r3, #192	; 0xc0
 8000c3c:	443b      	add	r3, r7
 8000c3e:	f803 2cc0 	strb.w	r2, [r3, #-192]
	  	  frame_buffer[byte_index++] = frame_number >> 8;
 8000c42:	4b48      	ldr	r3, [pc, #288]	; (8000d64 <main+0x500>)
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	0a19      	lsrs	r1, r3, #8
 8000c48:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8000c4c:	1c5a      	adds	r2, r3, #1
 8000c4e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8000c52:	b2ca      	uxtb	r2, r1
 8000c54:	33c0      	adds	r3, #192	; 0xc0
 8000c56:	443b      	add	r3, r7
 8000c58:	f803 2cc0 	strb.w	r2, [r3, #-192]
	  	  frame_buffer[byte_index++] = frame_number;
 8000c5c:	4b41      	ldr	r3, [pc, #260]	; (8000d64 <main+0x500>)
 8000c5e:	6819      	ldr	r1, [r3, #0]
 8000c60:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8000c64:	1c5a      	adds	r2, r3, #1
 8000c66:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8000c6a:	b2ca      	uxtb	r2, r1
 8000c6c:	33c0      	adds	r3, #192	; 0xc0
 8000c6e:	443b      	add	r3, r7
 8000c70:	f803 2cc0 	strb.w	r2, [r3, #-192]

	  	  // 16 bit emitter current as lsb value.
	  	  frame_buffer[byte_index++] = current_lsb >> 8;
 8000c74:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8000c78:	0a1b      	lsrs	r3, r3, #8
 8000c7a:	b299      	uxth	r1, r3
 8000c7c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8000c80:	1c5a      	adds	r2, r3, #1
 8000c82:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8000c86:	b2ca      	uxtb	r2, r1
 8000c88:	33c0      	adds	r3, #192	; 0xc0
 8000c8a:	443b      	add	r3, r7
 8000c8c:	f803 2cc0 	strb.w	r2, [r3, #-192]
	  	  frame_buffer[byte_index++] = current_lsb;
 8000c90:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8000c94:	1c5a      	adds	r2, r3, #1
 8000c96:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8000c9a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8000c9e:	b2d2      	uxtb	r2, r2
 8000ca0:	33c0      	adds	r3, #192	; 0xc0
 8000ca2:	443b      	add	r3, r7
 8000ca4:	f803 2cc0 	strb.w	r2, [r3, #-192]

	  	  // 16 bits for every sensor value.
		  for(int sensor_index = 0; sensor_index < NUM_SENSORS; sensor_index++)
 8000ca8:	2300      	movs	r3, #0
 8000caa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8000cae:	e028      	b.n	8000d02 <main+0x49e>
		  {
			  // Transmit MSB first.
			  frame_buffer[byte_index++] = sensor_values_tx[sensor_index] >> 8;
 8000cb0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8000cb4:	005b      	lsls	r3, r3, #1
 8000cb6:	33c0      	adds	r3, #192	; 0xc0
 8000cb8:	443b      	add	r3, r7
 8000cba:	f933 3c78 	ldrsh.w	r3, [r3, #-120]
 8000cbe:	121b      	asrs	r3, r3, #8
 8000cc0:	b219      	sxth	r1, r3
 8000cc2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8000cc6:	1c5a      	adds	r2, r3, #1
 8000cc8:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8000ccc:	b2ca      	uxtb	r2, r1
 8000cce:	33c0      	adds	r3, #192	; 0xc0
 8000cd0:	443b      	add	r3, r7
 8000cd2:	f803 2cc0 	strb.w	r2, [r3, #-192]
			  frame_buffer[byte_index++] = sensor_values_tx[sensor_index];
 8000cd6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8000cda:	005b      	lsls	r3, r3, #1
 8000cdc:	33c0      	adds	r3, #192	; 0xc0
 8000cde:	443b      	add	r3, r7
 8000ce0:	f933 1c78 	ldrsh.w	r1, [r3, #-120]
 8000ce4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8000ce8:	1c5a      	adds	r2, r3, #1
 8000cea:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8000cee:	b2ca      	uxtb	r2, r1
 8000cf0:	33c0      	adds	r3, #192	; 0xc0
 8000cf2:	443b      	add	r3, r7
 8000cf4:	f803 2cc0 	strb.w	r2, [r3, #-192]
		  for(int sensor_index = 0; sensor_index < NUM_SENSORS; sensor_index++)
 8000cf8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8000cfc:	3301      	adds	r3, #1
 8000cfe:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8000d02:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8000d06:	2b0e      	cmp	r3, #14
 8000d08:	ddd2      	ble.n	8000cb0 <main+0x44c>
		  }

		  // ****************************************

		  uint32_t start_index = NUM_START_BYTES; // FOR DEBUGGING, MUST BE 2.
 8000d0a:	2302      	movs	r3, #2
 8000d0c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
		  uint32_t stop_index = byte_index;       // FOR DEBUGGING, MUST BE FRAME_BUFFER_LENGTH_BYTES - 1
 8000d10:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8000d14:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
		  // Checksum.
		  uint8_t checksum = calculate_checksum(frame_buffer, start_index, stop_index);
 8000d18:	463b      	mov	r3, r7
 8000d1a:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8000d1e:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 8000d22:	4618      	mov	r0, r3
 8000d24:	f7ff fd62 	bl	80007ec <calculate_checksum>
 8000d28:	4603      	mov	r3, r0
 8000d2a:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
		  frame_buffer[byte_index] = checksum;
 8000d2e:	463a      	mov	r2, r7
 8000d30:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8000d34:	4413      	add	r3, r2
 8000d36:	f897 2087 	ldrb.w	r2, [r7, #135]	; 0x87
 8000d3a:	701a      	strb	r2, [r3, #0]
		  status = CDC_Transmit_FS((uint8_t*)frame_buffer, FRAME_BUFFER_LENGTH_BYTES);
 8000d3c:	463b      	mov	r3, r7
 8000d3e:	2127      	movs	r1, #39	; 0x27
 8000d40:	4618      	mov	r0, r3
 8000d42:	f008 fe13 	bl	800996c <CDC_Transmit_FS>
 8000d46:	4603      	mov	r3, r0
 8000d48:	461a      	mov	r2, r3
 8000d4a:	4b07      	ldr	r3, [pc, #28]	; (8000d68 <main+0x504>)
 8000d4c:	701a      	strb	r2, [r3, #0]
		  state = ST_IDLE;
 8000d4e:	4b04      	ldr	r3, [pc, #16]	; (8000d60 <main+0x4fc>)
 8000d50:	2200      	movs	r2, #0
 8000d52:	701a      	strb	r2, [r3, #0]
		  break;
 8000d54:	bf00      	nop
	  switch(state)
 8000d56:	e67a      	b.n	8000a4e <main+0x1ea>
 8000d58:	200002bc 	.word	0x200002bc
 8000d5c:	200002da 	.word	0x200002da
 8000d60:	200002dc 	.word	0x200002dc
 8000d64:	200002b4 	.word	0x200002b4
 8000d68:	200002b0 	.word	0x200002b0

08000d6c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b094      	sub	sp, #80	; 0x50
 8000d70:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d72:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000d76:	2228      	movs	r2, #40	; 0x28
 8000d78:	2100      	movs	r1, #0
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	f009 f9f8 	bl	800a170 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d80:	f107 0314 	add.w	r3, r7, #20
 8000d84:	2200      	movs	r2, #0
 8000d86:	601a      	str	r2, [r3, #0]
 8000d88:	605a      	str	r2, [r3, #4]
 8000d8a:	609a      	str	r2, [r3, #8]
 8000d8c:	60da      	str	r2, [r3, #12]
 8000d8e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d90:	1d3b      	adds	r3, r7, #4
 8000d92:	2200      	movs	r2, #0
 8000d94:	601a      	str	r2, [r3, #0]
 8000d96:	605a      	str	r2, [r3, #4]
 8000d98:	609a      	str	r2, [r3, #8]
 8000d9a:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000d9c:	2301      	movs	r3, #1
 8000d9e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000da0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000da4:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000da6:	2300      	movs	r3, #0
 8000da8:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000daa:	2301      	movs	r3, #1
 8000dac:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000dae:	2302      	movs	r3, #2
 8000db0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000db2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000db6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000db8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000dbc:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000dbe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	f002 fff2 	bl	8003dac <HAL_RCC_OscConfig>
 8000dc8:	4603      	mov	r3, r0
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d001      	beq.n	8000dd2 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000dce:	f000 fa2b 	bl	8001228 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000dd2:	230f      	movs	r3, #15
 8000dd4:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000dd6:	2302      	movs	r3, #2
 8000dd8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000dda:	2300      	movs	r3, #0
 8000ddc:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000dde:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000de2:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000de4:	2300      	movs	r3, #0
 8000de6:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000de8:	f107 0314 	add.w	r3, r7, #20
 8000dec:	2101      	movs	r1, #1
 8000dee:	4618      	mov	r0, r3
 8000df0:	f003 fa5e 	bl	80042b0 <HAL_RCC_ClockConfig>
 8000df4:	4603      	mov	r3, r0
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d001      	beq.n	8000dfe <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000dfa:	f000 fa15 	bl	8001228 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_USB;
 8000dfe:	2312      	movs	r3, #18
 8000e00:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV4;
 8000e02:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000e06:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8000e08:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000e0c:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e0e:	1d3b      	adds	r3, r7, #4
 8000e10:	4618      	mov	r0, r3
 8000e12:	f003 fbb3 	bl	800457c <HAL_RCCEx_PeriphCLKConfig>
 8000e16:	4603      	mov	r3, r0
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d001      	beq.n	8000e20 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000e1c:	f000 fa04 	bl	8001228 <Error_Handler>
  }
}
 8000e20:	bf00      	nop
 8000e22:	3750      	adds	r7, #80	; 0x50
 8000e24:	46bd      	mov	sp, r7
 8000e26:	bd80      	pop	{r7, pc}

08000e28 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b084      	sub	sp, #16
 8000e2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000e2e:	1d3b      	adds	r3, r7, #4
 8000e30:	2200      	movs	r2, #0
 8000e32:	601a      	str	r2, [r3, #0]
 8000e34:	605a      	str	r2, [r3, #4]
 8000e36:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8000e38:	4b18      	ldr	r3, [pc, #96]	; (8000e9c <MX_ADC1_Init+0x74>)
 8000e3a:	4a19      	ldr	r2, [pc, #100]	; (8000ea0 <MX_ADC1_Init+0x78>)
 8000e3c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000e3e:	4b17      	ldr	r3, [pc, #92]	; (8000e9c <MX_ADC1_Init+0x74>)
 8000e40:	2200      	movs	r2, #0
 8000e42:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000e44:	4b15      	ldr	r3, [pc, #84]	; (8000e9c <MX_ADC1_Init+0x74>)
 8000e46:	2200      	movs	r2, #0
 8000e48:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000e4a:	4b14      	ldr	r3, [pc, #80]	; (8000e9c <MX_ADC1_Init+0x74>)
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000e50:	4b12      	ldr	r3, [pc, #72]	; (8000e9c <MX_ADC1_Init+0x74>)
 8000e52:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000e56:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000e58:	4b10      	ldr	r3, [pc, #64]	; (8000e9c <MX_ADC1_Init+0x74>)
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8000e5e:	4b0f      	ldr	r3, [pc, #60]	; (8000e9c <MX_ADC1_Init+0x74>)
 8000e60:	2201      	movs	r2, #1
 8000e62:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000e64:	480d      	ldr	r0, [pc, #52]	; (8000e9c <MX_ADC1_Init+0x74>)
 8000e66:	f000 fd43 	bl	80018f0 <HAL_ADC_Init>
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d001      	beq.n	8000e74 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8000e70:	f000 f9da 	bl	8001228 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000e74:	2300      	movs	r3, #0
 8000e76:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000e78:	2301      	movs	r3, #1
 8000e7a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e80:	1d3b      	adds	r3, r7, #4
 8000e82:	4619      	mov	r1, r3
 8000e84:	4805      	ldr	r0, [pc, #20]	; (8000e9c <MX_ADC1_Init+0x74>)
 8000e86:	f000 fee1 	bl	8001c4c <HAL_ADC_ConfigChannel>
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d001      	beq.n	8000e94 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8000e90:	f000 f9ca 	bl	8001228 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000e94:	bf00      	nop
 8000e96:	3710      	adds	r7, #16
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	bd80      	pop	{r7, pc}
 8000e9c:	20000198 	.word	0x20000198
 8000ea0:	40012400 	.word	0x40012400

08000ea4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000ea8:	4b17      	ldr	r3, [pc, #92]	; (8000f08 <MX_SPI1_Init+0x64>)
 8000eaa:	4a18      	ldr	r2, [pc, #96]	; (8000f0c <MX_SPI1_Init+0x68>)
 8000eac:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000eae:	4b16      	ldr	r3, [pc, #88]	; (8000f08 <MX_SPI1_Init+0x64>)
 8000eb0:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000eb4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000eb6:	4b14      	ldr	r3, [pc, #80]	; (8000f08 <MX_SPI1_Init+0x64>)
 8000eb8:	2200      	movs	r2, #0
 8000eba:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000ebc:	4b12      	ldr	r3, [pc, #72]	; (8000f08 <MX_SPI1_Init+0x64>)
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000ec2:	4b11      	ldr	r3, [pc, #68]	; (8000f08 <MX_SPI1_Init+0x64>)
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000ec8:	4b0f      	ldr	r3, [pc, #60]	; (8000f08 <MX_SPI1_Init+0x64>)
 8000eca:	2200      	movs	r2, #0
 8000ecc:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000ece:	4b0e      	ldr	r3, [pc, #56]	; (8000f08 <MX_SPI1_Init+0x64>)
 8000ed0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000ed4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000ed6:	4b0c      	ldr	r3, [pc, #48]	; (8000f08 <MX_SPI1_Init+0x64>)
 8000ed8:	2208      	movs	r2, #8
 8000eda:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000edc:	4b0a      	ldr	r3, [pc, #40]	; (8000f08 <MX_SPI1_Init+0x64>)
 8000ede:	2200      	movs	r2, #0
 8000ee0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000ee2:	4b09      	ldr	r3, [pc, #36]	; (8000f08 <MX_SPI1_Init+0x64>)
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000ee8:	4b07      	ldr	r3, [pc, #28]	; (8000f08 <MX_SPI1_Init+0x64>)
 8000eea:	2200      	movs	r2, #0
 8000eec:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000eee:	4b06      	ldr	r3, [pc, #24]	; (8000f08 <MX_SPI1_Init+0x64>)
 8000ef0:	220a      	movs	r2, #10
 8000ef2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000ef4:	4804      	ldr	r0, [pc, #16]	; (8000f08 <MX_SPI1_Init+0x64>)
 8000ef6:	f003 fbf7 	bl	80046e8 <HAL_SPI_Init>
 8000efa:	4603      	mov	r3, r0
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d001      	beq.n	8000f04 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000f00:	f000 f992 	bl	8001228 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000f04:	bf00      	nop
 8000f06:	bd80      	pop	{r7, pc}
 8000f08:	200001c8 	.word	0x200001c8
 8000f0c:	40013000 	.word	0x40013000

08000f10 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b08a      	sub	sp, #40	; 0x28
 8000f14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f16:	f107 0318 	add.w	r3, r7, #24
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	601a      	str	r2, [r3, #0]
 8000f1e:	605a      	str	r2, [r3, #4]
 8000f20:	609a      	str	r2, [r3, #8]
 8000f22:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f24:	f107 0310 	add.w	r3, r7, #16
 8000f28:	2200      	movs	r2, #0
 8000f2a:	601a      	str	r2, [r3, #0]
 8000f2c:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000f2e:	463b      	mov	r3, r7
 8000f30:	2200      	movs	r2, #0
 8000f32:	601a      	str	r2, [r3, #0]
 8000f34:	605a      	str	r2, [r3, #4]
 8000f36:	609a      	str	r2, [r3, #8]
 8000f38:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000f3a:	4b32      	ldr	r3, [pc, #200]	; (8001004 <MX_TIM2_Init+0xf4>)
 8000f3c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000f40:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 48-1;
 8000f42:	4b30      	ldr	r3, [pc, #192]	; (8001004 <MX_TIM2_Init+0xf4>)
 8000f44:	222f      	movs	r2, #47	; 0x2f
 8000f46:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f48:	4b2e      	ldr	r3, [pc, #184]	; (8001004 <MX_TIM2_Init+0xf4>)
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10000;
 8000f4e:	4b2d      	ldr	r3, [pc, #180]	; (8001004 <MX_TIM2_Init+0xf4>)
 8000f50:	f242 7210 	movw	r2, #10000	; 0x2710
 8000f54:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f56:	4b2b      	ldr	r3, [pc, #172]	; (8001004 <MX_TIM2_Init+0xf4>)
 8000f58:	2200      	movs	r2, #0
 8000f5a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f5c:	4b29      	ldr	r3, [pc, #164]	; (8001004 <MX_TIM2_Init+0xf4>)
 8000f5e:	2200      	movs	r2, #0
 8000f60:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000f62:	4828      	ldr	r0, [pc, #160]	; (8001004 <MX_TIM2_Init+0xf4>)
 8000f64:	f003 fc44 	bl	80047f0 <HAL_TIM_Base_Init>
 8000f68:	4603      	mov	r3, r0
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d001      	beq.n	8000f72 <MX_TIM2_Init+0x62>
  {
    Error_Handler();
 8000f6e:	f000 f95b 	bl	8001228 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f72:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f76:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000f78:	f107 0318 	add.w	r3, r7, #24
 8000f7c:	4619      	mov	r1, r3
 8000f7e:	4821      	ldr	r0, [pc, #132]	; (8001004 <MX_TIM2_Init+0xf4>)
 8000f80:	f003 ff80 	bl	8004e84 <HAL_TIM_ConfigClockSource>
 8000f84:	4603      	mov	r3, r0
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d001      	beq.n	8000f8e <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8000f8a:	f000 f94d 	bl	8001228 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8000f8e:	481d      	ldr	r0, [pc, #116]	; (8001004 <MX_TIM2_Init+0xf4>)
 8000f90:	f003 fc7d 	bl	800488e <HAL_TIM_IC_Init>
 8000f94:	4603      	mov	r3, r0
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d001      	beq.n	8000f9e <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000f9a:	f000 f945 	bl	8001228 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000fa6:	f107 0310 	add.w	r3, r7, #16
 8000faa:	4619      	mov	r1, r3
 8000fac:	4815      	ldr	r0, [pc, #84]	; (8001004 <MX_TIM2_Init+0xf4>)
 8000fae:	f004 fa73 	bl	8005498 <HAL_TIMEx_MasterConfigSynchronization>
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d001      	beq.n	8000fbc <MX_TIM2_Init+0xac>
  {
    Error_Handler();
 8000fb8:	f000 f936 	bl	8001228 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8000fbc:	2302      	movs	r3, #2
 8000fbe:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000fc0:	2301      	movs	r3, #1
 8000fc2:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8000fc8:	2300      	movs	r3, #0
 8000fca:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000fcc:	463b      	mov	r3, r7
 8000fce:	2200      	movs	r2, #0
 8000fd0:	4619      	mov	r1, r3
 8000fd2:	480c      	ldr	r0, [pc, #48]	; (8001004 <MX_TIM2_Init+0xf4>)
 8000fd4:	f003 fec2 	bl	8004d5c <HAL_TIM_IC_ConfigChannel>
 8000fd8:	4603      	mov	r3, r0
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d001      	beq.n	8000fe2 <MX_TIM2_Init+0xd2>
  {
    Error_Handler();
 8000fde:	f000 f923 	bl	8001228 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 8000fe6:	463b      	mov	r3, r7
 8000fe8:	220c      	movs	r2, #12
 8000fea:	4619      	mov	r1, r3
 8000fec:	4805      	ldr	r0, [pc, #20]	; (8001004 <MX_TIM2_Init+0xf4>)
 8000fee:	f003 feb5 	bl	8004d5c <HAL_TIM_IC_ConfigChannel>
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d001      	beq.n	8000ffc <MX_TIM2_Init+0xec>
  {
    Error_Handler();
 8000ff8:	f000 f916 	bl	8001228 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000ffc:	bf00      	nop
 8000ffe:	3728      	adds	r7, #40	; 0x28
 8001000:	46bd      	mov	sp, r7
 8001002:	bd80      	pop	{r7, pc}
 8001004:	20000220 	.word	0x20000220

08001008 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b086      	sub	sp, #24
 800100c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800100e:	f107 0308 	add.w	r3, r7, #8
 8001012:	2200      	movs	r2, #0
 8001014:	601a      	str	r2, [r3, #0]
 8001016:	605a      	str	r2, [r3, #4]
 8001018:	609a      	str	r2, [r3, #8]
 800101a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800101c:	463b      	mov	r3, r7
 800101e:	2200      	movs	r2, #0
 8001020:	601a      	str	r2, [r3, #0]
 8001022:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001024:	4b1d      	ldr	r3, [pc, #116]	; (800109c <MX_TIM3_Init+0x94>)
 8001026:	4a1e      	ldr	r2, [pc, #120]	; (80010a0 <MX_TIM3_Init+0x98>)
 8001028:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 48-1;
 800102a:	4b1c      	ldr	r3, [pc, #112]	; (800109c <MX_TIM3_Init+0x94>)
 800102c:	222f      	movs	r2, #47	; 0x2f
 800102e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001030:	4b1a      	ldr	r3, [pc, #104]	; (800109c <MX_TIM3_Init+0x94>)
 8001032:	2200      	movs	r2, #0
 8001034:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 10000;
 8001036:	4b19      	ldr	r3, [pc, #100]	; (800109c <MX_TIM3_Init+0x94>)
 8001038:	f242 7210 	movw	r2, #10000	; 0x2710
 800103c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800103e:	4b17      	ldr	r3, [pc, #92]	; (800109c <MX_TIM3_Init+0x94>)
 8001040:	2200      	movs	r2, #0
 8001042:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001044:	4b15      	ldr	r3, [pc, #84]	; (800109c <MX_TIM3_Init+0x94>)
 8001046:	2280      	movs	r2, #128	; 0x80
 8001048:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800104a:	4814      	ldr	r0, [pc, #80]	; (800109c <MX_TIM3_Init+0x94>)
 800104c:	f003 fbd0 	bl	80047f0 <HAL_TIM_Base_Init>
 8001050:	4603      	mov	r3, r0
 8001052:	2b00      	cmp	r3, #0
 8001054:	d001      	beq.n	800105a <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8001056:	f000 f8e7 	bl	8001228 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800105a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800105e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001060:	f107 0308 	add.w	r3, r7, #8
 8001064:	4619      	mov	r1, r3
 8001066:	480d      	ldr	r0, [pc, #52]	; (800109c <MX_TIM3_Init+0x94>)
 8001068:	f003 ff0c 	bl	8004e84 <HAL_TIM_ConfigClockSource>
 800106c:	4603      	mov	r3, r0
 800106e:	2b00      	cmp	r3, #0
 8001070:	d001      	beq.n	8001076 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8001072:	f000 f8d9 	bl	8001228 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001076:	2300      	movs	r3, #0
 8001078:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800107a:	2300      	movs	r3, #0
 800107c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800107e:	463b      	mov	r3, r7
 8001080:	4619      	mov	r1, r3
 8001082:	4806      	ldr	r0, [pc, #24]	; (800109c <MX_TIM3_Init+0x94>)
 8001084:	f004 fa08 	bl	8005498 <HAL_TIMEx_MasterConfigSynchronization>
 8001088:	4603      	mov	r3, r0
 800108a:	2b00      	cmp	r3, #0
 800108c:	d001      	beq.n	8001092 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 800108e:	f000 f8cb 	bl	8001228 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001092:	bf00      	nop
 8001094:	3718      	adds	r7, #24
 8001096:	46bd      	mov	sp, r7
 8001098:	bd80      	pop	{r7, pc}
 800109a:	bf00      	nop
 800109c:	20000268 	.word	0x20000268
 80010a0:	40000400 	.word	0x40000400

080010a4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b088      	sub	sp, #32
 80010a8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010aa:	f107 0310 	add.w	r3, r7, #16
 80010ae:	2200      	movs	r2, #0
 80010b0:	601a      	str	r2, [r3, #0]
 80010b2:	605a      	str	r2, [r3, #4]
 80010b4:	609a      	str	r2, [r3, #8]
 80010b6:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80010b8:	4b28      	ldr	r3, [pc, #160]	; (800115c <MX_GPIO_Init+0xb8>)
 80010ba:	699b      	ldr	r3, [r3, #24]
 80010bc:	4a27      	ldr	r2, [pc, #156]	; (800115c <MX_GPIO_Init+0xb8>)
 80010be:	f043 0320 	orr.w	r3, r3, #32
 80010c2:	6193      	str	r3, [r2, #24]
 80010c4:	4b25      	ldr	r3, [pc, #148]	; (800115c <MX_GPIO_Init+0xb8>)
 80010c6:	699b      	ldr	r3, [r3, #24]
 80010c8:	f003 0320 	and.w	r3, r3, #32
 80010cc:	60fb      	str	r3, [r7, #12]
 80010ce:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010d0:	4b22      	ldr	r3, [pc, #136]	; (800115c <MX_GPIO_Init+0xb8>)
 80010d2:	699b      	ldr	r3, [r3, #24]
 80010d4:	4a21      	ldr	r2, [pc, #132]	; (800115c <MX_GPIO_Init+0xb8>)
 80010d6:	f043 0304 	orr.w	r3, r3, #4
 80010da:	6193      	str	r3, [r2, #24]
 80010dc:	4b1f      	ldr	r3, [pc, #124]	; (800115c <MX_GPIO_Init+0xb8>)
 80010de:	699b      	ldr	r3, [r3, #24]
 80010e0:	f003 0304 	and.w	r3, r3, #4
 80010e4:	60bb      	str	r3, [r7, #8]
 80010e6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010e8:	4b1c      	ldr	r3, [pc, #112]	; (800115c <MX_GPIO_Init+0xb8>)
 80010ea:	699b      	ldr	r3, [r3, #24]
 80010ec:	4a1b      	ldr	r2, [pc, #108]	; (800115c <MX_GPIO_Init+0xb8>)
 80010ee:	f043 0308 	orr.w	r3, r3, #8
 80010f2:	6193      	str	r3, [r2, #24]
 80010f4:	4b19      	ldr	r3, [pc, #100]	; (800115c <MX_GPIO_Init+0xb8>)
 80010f6:	699b      	ldr	r3, [r3, #24]
 80010f8:	f003 0308 	and.w	r3, r3, #8
 80010fc:	607b      	str	r3, [r7, #4]
 80010fe:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, CS_ON_Pin|SPI1_MANUAL_CS_Pin|LED_OUT_A0_Pin|LED_IN_A1_Pin
 8001100:	2200      	movs	r2, #0
 8001102:	f240 7112 	movw	r1, #1810	; 0x712
 8001106:	4816      	ldr	r0, [pc, #88]	; (8001160 <MX_GPIO_Init+0xbc>)
 8001108:	f001 f974 	bl	80023f4 <HAL_GPIO_WritePin>
                          |LED_IN_A0_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, STATUS_LED_Pin|STATUS_LED_RED_Pin|PD_A1_Pin|PD_A0_Pin
 800110c:	2200      	movs	r2, #0
 800110e:	f64f 0103 	movw	r1, #63491	; 0xf803
 8001112:	4814      	ldr	r0, [pc, #80]	; (8001164 <MX_GPIO_Init+0xc0>)
 8001114:	f001 f96e 	bl	80023f4 <HAL_GPIO_WritePin>
                          |PD_Gates_A1_Pin|PD_Gates_A0_Pin|LED_OUT_A1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : CS_ON_Pin SPI1_MANUAL_CS_Pin LED_OUT_A0_Pin LED_IN_A1_Pin
                           LED_IN_A0_Pin */
  GPIO_InitStruct.Pin = CS_ON_Pin|SPI1_MANUAL_CS_Pin|LED_OUT_A0_Pin|LED_IN_A1_Pin
 8001118:	f240 7312 	movw	r3, #1810	; 0x712
 800111c:	613b      	str	r3, [r7, #16]
                          |LED_IN_A0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800111e:	2301      	movs	r3, #1
 8001120:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001122:	2300      	movs	r3, #0
 8001124:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001126:	2302      	movs	r3, #2
 8001128:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800112a:	f107 0310 	add.w	r3, r7, #16
 800112e:	4619      	mov	r1, r3
 8001130:	480b      	ldr	r0, [pc, #44]	; (8001160 <MX_GPIO_Init+0xbc>)
 8001132:	f000 ffdb 	bl	80020ec <HAL_GPIO_Init>

  /*Configure GPIO pins : STATUS_LED_Pin STATUS_LED_RED_Pin PD_A1_Pin PD_A0_Pin
                           PD_Gates_A1_Pin PD_Gates_A0_Pin LED_OUT_A1_Pin */
  GPIO_InitStruct.Pin = STATUS_LED_Pin|STATUS_LED_RED_Pin|PD_A1_Pin|PD_A0_Pin
 8001136:	f64f 0303 	movw	r3, #63491	; 0xf803
 800113a:	613b      	str	r3, [r7, #16]
                          |PD_Gates_A1_Pin|PD_Gates_A0_Pin|LED_OUT_A1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800113c:	2301      	movs	r3, #1
 800113e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001140:	2300      	movs	r3, #0
 8001142:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001144:	2302      	movs	r3, #2
 8001146:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001148:	f107 0310 	add.w	r3, r7, #16
 800114c:	4619      	mov	r1, r3
 800114e:	4805      	ldr	r0, [pc, #20]	; (8001164 <MX_GPIO_Init+0xc0>)
 8001150:	f000 ffcc 	bl	80020ec <HAL_GPIO_Init>

}
 8001154:	bf00      	nop
 8001156:	3720      	adds	r7, #32
 8001158:	46bd      	mov	sp, r7
 800115a:	bd80      	pop	{r7, pc}
 800115c:	40021000 	.word	0x40021000
 8001160:	40010800 	.word	0x40010800
 8001164:	40010c00 	.word	0x40010c00

08001168 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001168:	b480      	push	{r7}
 800116a:	b083      	sub	sp, #12
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
	// Update the frame number and go to measure state.
	if(htim->Instance == TIM3)
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	4a0e      	ldr	r2, [pc, #56]	; (80011b0 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8001176:	4293      	cmp	r3, r2
 8001178:	d115      	bne.n	80011a6 <HAL_TIM_PeriodElapsedCallback+0x3e>
	{
		frame_number++;
 800117a:	4b0e      	ldr	r3, [pc, #56]	; (80011b4 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	3301      	adds	r3, #1
 8001180:	4a0c      	ldr	r2, [pc, #48]	; (80011b4 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8001182:	6013      	str	r3, [r2, #0]
		// Blink to status led each time for checking purposes.
		if(frame_number%2 == 0)
 8001184:	4b0b      	ldr	r3, [pc, #44]	; (80011b4 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	f003 0301 	and.w	r3, r3, #1
 800118c:	2b00      	cmp	r3, #0
 800118e:	d103      	bne.n	8001198 <HAL_TIM_PeriodElapsedCallback+0x30>
		{
			GPIOB->BSRR = STATUS_LED_B_HIGH;
 8001190:	4b09      	ldr	r3, [pc, #36]	; (80011b8 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8001192:	2201      	movs	r2, #1
 8001194:	611a      	str	r2, [r3, #16]
 8001196:	e003      	b.n	80011a0 <HAL_TIM_PeriodElapsedCallback+0x38>
		}else
		{
			GPIOB->BSRR = STATUS_LED_B_LOW;
 8001198:	4b07      	ldr	r3, [pc, #28]	; (80011b8 <HAL_TIM_PeriodElapsedCallback+0x50>)
 800119a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800119e:	611a      	str	r2, [r3, #16]
		}
		state = ST_MEASURE;
 80011a0:	4b06      	ldr	r3, [pc, #24]	; (80011bc <HAL_TIM_PeriodElapsedCallback+0x54>)
 80011a2:	2201      	movs	r2, #1
 80011a4:	701a      	strb	r2, [r3, #0]
	}
}
 80011a6:	bf00      	nop
 80011a8:	370c      	adds	r7, #12
 80011aa:	46bd      	mov	sp, r7
 80011ac:	bc80      	pop	{r7}
 80011ae:	4770      	bx	lr
 80011b0:	40000400 	.word	0x40000400
 80011b4:	200002b4 	.word	0x200002b4
 80011b8:	40010c00 	.word	0x40010c00
 80011bc:	200002dc 	.word	0x200002dc

080011c0 <HAL_TIM_IC_CaptureCallback>:


void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80011c0:	b480      	push	{r7}
 80011c2:	b083      	sub	sp, #12
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM2 && htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80011d0:	d11e      	bne.n	8001210 <HAL_TIM_IC_CaptureCallback+0x50>
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	7f1b      	ldrb	r3, [r3, #28]
 80011d6:	2b01      	cmp	r3, #1
 80011d8:	d11a      	bne.n	8001210 <HAL_TIM_IC_CaptureCallback+0x50>
	{
	  crosstalk_fsm_counter++;
 80011da:	4b10      	ldr	r3, [pc, #64]	; (800121c <HAL_TIM_IC_CaptureCallback+0x5c>)
 80011dc:	781b      	ldrb	r3, [r3, #0]
 80011de:	3301      	adds	r3, #1
 80011e0:	b2da      	uxtb	r2, r3
 80011e2:	4b0e      	ldr	r3, [pc, #56]	; (800121c <HAL_TIM_IC_CaptureCallback+0x5c>)
 80011e4:	701a      	strb	r2, [r3, #0]
	  // Select action based on counter value.
	  if(crosstalk_fsm_counter == 1)
 80011e6:	4b0d      	ldr	r3, [pc, #52]	; (800121c <HAL_TIM_IC_CaptureCallback+0x5c>)
 80011e8:	781b      	ldrb	r3, [r3, #0]
 80011ea:	2b01      	cmp	r3, #1
 80011ec:	d102      	bne.n	80011f4 <HAL_TIM_IC_CaptureCallback+0x34>
	  {
		  do_crosstalk_recalculation = 1;
 80011ee:	4b0c      	ldr	r3, [pc, #48]	; (8001220 <HAL_TIM_IC_CaptureCallback+0x60>)
 80011f0:	2201      	movs	r2, #1
 80011f2:	701a      	strb	r2, [r3, #0]
	  }
	  if(crosstalk_fsm_counter == 2)
 80011f4:	4b09      	ldr	r3, [pc, #36]	; (800121c <HAL_TIM_IC_CaptureCallback+0x5c>)
 80011f6:	781b      	ldrb	r3, [r3, #0]
 80011f8:	2b02      	cmp	r3, #2
 80011fa:	d102      	bne.n	8001202 <HAL_TIM_IC_CaptureCallback+0x42>
	  {
		  reset_crosstalk_values = 1;
 80011fc:	4b09      	ldr	r3, [pc, #36]	; (8001224 <HAL_TIM_IC_CaptureCallback+0x64>)
 80011fe:	2201      	movs	r2, #1
 8001200:	701a      	strb	r2, [r3, #0]
	  }
	  // Only increment for [0,1,2].
	  if(crosstalk_fsm_counter >= 2)
 8001202:	4b06      	ldr	r3, [pc, #24]	; (800121c <HAL_TIM_IC_CaptureCallback+0x5c>)
 8001204:	781b      	ldrb	r3, [r3, #0]
 8001206:	2b01      	cmp	r3, #1
 8001208:	d902      	bls.n	8001210 <HAL_TIM_IC_CaptureCallback+0x50>
	  {
		  crosstalk_fsm_counter = 0;
 800120a:	4b04      	ldr	r3, [pc, #16]	; (800121c <HAL_TIM_IC_CaptureCallback+0x5c>)
 800120c:	2200      	movs	r2, #0
 800120e:	701a      	strb	r2, [r3, #0]
	  }
	}
}
 8001210:	bf00      	nop
 8001212:	370c      	adds	r7, #12
 8001214:	46bd      	mov	sp, r7
 8001216:	bc80      	pop	{r7}
 8001218:	4770      	bx	lr
 800121a:	bf00      	nop
 800121c:	200002ba 	.word	0x200002ba
 8001220:	200002b8 	.word	0x200002b8
 8001224:	200002b9 	.word	0x200002b9

08001228 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001228:	b480      	push	{r7}
 800122a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800122c:	b672      	cpsid	i
}
 800122e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001230:	e7fe      	b.n	8001230 <Error_Handler+0x8>
	...

08001234 <measure_sensors>:
 * 								  values in.
 * @param uint8_t num_measurements_per_sensor: number of values each sensor is averaged across.
 * @return uint16_t emitter_current_lsb: The emitter current as a diagnostic.
 */
uint16_t measure_sensors(int16_t* sensor_values_lsb, const uint8_t num_measurements_per_sensor)
{
 8001234:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001238:	b08b      	sub	sp, #44	; 0x2c
 800123a:	af00      	add	r7, sp, #0
 800123c:	6078      	str	r0, [r7, #4]
 800123e:	460b      	mov	r3, r1
 8001240:	70fb      	strb	r3, [r7, #3]
 8001242:	466b      	mov	r3, sp
 8001244:	461e      	mov	r6, r3
	uint32_t measurement_buffer[num_measurements_per_sensor]; //  = {0};
 8001246:	78fb      	ldrb	r3, [r7, #3]
 8001248:	3b01      	subs	r3, #1
 800124a:	613b      	str	r3, [r7, #16]
 800124c:	78fb      	ldrb	r3, [r7, #3]
 800124e:	2200      	movs	r2, #0
 8001250:	4698      	mov	r8, r3
 8001252:	4691      	mov	r9, r2
 8001254:	f04f 0200 	mov.w	r2, #0
 8001258:	f04f 0300 	mov.w	r3, #0
 800125c:	ea4f 1349 	mov.w	r3, r9, lsl #5
 8001260:	ea43 63d8 	orr.w	r3, r3, r8, lsr #27
 8001264:	ea4f 1248 	mov.w	r2, r8, lsl #5
 8001268:	78fb      	ldrb	r3, [r7, #3]
 800126a:	2200      	movs	r2, #0
 800126c:	461c      	mov	r4, r3
 800126e:	4615      	mov	r5, r2
 8001270:	f04f 0200 	mov.w	r2, #0
 8001274:	f04f 0300 	mov.w	r3, #0
 8001278:	016b      	lsls	r3, r5, #5
 800127a:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
 800127e:	0162      	lsls	r2, r4, #5
 8001280:	78fb      	ldrb	r3, [r7, #3]
 8001282:	009b      	lsls	r3, r3, #2
 8001284:	3307      	adds	r3, #7
 8001286:	08db      	lsrs	r3, r3, #3
 8001288:	00db      	lsls	r3, r3, #3
 800128a:	ebad 0d03 	sub.w	sp, sp, r3
 800128e:	466b      	mov	r3, sp
 8001290:	3303      	adds	r3, #3
 8001292:	089b      	lsrs	r3, r3, #2
 8001294:	009b      	lsls	r3, r3, #2
 8001296:	60fb      	str	r3, [r7, #12]
	uint8_t spi_rx_buffer[4] = {0};
 8001298:	2300      	movs	r3, #0
 800129a:	60bb      	str	r3, [r7, #8]
	uint16_t emitter_current_lsb = 0;
 800129c:	2300      	movs	r3, #0
 800129e:	837b      	strh	r3, [r7, #26]

	for(int sensor_index = 0; sensor_index < NUM_SENSORS; sensor_index++)
 80012a0:	2300      	movs	r3, #0
 80012a2:	61fb      	str	r3, [r7, #28]
 80012a4:	e049      	b.n	800133a <measure_sensors+0x106>
	{
	  // Select sensor (vcsel + PD).
	  GPIOA->BSRR = S_row_col_GPIOA_BSRR[sensor_index];
 80012a6:	4a2a      	ldr	r2, [pc, #168]	; (8001350 <measure_sensors+0x11c>)
 80012a8:	492a      	ldr	r1, [pc, #168]	; (8001354 <measure_sensors+0x120>)
 80012aa:	69fb      	ldr	r3, [r7, #28]
 80012ac:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80012b0:	6113      	str	r3, [r2, #16]
	  GPIOB->BSRR = S_row_col_GPIOB_BSRR[sensor_index];
 80012b2:	4a29      	ldr	r2, [pc, #164]	; (8001358 <measure_sensors+0x124>)
 80012b4:	4929      	ldr	r1, [pc, #164]	; (800135c <measure_sensors+0x128>)
 80012b6:	69fb      	ldr	r3, [r7, #28]
 80012b8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80012bc:	6113      	str	r3, [r2, #16]

	  // Collect measurements.
	  for(int meas_index = 0; meas_index < num_measurements_per_sensor; meas_index++)
 80012be:	2300      	movs	r3, #0
 80012c0:	623b      	str	r3, [r7, #32]
 80012c2:	e00d      	b.n	80012e0 <measure_sensors+0xac>
	  {
		  measurement_buffer[meas_index] = get_ads8671_value_ext_lsb(spi_rx_buffer);
 80012c4:	f107 0308 	add.w	r3, r7, #8
 80012c8:	4618      	mov	r0, r3
 80012ca:	f7ff fa0b 	bl	80006e4 <get_ads8671_value_ext_lsb>
 80012ce:	4603      	mov	r3, r0
 80012d0:	4619      	mov	r1, r3
 80012d2:	68fb      	ldr	r3, [r7, #12]
 80012d4:	6a3a      	ldr	r2, [r7, #32]
 80012d6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	  for(int meas_index = 0; meas_index < num_measurements_per_sensor; meas_index++)
 80012da:	6a3b      	ldr	r3, [r7, #32]
 80012dc:	3301      	adds	r3, #1
 80012de:	623b      	str	r3, [r7, #32]
 80012e0:	78fb      	ldrb	r3, [r7, #3]
 80012e2:	6a3a      	ldr	r2, [r7, #32]
 80012e4:	429a      	cmp	r2, r3
 80012e6:	dbed      	blt.n	80012c4 <measure_sensors+0x90>
	  }

	  // Average across measurements with first index offset'.
	  uint32_t mean_sensor_value_lsb = 0;
 80012e8:	2300      	movs	r3, #0
 80012ea:	627b      	str	r3, [r7, #36]	; 0x24
	  for(int meas_index = MEASUREMENT_OFFSET_INDEX; meas_index < num_measurements_per_sensor; meas_index++)
 80012ec:	2314      	movs	r3, #20
 80012ee:	617b      	str	r3, [r7, #20]
 80012f0:	e009      	b.n	8001306 <measure_sensors+0xd2>
	  {
		  mean_sensor_value_lsb += measurement_buffer[meas_index];
 80012f2:	68fb      	ldr	r3, [r7, #12]
 80012f4:	697a      	ldr	r2, [r7, #20]
 80012f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80012fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80012fc:	4413      	add	r3, r2
 80012fe:	627b      	str	r3, [r7, #36]	; 0x24
	  for(int meas_index = MEASUREMENT_OFFSET_INDEX; meas_index < num_measurements_per_sensor; meas_index++)
 8001300:	697b      	ldr	r3, [r7, #20]
 8001302:	3301      	adds	r3, #1
 8001304:	617b      	str	r3, [r7, #20]
 8001306:	78fb      	ldrb	r3, [r7, #3]
 8001308:	697a      	ldr	r2, [r7, #20]
 800130a:	429a      	cmp	r2, r3
 800130c:	dbf1      	blt.n	80012f2 <measure_sensors+0xbe>
	  }

	  sensor_values_lsb[sensor_index] = (int16_t)(mean_sensor_value_lsb/(num_measurements_per_sensor-MEASUREMENT_OFFSET_INDEX));
 800130e:	78fb      	ldrb	r3, [r7, #3]
 8001310:	3b14      	subs	r3, #20
 8001312:	461a      	mov	r2, r3
 8001314:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001316:	fbb3 f1f2 	udiv	r1, r3, r2
 800131a:	69fb      	ldr	r3, [r7, #28]
 800131c:	005b      	lsls	r3, r3, #1
 800131e:	687a      	ldr	r2, [r7, #4]
 8001320:	4413      	add	r3, r2
 8001322:	b20a      	sxth	r2, r1
 8001324:	801a      	strh	r2, [r3, #0]

	  if(sensor_index == 0) // Done because the single optode board has only sensor S11 populated.
 8001326:	69fb      	ldr	r3, [r7, #28]
 8001328:	2b00      	cmp	r3, #0
 800132a:	d103      	bne.n	8001334 <measure_sensors+0x100>
	  {
		  emitter_current_lsb = get_emitter_current_lsb();
 800132c:	f7ff fa40 	bl	80007b0 <get_emitter_current_lsb>
 8001330:	4603      	mov	r3, r0
 8001332:	837b      	strh	r3, [r7, #26]
	for(int sensor_index = 0; sensor_index < NUM_SENSORS; sensor_index++)
 8001334:	69fb      	ldr	r3, [r7, #28]
 8001336:	3301      	adds	r3, #1
 8001338:	61fb      	str	r3, [r7, #28]
 800133a:	69fb      	ldr	r3, [r7, #28]
 800133c:	2b0e      	cmp	r3, #14
 800133e:	ddb2      	ble.n	80012a6 <measure_sensors+0x72>
	  }
	}

	return emitter_current_lsb;
 8001340:	8b7b      	ldrh	r3, [r7, #26]
 8001342:	46b5      	mov	sp, r6
}
 8001344:	4618      	mov	r0, r3
 8001346:	372c      	adds	r7, #44	; 0x2c
 8001348:	46bd      	mov	sp, r7
 800134a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800134e:	bf00      	nop
 8001350:	40010800 	.word	0x40010800
 8001354:	0800a1f0 	.word	0x0800a1f0
 8001358:	40010c00 	.word	0x40010c00
 800135c:	0800a22c 	.word	0x0800a22c

08001360 <check_sensor_currents>:
 * which exceeds it.
 * @param: None.
 * @return: failing sensor index or -1 of all sensors are within current limits.
 */
int check_sensor_currents()
{
 8001360:	b580      	push	{r7, lr}
 8001362:	b084      	sub	sp, #16
 8001364:	af00      	add	r7, sp, #0
	int failing_sensor_index = -1;
 8001366:	f04f 33ff 	mov.w	r3, #4294967295
 800136a:	60fb      	str	r3, [r7, #12]

	GPIOA->BSRR = CURRENT_SOURCE_A_ON;
 800136c:	4b1a      	ldr	r3, [pc, #104]	; (80013d8 <check_sensor_currents+0x78>)
 800136e:	2202      	movs	r2, #2
 8001370:	611a      	str	r2, [r3, #16]
	HAL_Delay(10); // Let current source settle.
 8001372:	200a      	movs	r0, #10
 8001374:	f000 fa98 	bl	80018a8 <HAL_Delay>

	for(int sensor_index = 0; sensor_index < NUM_SENSORS; sensor_index++)
 8001378:	2300      	movs	r3, #0
 800137a:	60bb      	str	r3, [r7, #8]
 800137c:	e01f      	b.n	80013be <check_sensor_currents+0x5e>
	{
	  // Read the current sense adc1.
	  float current_mA = get_emitter_current_mA();
 800137e:	f7ff f9ef 	bl	8000760 <get_emitter_current_mA>
 8001382:	6078      	str	r0, [r7, #4]
	  if(current_mA > MAX_CURRENT_mA)
 8001384:	f04f 4182 	mov.w	r1, #1090519040	; 0x41000000
 8001388:	6878      	ldr	r0, [r7, #4]
 800138a:	f7ff f90d 	bl	80005a8 <__aeabi_fcmpgt>
 800138e:	4603      	mov	r3, r0
 8001390:	2b00      	cmp	r3, #0
 8001392:	d002      	beq.n	800139a <check_sensor_currents+0x3a>
	  {
		  failing_sensor_index = sensor_index;
 8001394:	68bb      	ldr	r3, [r7, #8]
 8001396:	60fb      	str	r3, [r7, #12]
		  break;
 8001398:	e014      	b.n	80013c4 <check_sensor_currents+0x64>
		  // TODO: Check: writing to BSRR register with the current sensor
		  // gpio config in [15:0] and the previous sensor in [31:16]
		  // resets only the old sensor bits and sets the new ones (does
		  // not alter the current source or any other bits that are also
		  // part of the GPIOA/Bs.
		  GPIOA->BSRR = S_row_col_GPIOA_BSRR[sensor_index]; // TODO: Put in function
 800139a:	4a0f      	ldr	r2, [pc, #60]	; (80013d8 <check_sensor_currents+0x78>)
 800139c:	490f      	ldr	r1, [pc, #60]	; (80013dc <check_sensor_currents+0x7c>)
 800139e:	68bb      	ldr	r3, [r7, #8]
 80013a0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80013a4:	6113      	str	r3, [r2, #16]
		  GPIOB->BSRR = S_row_col_GPIOB_BSRR[sensor_index];
 80013a6:	4a0e      	ldr	r2, [pc, #56]	; (80013e0 <check_sensor_currents+0x80>)
 80013a8:	490e      	ldr	r1, [pc, #56]	; (80013e4 <check_sensor_currents+0x84>)
 80013aa:	68bb      	ldr	r3, [r7, #8]
 80013ac:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80013b0:	6113      	str	r3, [r2, #16]
	  }
	  HAL_Delay(100); // Delay looping for visual inspection in the test inits.
 80013b2:	2064      	movs	r0, #100	; 0x64
 80013b4:	f000 fa78 	bl	80018a8 <HAL_Delay>
	for(int sensor_index = 0; sensor_index < NUM_SENSORS; sensor_index++)
 80013b8:	68bb      	ldr	r3, [r7, #8]
 80013ba:	3301      	adds	r3, #1
 80013bc:	60bb      	str	r3, [r7, #8]
 80013be:	68bb      	ldr	r3, [r7, #8]
 80013c0:	2b0e      	cmp	r3, #14
 80013c2:	dddc      	ble.n	800137e <check_sensor_currents+0x1e>
	}

	GPIOA->BSRR = CURRENT_SOURCE_A_OFF;
 80013c4:	4b04      	ldr	r3, [pc, #16]	; (80013d8 <check_sensor_currents+0x78>)
 80013c6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80013ca:	611a      	str	r2, [r3, #16]

	return failing_sensor_index;
 80013cc:	68fb      	ldr	r3, [r7, #12]
}
 80013ce:	4618      	mov	r0, r3
 80013d0:	3710      	adds	r7, #16
 80013d2:	46bd      	mov	sp, r7
 80013d4:	bd80      	pop	{r7, pc}
 80013d6:	bf00      	nop
 80013d8:	40010800 	.word	0x40010800
 80013dc:	0800a1f0 	.word	0x0800a1f0
 80013e0:	40010c00 	.word	0x40010c00
 80013e4:	0800a22c 	.word	0x0800a22c

080013e8 <calculate_crosstalk>:
 * (i.e., at infinite distance).
 * @param crosstalk_values_lsb: array to store the cross-talk values in LSBs.
 * @return None.
 */
void calculate_crosstalk(int16_t* crosstalk_values_lsb)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b094      	sub	sp, #80	; 0x50
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
	int16_t offset_values_lsb[NUM_SENSORS] = {0};
 80013f0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80013f4:	221e      	movs	r2, #30
 80013f6:	2100      	movs	r1, #0
 80013f8:	4618      	mov	r0, r3
 80013fa:	f008 feb9 	bl	800a170 <memset>
	int16_t sensor_values_lsb[NUM_SENSORS] = {0};
 80013fe:	f107 030c 	add.w	r3, r7, #12
 8001402:	221e      	movs	r2, #30
 8001404:	2100      	movs	r1, #0
 8001406:	4618      	mov	r0, r3
 8001408:	f008 feb2 	bl	800a170 <memset>

	// Measure PD values when the current source is off.
	measure_sensors(offset_values_lsb, 128);
 800140c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001410:	2180      	movs	r1, #128	; 0x80
 8001412:	4618      	mov	r0, r3
 8001414:	f7ff ff0e 	bl	8001234 <measure_sensors>

	// Measure PD values when the current source is on with no object in front.
	GPIOA->BSRR = CURRENT_SOURCE_A_ON;
 8001418:	4b18      	ldr	r3, [pc, #96]	; (800147c <calculate_crosstalk+0x94>)
 800141a:	2202      	movs	r2, #2
 800141c:	611a      	str	r2, [r3, #16]
	measure_sensors(sensor_values_lsb, 128);
 800141e:	f107 030c 	add.w	r3, r7, #12
 8001422:	2180      	movs	r1, #128	; 0x80
 8001424:	4618      	mov	r0, r3
 8001426:	f7ff ff05 	bl	8001234 <measure_sensors>
	GPIOA->BSRR = CURRENT_SOURCE_A_OFF;
 800142a:	4b14      	ldr	r3, [pc, #80]	; (800147c <calculate_crosstalk+0x94>)
 800142c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001430:	611a      	str	r2, [r3, #16]

	// Subtract the dc offset from the sensor values to get the cross-talk.
	for(int sensor_index = 0; sensor_index < NUM_SENSORS; sensor_index++)
 8001432:	2300      	movs	r3, #0
 8001434:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001436:	e018      	b.n	800146a <calculate_crosstalk+0x82>
	{
		crosstalk_values_lsb[sensor_index] = sensor_values_lsb[sensor_index]- offset_values_lsb[sensor_index];
 8001438:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800143a:	005b      	lsls	r3, r3, #1
 800143c:	3350      	adds	r3, #80	; 0x50
 800143e:	443b      	add	r3, r7
 8001440:	f933 3c44 	ldrsh.w	r3, [r3, #-68]
 8001444:	b29a      	uxth	r2, r3
 8001446:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001448:	005b      	lsls	r3, r3, #1
 800144a:	3350      	adds	r3, #80	; 0x50
 800144c:	443b      	add	r3, r7
 800144e:	f933 3c24 	ldrsh.w	r3, [r3, #-36]
 8001452:	b29b      	uxth	r3, r3
 8001454:	1ad3      	subs	r3, r2, r3
 8001456:	b299      	uxth	r1, r3
 8001458:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800145a:	005b      	lsls	r3, r3, #1
 800145c:	687a      	ldr	r2, [r7, #4]
 800145e:	4413      	add	r3, r2
 8001460:	b20a      	sxth	r2, r1
 8001462:	801a      	strh	r2, [r3, #0]
	for(int sensor_index = 0; sensor_index < NUM_SENSORS; sensor_index++)
 8001464:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001466:	3301      	adds	r3, #1
 8001468:	64fb      	str	r3, [r7, #76]	; 0x4c
 800146a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800146c:	2b0e      	cmp	r3, #14
 800146e:	dde3      	ble.n	8001438 <calculate_crosstalk+0x50>
	}
}
 8001470:	bf00      	nop
 8001472:	bf00      	nop
 8001474:	3750      	adds	r7, #80	; 0x50
 8001476:	46bd      	mov	sp, r7
 8001478:	bd80      	pop	{r7, pc}
 800147a:	bf00      	nop
 800147c:	40010800 	.word	0x40010800

08001480 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001480:	b480      	push	{r7}
 8001482:	b085      	sub	sp, #20
 8001484:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001486:	4b15      	ldr	r3, [pc, #84]	; (80014dc <HAL_MspInit+0x5c>)
 8001488:	699b      	ldr	r3, [r3, #24]
 800148a:	4a14      	ldr	r2, [pc, #80]	; (80014dc <HAL_MspInit+0x5c>)
 800148c:	f043 0301 	orr.w	r3, r3, #1
 8001490:	6193      	str	r3, [r2, #24]
 8001492:	4b12      	ldr	r3, [pc, #72]	; (80014dc <HAL_MspInit+0x5c>)
 8001494:	699b      	ldr	r3, [r3, #24]
 8001496:	f003 0301 	and.w	r3, r3, #1
 800149a:	60bb      	str	r3, [r7, #8]
 800149c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800149e:	4b0f      	ldr	r3, [pc, #60]	; (80014dc <HAL_MspInit+0x5c>)
 80014a0:	69db      	ldr	r3, [r3, #28]
 80014a2:	4a0e      	ldr	r2, [pc, #56]	; (80014dc <HAL_MspInit+0x5c>)
 80014a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014a8:	61d3      	str	r3, [r2, #28]
 80014aa:	4b0c      	ldr	r3, [pc, #48]	; (80014dc <HAL_MspInit+0x5c>)
 80014ac:	69db      	ldr	r3, [r3, #28]
 80014ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014b2:	607b      	str	r3, [r7, #4]
 80014b4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80014b6:	4b0a      	ldr	r3, [pc, #40]	; (80014e0 <HAL_MspInit+0x60>)
 80014b8:	685b      	ldr	r3, [r3, #4]
 80014ba:	60fb      	str	r3, [r7, #12]
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80014c2:	60fb      	str	r3, [r7, #12]
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80014ca:	60fb      	str	r3, [r7, #12]
 80014cc:	4a04      	ldr	r2, [pc, #16]	; (80014e0 <HAL_MspInit+0x60>)
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014d2:	bf00      	nop
 80014d4:	3714      	adds	r7, #20
 80014d6:	46bd      	mov	sp, r7
 80014d8:	bc80      	pop	{r7}
 80014da:	4770      	bx	lr
 80014dc:	40021000 	.word	0x40021000
 80014e0:	40010000 	.word	0x40010000

080014e4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b088      	sub	sp, #32
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014ec:	f107 0310 	add.w	r3, r7, #16
 80014f0:	2200      	movs	r2, #0
 80014f2:	601a      	str	r2, [r3, #0]
 80014f4:	605a      	str	r2, [r3, #4]
 80014f6:	609a      	str	r2, [r3, #8]
 80014f8:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	4a18      	ldr	r2, [pc, #96]	; (8001560 <HAL_ADC_MspInit+0x7c>)
 8001500:	4293      	cmp	r3, r2
 8001502:	d129      	bne.n	8001558 <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001504:	4b17      	ldr	r3, [pc, #92]	; (8001564 <HAL_ADC_MspInit+0x80>)
 8001506:	699b      	ldr	r3, [r3, #24]
 8001508:	4a16      	ldr	r2, [pc, #88]	; (8001564 <HAL_ADC_MspInit+0x80>)
 800150a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800150e:	6193      	str	r3, [r2, #24]
 8001510:	4b14      	ldr	r3, [pc, #80]	; (8001564 <HAL_ADC_MspInit+0x80>)
 8001512:	699b      	ldr	r3, [r3, #24]
 8001514:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001518:	60fb      	str	r3, [r7, #12]
 800151a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800151c:	4b11      	ldr	r3, [pc, #68]	; (8001564 <HAL_ADC_MspInit+0x80>)
 800151e:	699b      	ldr	r3, [r3, #24]
 8001520:	4a10      	ldr	r2, [pc, #64]	; (8001564 <HAL_ADC_MspInit+0x80>)
 8001522:	f043 0304 	orr.w	r3, r3, #4
 8001526:	6193      	str	r3, [r2, #24]
 8001528:	4b0e      	ldr	r3, [pc, #56]	; (8001564 <HAL_ADC_MspInit+0x80>)
 800152a:	699b      	ldr	r3, [r3, #24]
 800152c:	f003 0304 	and.w	r3, r3, #4
 8001530:	60bb      	str	r3, [r7, #8]
 8001532:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001534:	2301      	movs	r3, #1
 8001536:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001538:	2303      	movs	r3, #3
 800153a:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800153c:	f107 0310 	add.w	r3, r7, #16
 8001540:	4619      	mov	r1, r3
 8001542:	4809      	ldr	r0, [pc, #36]	; (8001568 <HAL_ADC_MspInit+0x84>)
 8001544:	f000 fdd2 	bl	80020ec <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8001548:	2200      	movs	r2, #0
 800154a:	2100      	movs	r1, #0
 800154c:	2012      	movs	r0, #18
 800154e:	f000 fd96 	bl	800207e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8001552:	2012      	movs	r0, #18
 8001554:	f000 fdaf 	bl	80020b6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001558:	bf00      	nop
 800155a:	3720      	adds	r7, #32
 800155c:	46bd      	mov	sp, r7
 800155e:	bd80      	pop	{r7, pc}
 8001560:	40012400 	.word	0x40012400
 8001564:	40021000 	.word	0x40021000
 8001568:	40010800 	.word	0x40010800

0800156c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b088      	sub	sp, #32
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001574:	f107 0310 	add.w	r3, r7, #16
 8001578:	2200      	movs	r2, #0
 800157a:	601a      	str	r2, [r3, #0]
 800157c:	605a      	str	r2, [r3, #4]
 800157e:	609a      	str	r2, [r3, #8]
 8001580:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	4a1b      	ldr	r2, [pc, #108]	; (80015f4 <HAL_SPI_MspInit+0x88>)
 8001588:	4293      	cmp	r3, r2
 800158a:	d12f      	bne.n	80015ec <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800158c:	4b1a      	ldr	r3, [pc, #104]	; (80015f8 <HAL_SPI_MspInit+0x8c>)
 800158e:	699b      	ldr	r3, [r3, #24]
 8001590:	4a19      	ldr	r2, [pc, #100]	; (80015f8 <HAL_SPI_MspInit+0x8c>)
 8001592:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001596:	6193      	str	r3, [r2, #24]
 8001598:	4b17      	ldr	r3, [pc, #92]	; (80015f8 <HAL_SPI_MspInit+0x8c>)
 800159a:	699b      	ldr	r3, [r3, #24]
 800159c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80015a0:	60fb      	str	r3, [r7, #12]
 80015a2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015a4:	4b14      	ldr	r3, [pc, #80]	; (80015f8 <HAL_SPI_MspInit+0x8c>)
 80015a6:	699b      	ldr	r3, [r3, #24]
 80015a8:	4a13      	ldr	r2, [pc, #76]	; (80015f8 <HAL_SPI_MspInit+0x8c>)
 80015aa:	f043 0304 	orr.w	r3, r3, #4
 80015ae:	6193      	str	r3, [r2, #24]
 80015b0:	4b11      	ldr	r3, [pc, #68]	; (80015f8 <HAL_SPI_MspInit+0x8c>)
 80015b2:	699b      	ldr	r3, [r3, #24]
 80015b4:	f003 0304 	and.w	r3, r3, #4
 80015b8:	60bb      	str	r3, [r7, #8]
 80015ba:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80015bc:	23a0      	movs	r3, #160	; 0xa0
 80015be:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015c0:	2302      	movs	r3, #2
 80015c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80015c4:	2303      	movs	r3, #3
 80015c6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015c8:	f107 0310 	add.w	r3, r7, #16
 80015cc:	4619      	mov	r1, r3
 80015ce:	480b      	ldr	r0, [pc, #44]	; (80015fc <HAL_SPI_MspInit+0x90>)
 80015d0:	f000 fd8c 	bl	80020ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80015d4:	2340      	movs	r3, #64	; 0x40
 80015d6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015d8:	2300      	movs	r3, #0
 80015da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015dc:	2300      	movs	r3, #0
 80015de:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015e0:	f107 0310 	add.w	r3, r7, #16
 80015e4:	4619      	mov	r1, r3
 80015e6:	4805      	ldr	r0, [pc, #20]	; (80015fc <HAL_SPI_MspInit+0x90>)
 80015e8:	f000 fd80 	bl	80020ec <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80015ec:	bf00      	nop
 80015ee:	3720      	adds	r7, #32
 80015f0:	46bd      	mov	sp, r7
 80015f2:	bd80      	pop	{r7, pc}
 80015f4:	40013000 	.word	0x40013000
 80015f8:	40021000 	.word	0x40021000
 80015fc:	40010800 	.word	0x40010800

08001600 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	b08a      	sub	sp, #40	; 0x28
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001608:	f107 0314 	add.w	r3, r7, #20
 800160c:	2200      	movs	r2, #0
 800160e:	601a      	str	r2, [r3, #0]
 8001610:	605a      	str	r2, [r3, #4]
 8001612:	609a      	str	r2, [r3, #8]
 8001614:	60da      	str	r2, [r3, #12]
  if(htim_base->Instance==TIM2)
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800161e:	d13f      	bne.n	80016a0 <HAL_TIM_Base_MspInit+0xa0>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001620:	4b2e      	ldr	r3, [pc, #184]	; (80016dc <HAL_TIM_Base_MspInit+0xdc>)
 8001622:	69db      	ldr	r3, [r3, #28]
 8001624:	4a2d      	ldr	r2, [pc, #180]	; (80016dc <HAL_TIM_Base_MspInit+0xdc>)
 8001626:	f043 0301 	orr.w	r3, r3, #1
 800162a:	61d3      	str	r3, [r2, #28]
 800162c:	4b2b      	ldr	r3, [pc, #172]	; (80016dc <HAL_TIM_Base_MspInit+0xdc>)
 800162e:	69db      	ldr	r3, [r3, #28]
 8001630:	f003 0301 	and.w	r3, r3, #1
 8001634:	613b      	str	r3, [r7, #16]
 8001636:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001638:	4b28      	ldr	r3, [pc, #160]	; (80016dc <HAL_TIM_Base_MspInit+0xdc>)
 800163a:	699b      	ldr	r3, [r3, #24]
 800163c:	4a27      	ldr	r2, [pc, #156]	; (80016dc <HAL_TIM_Base_MspInit+0xdc>)
 800163e:	f043 0304 	orr.w	r3, r3, #4
 8001642:	6193      	str	r3, [r2, #24]
 8001644:	4b25      	ldr	r3, [pc, #148]	; (80016dc <HAL_TIM_Base_MspInit+0xdc>)
 8001646:	699b      	ldr	r3, [r3, #24]
 8001648:	f003 0304 	and.w	r3, r3, #4
 800164c:	60fb      	str	r3, [r7, #12]
 800164e:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA3     ------> TIM2_CH4
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_15;
 8001650:	f248 0308 	movw	r3, #32776	; 0x8008
 8001654:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001656:	2300      	movs	r3, #0
 8001658:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800165a:	2300      	movs	r3, #0
 800165c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800165e:	f107 0314 	add.w	r3, r7, #20
 8001662:	4619      	mov	r1, r3
 8001664:	481e      	ldr	r0, [pc, #120]	; (80016e0 <HAL_TIM_Base_MspInit+0xe0>)
 8001666:	f000 fd41 	bl	80020ec <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM2_PARTIAL_1();
 800166a:	4b1e      	ldr	r3, [pc, #120]	; (80016e4 <HAL_TIM_Base_MspInit+0xe4>)
 800166c:	685b      	ldr	r3, [r3, #4]
 800166e:	627b      	str	r3, [r7, #36]	; 0x24
 8001670:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001672:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001676:	627b      	str	r3, [r7, #36]	; 0x24
 8001678:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800167a:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 800167e:	627b      	str	r3, [r7, #36]	; 0x24
 8001680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001682:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001686:	627b      	str	r3, [r7, #36]	; 0x24
 8001688:	4a16      	ldr	r2, [pc, #88]	; (80016e4 <HAL_TIM_Base_MspInit+0xe4>)
 800168a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800168c:	6053      	str	r3, [r2, #4]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800168e:	2200      	movs	r2, #0
 8001690:	2100      	movs	r1, #0
 8001692:	201c      	movs	r0, #28
 8001694:	f000 fcf3 	bl	800207e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001698:	201c      	movs	r0, #28
 800169a:	f000 fd0c 	bl	80020b6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800169e:	e018      	b.n	80016d2 <HAL_TIM_Base_MspInit+0xd2>
  else if(htim_base->Instance==TIM3)
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	4a10      	ldr	r2, [pc, #64]	; (80016e8 <HAL_TIM_Base_MspInit+0xe8>)
 80016a6:	4293      	cmp	r3, r2
 80016a8:	d113      	bne.n	80016d2 <HAL_TIM_Base_MspInit+0xd2>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80016aa:	4b0c      	ldr	r3, [pc, #48]	; (80016dc <HAL_TIM_Base_MspInit+0xdc>)
 80016ac:	69db      	ldr	r3, [r3, #28]
 80016ae:	4a0b      	ldr	r2, [pc, #44]	; (80016dc <HAL_TIM_Base_MspInit+0xdc>)
 80016b0:	f043 0302 	orr.w	r3, r3, #2
 80016b4:	61d3      	str	r3, [r2, #28]
 80016b6:	4b09      	ldr	r3, [pc, #36]	; (80016dc <HAL_TIM_Base_MspInit+0xdc>)
 80016b8:	69db      	ldr	r3, [r3, #28]
 80016ba:	f003 0302 	and.w	r3, r3, #2
 80016be:	60bb      	str	r3, [r7, #8]
 80016c0:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80016c2:	2200      	movs	r2, #0
 80016c4:	2100      	movs	r1, #0
 80016c6:	201d      	movs	r0, #29
 80016c8:	f000 fcd9 	bl	800207e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80016cc:	201d      	movs	r0, #29
 80016ce:	f000 fcf2 	bl	80020b6 <HAL_NVIC_EnableIRQ>
}
 80016d2:	bf00      	nop
 80016d4:	3728      	adds	r7, #40	; 0x28
 80016d6:	46bd      	mov	sp, r7
 80016d8:	bd80      	pop	{r7, pc}
 80016da:	bf00      	nop
 80016dc:	40021000 	.word	0x40021000
 80016e0:	40010800 	.word	0x40010800
 80016e4:	40010000 	.word	0x40010000
 80016e8:	40000400 	.word	0x40000400

080016ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80016ec:	b480      	push	{r7}
 80016ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80016f0:	e7fe      	b.n	80016f0 <NMI_Handler+0x4>

080016f2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80016f2:	b480      	push	{r7}
 80016f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80016f6:	e7fe      	b.n	80016f6 <HardFault_Handler+0x4>

080016f8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80016f8:	b480      	push	{r7}
 80016fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80016fc:	e7fe      	b.n	80016fc <MemManage_Handler+0x4>

080016fe <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80016fe:	b480      	push	{r7}
 8001700:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001702:	e7fe      	b.n	8001702 <BusFault_Handler+0x4>

08001704 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001704:	b480      	push	{r7}
 8001706:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001708:	e7fe      	b.n	8001708 <UsageFault_Handler+0x4>

0800170a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800170a:	b480      	push	{r7}
 800170c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800170e:	bf00      	nop
 8001710:	46bd      	mov	sp, r7
 8001712:	bc80      	pop	{r7}
 8001714:	4770      	bx	lr

08001716 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001716:	b480      	push	{r7}
 8001718:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800171a:	bf00      	nop
 800171c:	46bd      	mov	sp, r7
 800171e:	bc80      	pop	{r7}
 8001720:	4770      	bx	lr

08001722 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001722:	b480      	push	{r7}
 8001724:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001726:	bf00      	nop
 8001728:	46bd      	mov	sp, r7
 800172a:	bc80      	pop	{r7}
 800172c:	4770      	bx	lr

0800172e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800172e:	b580      	push	{r7, lr}
 8001730:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001732:	f000 f89d 	bl	8001870 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001736:	bf00      	nop
 8001738:	bd80      	pop	{r7, pc}
	...

0800173c <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001740:	4802      	ldr	r0, [pc, #8]	; (800174c <ADC1_2_IRQHandler+0x10>)
 8001742:	f000 f9ad 	bl	8001aa0 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8001746:	bf00      	nop
 8001748:	bd80      	pop	{r7, pc}
 800174a:	bf00      	nop
 800174c:	20000198 	.word	0x20000198

08001750 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8001754:	4802      	ldr	r0, [pc, #8]	; (8001760 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8001756:	f000 ff96 	bl	8002686 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 800175a:	bf00      	nop
 800175c:	bd80      	pop	{r7, pc}
 800175e:	bf00      	nop
 8001760:	20000f7c 	.word	0x20000f7c

08001764 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001768:	4802      	ldr	r0, [pc, #8]	; (8001774 <TIM2_IRQHandler+0x10>)
 800176a:	f003 f9ef 	bl	8004b4c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800176e:	bf00      	nop
 8001770:	bd80      	pop	{r7, pc}
 8001772:	bf00      	nop
 8001774:	20000220 	.word	0x20000220

08001778 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800177c:	4802      	ldr	r0, [pc, #8]	; (8001788 <TIM3_IRQHandler+0x10>)
 800177e:	f003 f9e5 	bl	8004b4c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001782:	bf00      	nop
 8001784:	bd80      	pop	{r7, pc}
 8001786:	bf00      	nop
 8001788:	20000268 	.word	0x20000268

0800178c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800178c:	b480      	push	{r7}
 800178e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001790:	bf00      	nop
 8001792:	46bd      	mov	sp, r7
 8001794:	bc80      	pop	{r7}
 8001796:	4770      	bx	lr

08001798 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001798:	480c      	ldr	r0, [pc, #48]	; (80017cc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800179a:	490d      	ldr	r1, [pc, #52]	; (80017d0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800179c:	4a0d      	ldr	r2, [pc, #52]	; (80017d4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800179e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80017a0:	e002      	b.n	80017a8 <LoopCopyDataInit>

080017a2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80017a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80017a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80017a6:	3304      	adds	r3, #4

080017a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80017a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80017aa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80017ac:	d3f9      	bcc.n	80017a2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80017ae:	4a0a      	ldr	r2, [pc, #40]	; (80017d8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80017b0:	4c0a      	ldr	r4, [pc, #40]	; (80017dc <LoopFillZerobss+0x22>)
  movs r3, #0
 80017b2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80017b4:	e001      	b.n	80017ba <LoopFillZerobss>

080017b6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80017b6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80017b8:	3204      	adds	r2, #4

080017ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80017ba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80017bc:	d3fb      	bcc.n	80017b6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80017be:	f7ff ffe5 	bl	800178c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80017c2:	f008 fcb1 	bl	800a128 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80017c6:	f7ff f84d 	bl	8000864 <main>
  bx lr
 80017ca:	4770      	bx	lr
  ldr r0, =_sdata
 80017cc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80017d0:	2000017c 	.word	0x2000017c
  ldr r2, =_sidata
 80017d4:	0800a280 	.word	0x0800a280
  ldr r2, =_sbss
 80017d8:	2000017c 	.word	0x2000017c
  ldr r4, =_ebss
 80017dc:	20001488 	.word	0x20001488

080017e0 <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80017e0:	e7fe      	b.n	80017e0 <CAN1_RX1_IRQHandler>
	...

080017e4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80017e8:	4b08      	ldr	r3, [pc, #32]	; (800180c <HAL_Init+0x28>)
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	4a07      	ldr	r2, [pc, #28]	; (800180c <HAL_Init+0x28>)
 80017ee:	f043 0310 	orr.w	r3, r3, #16
 80017f2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80017f4:	2003      	movs	r0, #3
 80017f6:	f000 fc37 	bl	8002068 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80017fa:	2000      	movs	r0, #0
 80017fc:	f000 f808 	bl	8001810 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001800:	f7ff fe3e 	bl	8001480 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001804:	2300      	movs	r3, #0
}
 8001806:	4618      	mov	r0, r3
 8001808:	bd80      	pop	{r7, pc}
 800180a:	bf00      	nop
 800180c:	40022000 	.word	0x40022000

08001810 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	b082      	sub	sp, #8
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001818:	4b12      	ldr	r3, [pc, #72]	; (8001864 <HAL_InitTick+0x54>)
 800181a:	681a      	ldr	r2, [r3, #0]
 800181c:	4b12      	ldr	r3, [pc, #72]	; (8001868 <HAL_InitTick+0x58>)
 800181e:	781b      	ldrb	r3, [r3, #0]
 8001820:	4619      	mov	r1, r3
 8001822:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001826:	fbb3 f3f1 	udiv	r3, r3, r1
 800182a:	fbb2 f3f3 	udiv	r3, r2, r3
 800182e:	4618      	mov	r0, r3
 8001830:	f000 fc4f 	bl	80020d2 <HAL_SYSTICK_Config>
 8001834:	4603      	mov	r3, r0
 8001836:	2b00      	cmp	r3, #0
 8001838:	d001      	beq.n	800183e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800183a:	2301      	movs	r3, #1
 800183c:	e00e      	b.n	800185c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	2b0f      	cmp	r3, #15
 8001842:	d80a      	bhi.n	800185a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001844:	2200      	movs	r2, #0
 8001846:	6879      	ldr	r1, [r7, #4]
 8001848:	f04f 30ff 	mov.w	r0, #4294967295
 800184c:	f000 fc17 	bl	800207e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001850:	4a06      	ldr	r2, [pc, #24]	; (800186c <HAL_InitTick+0x5c>)
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001856:	2300      	movs	r3, #0
 8001858:	e000      	b.n	800185c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800185a:	2301      	movs	r3, #1
}
 800185c:	4618      	mov	r0, r3
 800185e:	3708      	adds	r7, #8
 8001860:	46bd      	mov	sp, r7
 8001862:	bd80      	pop	{r7, pc}
 8001864:	20000000 	.word	0x20000000
 8001868:	20000008 	.word	0x20000008
 800186c:	20000004 	.word	0x20000004

08001870 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001870:	b480      	push	{r7}
 8001872:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001874:	4b05      	ldr	r3, [pc, #20]	; (800188c <HAL_IncTick+0x1c>)
 8001876:	781b      	ldrb	r3, [r3, #0]
 8001878:	461a      	mov	r2, r3
 800187a:	4b05      	ldr	r3, [pc, #20]	; (8001890 <HAL_IncTick+0x20>)
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	4413      	add	r3, r2
 8001880:	4a03      	ldr	r2, [pc, #12]	; (8001890 <HAL_IncTick+0x20>)
 8001882:	6013      	str	r3, [r2, #0]
}
 8001884:	bf00      	nop
 8001886:	46bd      	mov	sp, r7
 8001888:	bc80      	pop	{r7}
 800188a:	4770      	bx	lr
 800188c:	20000008 	.word	0x20000008
 8001890:	200002e0 	.word	0x200002e0

08001894 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001894:	b480      	push	{r7}
 8001896:	af00      	add	r7, sp, #0
  return uwTick;
 8001898:	4b02      	ldr	r3, [pc, #8]	; (80018a4 <HAL_GetTick+0x10>)
 800189a:	681b      	ldr	r3, [r3, #0]
}
 800189c:	4618      	mov	r0, r3
 800189e:	46bd      	mov	sp, r7
 80018a0:	bc80      	pop	{r7}
 80018a2:	4770      	bx	lr
 80018a4:	200002e0 	.word	0x200002e0

080018a8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b084      	sub	sp, #16
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80018b0:	f7ff fff0 	bl	8001894 <HAL_GetTick>
 80018b4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018c0:	d005      	beq.n	80018ce <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80018c2:	4b0a      	ldr	r3, [pc, #40]	; (80018ec <HAL_Delay+0x44>)
 80018c4:	781b      	ldrb	r3, [r3, #0]
 80018c6:	461a      	mov	r2, r3
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	4413      	add	r3, r2
 80018cc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80018ce:	bf00      	nop
 80018d0:	f7ff ffe0 	bl	8001894 <HAL_GetTick>
 80018d4:	4602      	mov	r2, r0
 80018d6:	68bb      	ldr	r3, [r7, #8]
 80018d8:	1ad3      	subs	r3, r2, r3
 80018da:	68fa      	ldr	r2, [r7, #12]
 80018dc:	429a      	cmp	r2, r3
 80018de:	d8f7      	bhi.n	80018d0 <HAL_Delay+0x28>
  {
  }
}
 80018e0:	bf00      	nop
 80018e2:	bf00      	nop
 80018e4:	3710      	adds	r7, #16
 80018e6:	46bd      	mov	sp, r7
 80018e8:	bd80      	pop	{r7, pc}
 80018ea:	bf00      	nop
 80018ec:	20000008 	.word	0x20000008

080018f0 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b086      	sub	sp, #24
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80018f8:	2300      	movs	r3, #0
 80018fa:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80018fc:	2300      	movs	r3, #0
 80018fe:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001900:	2300      	movs	r3, #0
 8001902:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001904:	2300      	movs	r3, #0
 8001906:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	2b00      	cmp	r3, #0
 800190c:	d101      	bne.n	8001912 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 800190e:	2301      	movs	r3, #1
 8001910:	e0be      	b.n	8001a90 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	689b      	ldr	r3, [r3, #8]
 8001916:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800191c:	2b00      	cmp	r3, #0
 800191e:	d109      	bne.n	8001934 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	2200      	movs	r2, #0
 8001924:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	2200      	movs	r2, #0
 800192a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800192e:	6878      	ldr	r0, [r7, #4]
 8001930:	f7ff fdd8 	bl	80014e4 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001934:	6878      	ldr	r0, [r7, #4]
 8001936:	f000 fa81 	bl	8001e3c <ADC_ConversionStop_Disable>
 800193a:	4603      	mov	r3, r0
 800193c:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001942:	f003 0310 	and.w	r3, r3, #16
 8001946:	2b00      	cmp	r3, #0
 8001948:	f040 8099 	bne.w	8001a7e <HAL_ADC_Init+0x18e>
 800194c:	7dfb      	ldrb	r3, [r7, #23]
 800194e:	2b00      	cmp	r3, #0
 8001950:	f040 8095 	bne.w	8001a7e <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001958:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800195c:	f023 0302 	bic.w	r3, r3, #2
 8001960:	f043 0202 	orr.w	r2, r3, #2
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001970:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	7b1b      	ldrb	r3, [r3, #12]
 8001976:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001978:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800197a:	68ba      	ldr	r2, [r7, #8]
 800197c:	4313      	orrs	r3, r2
 800197e:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	689b      	ldr	r3, [r3, #8]
 8001984:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001988:	d003      	beq.n	8001992 <HAL_ADC_Init+0xa2>
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	689b      	ldr	r3, [r3, #8]
 800198e:	2b01      	cmp	r3, #1
 8001990:	d102      	bne.n	8001998 <HAL_ADC_Init+0xa8>
 8001992:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001996:	e000      	b.n	800199a <HAL_ADC_Init+0xaa>
 8001998:	2300      	movs	r3, #0
 800199a:	693a      	ldr	r2, [r7, #16]
 800199c:	4313      	orrs	r3, r2
 800199e:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	7d1b      	ldrb	r3, [r3, #20]
 80019a4:	2b01      	cmp	r3, #1
 80019a6:	d119      	bne.n	80019dc <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	7b1b      	ldrb	r3, [r3, #12]
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d109      	bne.n	80019c4 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	699b      	ldr	r3, [r3, #24]
 80019b4:	3b01      	subs	r3, #1
 80019b6:	035a      	lsls	r2, r3, #13
 80019b8:	693b      	ldr	r3, [r7, #16]
 80019ba:	4313      	orrs	r3, r2
 80019bc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80019c0:	613b      	str	r3, [r7, #16]
 80019c2:	e00b      	b.n	80019dc <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019c8:	f043 0220 	orr.w	r2, r3, #32
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019d4:	f043 0201 	orr.w	r2, r3, #1
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	685b      	ldr	r3, [r3, #4]
 80019e2:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	693a      	ldr	r2, [r7, #16]
 80019ec:	430a      	orrs	r2, r1
 80019ee:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	689a      	ldr	r2, [r3, #8]
 80019f6:	4b28      	ldr	r3, [pc, #160]	; (8001a98 <HAL_ADC_Init+0x1a8>)
 80019f8:	4013      	ands	r3, r2
 80019fa:	687a      	ldr	r2, [r7, #4]
 80019fc:	6812      	ldr	r2, [r2, #0]
 80019fe:	68b9      	ldr	r1, [r7, #8]
 8001a00:	430b      	orrs	r3, r1
 8001a02:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	689b      	ldr	r3, [r3, #8]
 8001a08:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001a0c:	d003      	beq.n	8001a16 <HAL_ADC_Init+0x126>
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	689b      	ldr	r3, [r3, #8]
 8001a12:	2b01      	cmp	r3, #1
 8001a14:	d104      	bne.n	8001a20 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	691b      	ldr	r3, [r3, #16]
 8001a1a:	3b01      	subs	r3, #1
 8001a1c:	051b      	lsls	r3, r3, #20
 8001a1e:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a26:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	68fa      	ldr	r2, [r7, #12]
 8001a30:	430a      	orrs	r2, r1
 8001a32:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	689a      	ldr	r2, [r3, #8]
 8001a3a:	4b18      	ldr	r3, [pc, #96]	; (8001a9c <HAL_ADC_Init+0x1ac>)
 8001a3c:	4013      	ands	r3, r2
 8001a3e:	68ba      	ldr	r2, [r7, #8]
 8001a40:	429a      	cmp	r2, r3
 8001a42:	d10b      	bne.n	8001a5c <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	2200      	movs	r2, #0
 8001a48:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a4e:	f023 0303 	bic.w	r3, r3, #3
 8001a52:	f043 0201 	orr.w	r2, r3, #1
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001a5a:	e018      	b.n	8001a8e <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a60:	f023 0312 	bic.w	r3, r3, #18
 8001a64:	f043 0210 	orr.w	r2, r3, #16
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a70:	f043 0201 	orr.w	r2, r3, #1
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001a78:	2301      	movs	r3, #1
 8001a7a:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001a7c:	e007      	b.n	8001a8e <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a82:	f043 0210 	orr.w	r2, r3, #16
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8001a8a:	2301      	movs	r3, #1
 8001a8c:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001a8e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001a90:	4618      	mov	r0, r3
 8001a92:	3718      	adds	r7, #24
 8001a94:	46bd      	mov	sp, r7
 8001a96:	bd80      	pop	{r7, pc}
 8001a98:	ffe1f7fd 	.word	0xffe1f7fd
 8001a9c:	ff1f0efe 	.word	0xff1f0efe

08001aa0 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b082      	sub	sp, #8
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC))
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	685b      	ldr	r3, [r3, #4]
 8001aae:	f003 0320 	and.w	r3, r3, #32
 8001ab2:	2b20      	cmp	r3, #32
 8001ab4:	d140      	bne.n	8001b38 <HAL_ADC_IRQHandler+0x98>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) )
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	f003 0302 	and.w	r3, r3, #2
 8001ac0:	2b02      	cmp	r3, #2
 8001ac2:	d139      	bne.n	8001b38 <HAL_ADC_IRQHandler+0x98>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ac8:	f003 0310 	and.w	r3, r3, #16
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d105      	bne.n	8001adc <HAL_ADC_IRQHandler+0x3c>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ad4:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	629a      	str	r2, [r3, #40]	; 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	689b      	ldr	r3, [r3, #8]
 8001ae2:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001ae6:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001aea:	d11d      	bne.n	8001b28 <HAL_ADC_IRQHandler+0x88>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d119      	bne.n	8001b28 <HAL_ADC_IRQHandler+0x88>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	685a      	ldr	r2, [r3, #4]
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	f022 0220 	bic.w	r2, r2, #32
 8001b02:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b08:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	629a      	str	r2, [r3, #40]	; 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b14:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d105      	bne.n	8001b28 <HAL_ADC_IRQHandler+0x88>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b20:	f043 0201 	orr.w	r2, r3, #1
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8001b28:	6878      	ldr	r0, [r7, #4]
 8001b2a:	f000 f87c 	bl	8001c26 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f06f 0212 	mvn.w	r2, #18
 8001b36:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC))
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	685b      	ldr	r3, [r3, #4]
 8001b3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b42:	2b80      	cmp	r3, #128	; 0x80
 8001b44:	d14f      	bne.n	8001be6 <HAL_ADC_IRQHandler+0x146>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC))
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	f003 0304 	and.w	r3, r3, #4
 8001b50:	2b04      	cmp	r3, #4
 8001b52:	d148      	bne.n	8001be6 <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b58:	f003 0310 	and.w	r3, r3, #16
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d105      	bne.n	8001b6c <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b64:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	629a      	str	r2, [r3, #40]	; 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	689b      	ldr	r3, [r3, #8]
 8001b72:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8001b76:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
 8001b7a:	d012      	beq.n	8001ba2 <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	685b      	ldr	r3, [r3, #4]
 8001b82:	f403 6380 	and.w	r3, r3, #1024	; 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d125      	bne.n	8001bd6 <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	689b      	ldr	r3, [r3, #8]
 8001b90:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8001b94:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001b98:	d11d      	bne.n	8001bd6 <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d119      	bne.n	8001bd6 <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	685a      	ldr	r2, [r3, #4]
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001bb0:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bb6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	629a      	str	r2, [r3, #40]	; 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bc2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d105      	bne.n	8001bd6 <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bce:	f043 0201 	orr.w	r2, r3, #1
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001bd6:	6878      	ldr	r0, [r7, #4]
 8001bd8:	f000 f971 	bl	8001ebe <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	f06f 020c 	mvn.w	r2, #12
 8001be4:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	685b      	ldr	r3, [r3, #4]
 8001bec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001bf0:	2b40      	cmp	r3, #64	; 0x40
 8001bf2:	d114      	bne.n	8001c1e <HAL_ADC_IRQHandler+0x17e>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	f003 0301 	and.w	r3, r3, #1
 8001bfe:	2b01      	cmp	r3, #1
 8001c00:	d10d      	bne.n	8001c1e <HAL_ADC_IRQHandler+0x17e>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c06:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001c0e:	6878      	ldr	r0, [r7, #4]
 8001c10:	f000 f812 	bl	8001c38 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	f06f 0201 	mvn.w	r2, #1
 8001c1c:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 8001c1e:	bf00      	nop
 8001c20:	3708      	adds	r7, #8
 8001c22:	46bd      	mov	sp, r7
 8001c24:	bd80      	pop	{r7, pc}

08001c26 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001c26:	b480      	push	{r7}
 8001c28:	b083      	sub	sp, #12
 8001c2a:	af00      	add	r7, sp, #0
 8001c2c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8001c2e:	bf00      	nop
 8001c30:	370c      	adds	r7, #12
 8001c32:	46bd      	mov	sp, r7
 8001c34:	bc80      	pop	{r7}
 8001c36:	4770      	bx	lr

08001c38 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8001c38:	b480      	push	{r7}
 8001c3a:	b083      	sub	sp, #12
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8001c40:	bf00      	nop
 8001c42:	370c      	adds	r7, #12
 8001c44:	46bd      	mov	sp, r7
 8001c46:	bc80      	pop	{r7}
 8001c48:	4770      	bx	lr
	...

08001c4c <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001c4c:	b480      	push	{r7}
 8001c4e:	b085      	sub	sp, #20
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]
 8001c54:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001c56:	2300      	movs	r3, #0
 8001c58:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001c64:	2b01      	cmp	r3, #1
 8001c66:	d101      	bne.n	8001c6c <HAL_ADC_ConfigChannel+0x20>
 8001c68:	2302      	movs	r3, #2
 8001c6a:	e0dc      	b.n	8001e26 <HAL_ADC_ConfigChannel+0x1da>
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	2201      	movs	r2, #1
 8001c70:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001c74:	683b      	ldr	r3, [r7, #0]
 8001c76:	685b      	ldr	r3, [r3, #4]
 8001c78:	2b06      	cmp	r3, #6
 8001c7a:	d81c      	bhi.n	8001cb6 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001c82:	683b      	ldr	r3, [r7, #0]
 8001c84:	685a      	ldr	r2, [r3, #4]
 8001c86:	4613      	mov	r3, r2
 8001c88:	009b      	lsls	r3, r3, #2
 8001c8a:	4413      	add	r3, r2
 8001c8c:	3b05      	subs	r3, #5
 8001c8e:	221f      	movs	r2, #31
 8001c90:	fa02 f303 	lsl.w	r3, r2, r3
 8001c94:	43db      	mvns	r3, r3
 8001c96:	4019      	ands	r1, r3
 8001c98:	683b      	ldr	r3, [r7, #0]
 8001c9a:	6818      	ldr	r0, [r3, #0]
 8001c9c:	683b      	ldr	r3, [r7, #0]
 8001c9e:	685a      	ldr	r2, [r3, #4]
 8001ca0:	4613      	mov	r3, r2
 8001ca2:	009b      	lsls	r3, r3, #2
 8001ca4:	4413      	add	r3, r2
 8001ca6:	3b05      	subs	r3, #5
 8001ca8:	fa00 f203 	lsl.w	r2, r0, r3
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	430a      	orrs	r2, r1
 8001cb2:	635a      	str	r2, [r3, #52]	; 0x34
 8001cb4:	e03c      	b.n	8001d30 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001cb6:	683b      	ldr	r3, [r7, #0]
 8001cb8:	685b      	ldr	r3, [r3, #4]
 8001cba:	2b0c      	cmp	r3, #12
 8001cbc:	d81c      	bhi.n	8001cf8 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001cc4:	683b      	ldr	r3, [r7, #0]
 8001cc6:	685a      	ldr	r2, [r3, #4]
 8001cc8:	4613      	mov	r3, r2
 8001cca:	009b      	lsls	r3, r3, #2
 8001ccc:	4413      	add	r3, r2
 8001cce:	3b23      	subs	r3, #35	; 0x23
 8001cd0:	221f      	movs	r2, #31
 8001cd2:	fa02 f303 	lsl.w	r3, r2, r3
 8001cd6:	43db      	mvns	r3, r3
 8001cd8:	4019      	ands	r1, r3
 8001cda:	683b      	ldr	r3, [r7, #0]
 8001cdc:	6818      	ldr	r0, [r3, #0]
 8001cde:	683b      	ldr	r3, [r7, #0]
 8001ce0:	685a      	ldr	r2, [r3, #4]
 8001ce2:	4613      	mov	r3, r2
 8001ce4:	009b      	lsls	r3, r3, #2
 8001ce6:	4413      	add	r3, r2
 8001ce8:	3b23      	subs	r3, #35	; 0x23
 8001cea:	fa00 f203 	lsl.w	r2, r0, r3
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	430a      	orrs	r2, r1
 8001cf4:	631a      	str	r2, [r3, #48]	; 0x30
 8001cf6:	e01b      	b.n	8001d30 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001cfe:	683b      	ldr	r3, [r7, #0]
 8001d00:	685a      	ldr	r2, [r3, #4]
 8001d02:	4613      	mov	r3, r2
 8001d04:	009b      	lsls	r3, r3, #2
 8001d06:	4413      	add	r3, r2
 8001d08:	3b41      	subs	r3, #65	; 0x41
 8001d0a:	221f      	movs	r2, #31
 8001d0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d10:	43db      	mvns	r3, r3
 8001d12:	4019      	ands	r1, r3
 8001d14:	683b      	ldr	r3, [r7, #0]
 8001d16:	6818      	ldr	r0, [r3, #0]
 8001d18:	683b      	ldr	r3, [r7, #0]
 8001d1a:	685a      	ldr	r2, [r3, #4]
 8001d1c:	4613      	mov	r3, r2
 8001d1e:	009b      	lsls	r3, r3, #2
 8001d20:	4413      	add	r3, r2
 8001d22:	3b41      	subs	r3, #65	; 0x41
 8001d24:	fa00 f203 	lsl.w	r2, r0, r3
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	430a      	orrs	r2, r1
 8001d2e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001d30:	683b      	ldr	r3, [r7, #0]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	2b09      	cmp	r3, #9
 8001d36:	d91c      	bls.n	8001d72 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	68d9      	ldr	r1, [r3, #12]
 8001d3e:	683b      	ldr	r3, [r7, #0]
 8001d40:	681a      	ldr	r2, [r3, #0]
 8001d42:	4613      	mov	r3, r2
 8001d44:	005b      	lsls	r3, r3, #1
 8001d46:	4413      	add	r3, r2
 8001d48:	3b1e      	subs	r3, #30
 8001d4a:	2207      	movs	r2, #7
 8001d4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d50:	43db      	mvns	r3, r3
 8001d52:	4019      	ands	r1, r3
 8001d54:	683b      	ldr	r3, [r7, #0]
 8001d56:	6898      	ldr	r0, [r3, #8]
 8001d58:	683b      	ldr	r3, [r7, #0]
 8001d5a:	681a      	ldr	r2, [r3, #0]
 8001d5c:	4613      	mov	r3, r2
 8001d5e:	005b      	lsls	r3, r3, #1
 8001d60:	4413      	add	r3, r2
 8001d62:	3b1e      	subs	r3, #30
 8001d64:	fa00 f203 	lsl.w	r2, r0, r3
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	430a      	orrs	r2, r1
 8001d6e:	60da      	str	r2, [r3, #12]
 8001d70:	e019      	b.n	8001da6 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	6919      	ldr	r1, [r3, #16]
 8001d78:	683b      	ldr	r3, [r7, #0]
 8001d7a:	681a      	ldr	r2, [r3, #0]
 8001d7c:	4613      	mov	r3, r2
 8001d7e:	005b      	lsls	r3, r3, #1
 8001d80:	4413      	add	r3, r2
 8001d82:	2207      	movs	r2, #7
 8001d84:	fa02 f303 	lsl.w	r3, r2, r3
 8001d88:	43db      	mvns	r3, r3
 8001d8a:	4019      	ands	r1, r3
 8001d8c:	683b      	ldr	r3, [r7, #0]
 8001d8e:	6898      	ldr	r0, [r3, #8]
 8001d90:	683b      	ldr	r3, [r7, #0]
 8001d92:	681a      	ldr	r2, [r3, #0]
 8001d94:	4613      	mov	r3, r2
 8001d96:	005b      	lsls	r3, r3, #1
 8001d98:	4413      	add	r3, r2
 8001d9a:	fa00 f203 	lsl.w	r2, r0, r3
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	430a      	orrs	r2, r1
 8001da4:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001da6:	683b      	ldr	r3, [r7, #0]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	2b10      	cmp	r3, #16
 8001dac:	d003      	beq.n	8001db6 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001dae:	683b      	ldr	r3, [r7, #0]
 8001db0:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001db2:	2b11      	cmp	r3, #17
 8001db4:	d132      	bne.n	8001e1c <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	4a1d      	ldr	r2, [pc, #116]	; (8001e30 <HAL_ADC_ConfigChannel+0x1e4>)
 8001dbc:	4293      	cmp	r3, r2
 8001dbe:	d125      	bne.n	8001e0c <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	689b      	ldr	r3, [r3, #8]
 8001dc6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d126      	bne.n	8001e1c <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	689a      	ldr	r2, [r3, #8]
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001ddc:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001dde:	683b      	ldr	r3, [r7, #0]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	2b10      	cmp	r3, #16
 8001de4:	d11a      	bne.n	8001e1c <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001de6:	4b13      	ldr	r3, [pc, #76]	; (8001e34 <HAL_ADC_ConfigChannel+0x1e8>)
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	4a13      	ldr	r2, [pc, #76]	; (8001e38 <HAL_ADC_ConfigChannel+0x1ec>)
 8001dec:	fba2 2303 	umull	r2, r3, r2, r3
 8001df0:	0c9a      	lsrs	r2, r3, #18
 8001df2:	4613      	mov	r3, r2
 8001df4:	009b      	lsls	r3, r3, #2
 8001df6:	4413      	add	r3, r2
 8001df8:	005b      	lsls	r3, r3, #1
 8001dfa:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001dfc:	e002      	b.n	8001e04 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8001dfe:	68bb      	ldr	r3, [r7, #8]
 8001e00:	3b01      	subs	r3, #1
 8001e02:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001e04:	68bb      	ldr	r3, [r7, #8]
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d1f9      	bne.n	8001dfe <HAL_ADC_ConfigChannel+0x1b2>
 8001e0a:	e007      	b.n	8001e1c <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e10:	f043 0220 	orr.w	r2, r3, #32
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001e18:	2301      	movs	r3, #1
 8001e1a:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	2200      	movs	r2, #0
 8001e20:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001e24:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e26:	4618      	mov	r0, r3
 8001e28:	3714      	adds	r7, #20
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	bc80      	pop	{r7}
 8001e2e:	4770      	bx	lr
 8001e30:	40012400 	.word	0x40012400
 8001e34:	20000000 	.word	0x20000000
 8001e38:	431bde83 	.word	0x431bde83

08001e3c <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b084      	sub	sp, #16
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001e44:	2300      	movs	r3, #0
 8001e46:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	689b      	ldr	r3, [r3, #8]
 8001e4e:	f003 0301 	and.w	r3, r3, #1
 8001e52:	2b01      	cmp	r3, #1
 8001e54:	d12e      	bne.n	8001eb4 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	689a      	ldr	r2, [r3, #8]
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	f022 0201 	bic.w	r2, r2, #1
 8001e64:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001e66:	f7ff fd15 	bl	8001894 <HAL_GetTick>
 8001e6a:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001e6c:	e01b      	b.n	8001ea6 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001e6e:	f7ff fd11 	bl	8001894 <HAL_GetTick>
 8001e72:	4602      	mov	r2, r0
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	1ad3      	subs	r3, r2, r3
 8001e78:	2b02      	cmp	r3, #2
 8001e7a:	d914      	bls.n	8001ea6 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	689b      	ldr	r3, [r3, #8]
 8001e82:	f003 0301 	and.w	r3, r3, #1
 8001e86:	2b01      	cmp	r3, #1
 8001e88:	d10d      	bne.n	8001ea6 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e8e:	f043 0210 	orr.w	r2, r3, #16
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e9a:	f043 0201 	orr.w	r2, r3, #1
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8001ea2:	2301      	movs	r3, #1
 8001ea4:	e007      	b.n	8001eb6 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	689b      	ldr	r3, [r3, #8]
 8001eac:	f003 0301 	and.w	r3, r3, #1
 8001eb0:	2b01      	cmp	r3, #1
 8001eb2:	d0dc      	beq.n	8001e6e <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001eb4:	2300      	movs	r3, #0
}
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	3710      	adds	r7, #16
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	bd80      	pop	{r7, pc}

08001ebe <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001ebe:	b480      	push	{r7}
 8001ec0:	b083      	sub	sp, #12
 8001ec2:	af00      	add	r7, sp, #0
 8001ec4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8001ec6:	bf00      	nop
 8001ec8:	370c      	adds	r7, #12
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	bc80      	pop	{r7}
 8001ece:	4770      	bx	lr

08001ed0 <__NVIC_SetPriorityGrouping>:
{
 8001ed0:	b480      	push	{r7}
 8001ed2:	b085      	sub	sp, #20
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	f003 0307 	and.w	r3, r3, #7
 8001ede:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ee0:	4b0c      	ldr	r3, [pc, #48]	; (8001f14 <__NVIC_SetPriorityGrouping+0x44>)
 8001ee2:	68db      	ldr	r3, [r3, #12]
 8001ee4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ee6:	68ba      	ldr	r2, [r7, #8]
 8001ee8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001eec:	4013      	ands	r3, r2
 8001eee:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ef4:	68bb      	ldr	r3, [r7, #8]
 8001ef6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ef8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001efc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f00:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f02:	4a04      	ldr	r2, [pc, #16]	; (8001f14 <__NVIC_SetPriorityGrouping+0x44>)
 8001f04:	68bb      	ldr	r3, [r7, #8]
 8001f06:	60d3      	str	r3, [r2, #12]
}
 8001f08:	bf00      	nop
 8001f0a:	3714      	adds	r7, #20
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	bc80      	pop	{r7}
 8001f10:	4770      	bx	lr
 8001f12:	bf00      	nop
 8001f14:	e000ed00 	.word	0xe000ed00

08001f18 <__NVIC_GetPriorityGrouping>:
{
 8001f18:	b480      	push	{r7}
 8001f1a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f1c:	4b04      	ldr	r3, [pc, #16]	; (8001f30 <__NVIC_GetPriorityGrouping+0x18>)
 8001f1e:	68db      	ldr	r3, [r3, #12]
 8001f20:	0a1b      	lsrs	r3, r3, #8
 8001f22:	f003 0307 	and.w	r3, r3, #7
}
 8001f26:	4618      	mov	r0, r3
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	bc80      	pop	{r7}
 8001f2c:	4770      	bx	lr
 8001f2e:	bf00      	nop
 8001f30:	e000ed00 	.word	0xe000ed00

08001f34 <__NVIC_EnableIRQ>:
{
 8001f34:	b480      	push	{r7}
 8001f36:	b083      	sub	sp, #12
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	4603      	mov	r3, r0
 8001f3c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	db0b      	blt.n	8001f5e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f46:	79fb      	ldrb	r3, [r7, #7]
 8001f48:	f003 021f 	and.w	r2, r3, #31
 8001f4c:	4906      	ldr	r1, [pc, #24]	; (8001f68 <__NVIC_EnableIRQ+0x34>)
 8001f4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f52:	095b      	lsrs	r3, r3, #5
 8001f54:	2001      	movs	r0, #1
 8001f56:	fa00 f202 	lsl.w	r2, r0, r2
 8001f5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001f5e:	bf00      	nop
 8001f60:	370c      	adds	r7, #12
 8001f62:	46bd      	mov	sp, r7
 8001f64:	bc80      	pop	{r7}
 8001f66:	4770      	bx	lr
 8001f68:	e000e100 	.word	0xe000e100

08001f6c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f6c:	b480      	push	{r7}
 8001f6e:	b083      	sub	sp, #12
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	4603      	mov	r3, r0
 8001f74:	6039      	str	r1, [r7, #0]
 8001f76:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	db0a      	blt.n	8001f96 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f80:	683b      	ldr	r3, [r7, #0]
 8001f82:	b2da      	uxtb	r2, r3
 8001f84:	490c      	ldr	r1, [pc, #48]	; (8001fb8 <__NVIC_SetPriority+0x4c>)
 8001f86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f8a:	0112      	lsls	r2, r2, #4
 8001f8c:	b2d2      	uxtb	r2, r2
 8001f8e:	440b      	add	r3, r1
 8001f90:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f94:	e00a      	b.n	8001fac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f96:	683b      	ldr	r3, [r7, #0]
 8001f98:	b2da      	uxtb	r2, r3
 8001f9a:	4908      	ldr	r1, [pc, #32]	; (8001fbc <__NVIC_SetPriority+0x50>)
 8001f9c:	79fb      	ldrb	r3, [r7, #7]
 8001f9e:	f003 030f 	and.w	r3, r3, #15
 8001fa2:	3b04      	subs	r3, #4
 8001fa4:	0112      	lsls	r2, r2, #4
 8001fa6:	b2d2      	uxtb	r2, r2
 8001fa8:	440b      	add	r3, r1
 8001faa:	761a      	strb	r2, [r3, #24]
}
 8001fac:	bf00      	nop
 8001fae:	370c      	adds	r7, #12
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	bc80      	pop	{r7}
 8001fb4:	4770      	bx	lr
 8001fb6:	bf00      	nop
 8001fb8:	e000e100 	.word	0xe000e100
 8001fbc:	e000ed00 	.word	0xe000ed00

08001fc0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001fc0:	b480      	push	{r7}
 8001fc2:	b089      	sub	sp, #36	; 0x24
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	60f8      	str	r0, [r7, #12]
 8001fc8:	60b9      	str	r1, [r7, #8]
 8001fca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	f003 0307 	and.w	r3, r3, #7
 8001fd2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001fd4:	69fb      	ldr	r3, [r7, #28]
 8001fd6:	f1c3 0307 	rsb	r3, r3, #7
 8001fda:	2b04      	cmp	r3, #4
 8001fdc:	bf28      	it	cs
 8001fde:	2304      	movcs	r3, #4
 8001fe0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001fe2:	69fb      	ldr	r3, [r7, #28]
 8001fe4:	3304      	adds	r3, #4
 8001fe6:	2b06      	cmp	r3, #6
 8001fe8:	d902      	bls.n	8001ff0 <NVIC_EncodePriority+0x30>
 8001fea:	69fb      	ldr	r3, [r7, #28]
 8001fec:	3b03      	subs	r3, #3
 8001fee:	e000      	b.n	8001ff2 <NVIC_EncodePriority+0x32>
 8001ff0:	2300      	movs	r3, #0
 8001ff2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ff4:	f04f 32ff 	mov.w	r2, #4294967295
 8001ff8:	69bb      	ldr	r3, [r7, #24]
 8001ffa:	fa02 f303 	lsl.w	r3, r2, r3
 8001ffe:	43da      	mvns	r2, r3
 8002000:	68bb      	ldr	r3, [r7, #8]
 8002002:	401a      	ands	r2, r3
 8002004:	697b      	ldr	r3, [r7, #20]
 8002006:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002008:	f04f 31ff 	mov.w	r1, #4294967295
 800200c:	697b      	ldr	r3, [r7, #20]
 800200e:	fa01 f303 	lsl.w	r3, r1, r3
 8002012:	43d9      	mvns	r1, r3
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002018:	4313      	orrs	r3, r2
         );
}
 800201a:	4618      	mov	r0, r3
 800201c:	3724      	adds	r7, #36	; 0x24
 800201e:	46bd      	mov	sp, r7
 8002020:	bc80      	pop	{r7}
 8002022:	4770      	bx	lr

08002024 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	b082      	sub	sp, #8
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	3b01      	subs	r3, #1
 8002030:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002034:	d301      	bcc.n	800203a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002036:	2301      	movs	r3, #1
 8002038:	e00f      	b.n	800205a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800203a:	4a0a      	ldr	r2, [pc, #40]	; (8002064 <SysTick_Config+0x40>)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	3b01      	subs	r3, #1
 8002040:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002042:	210f      	movs	r1, #15
 8002044:	f04f 30ff 	mov.w	r0, #4294967295
 8002048:	f7ff ff90 	bl	8001f6c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800204c:	4b05      	ldr	r3, [pc, #20]	; (8002064 <SysTick_Config+0x40>)
 800204e:	2200      	movs	r2, #0
 8002050:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002052:	4b04      	ldr	r3, [pc, #16]	; (8002064 <SysTick_Config+0x40>)
 8002054:	2207      	movs	r2, #7
 8002056:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002058:	2300      	movs	r3, #0
}
 800205a:	4618      	mov	r0, r3
 800205c:	3708      	adds	r7, #8
 800205e:	46bd      	mov	sp, r7
 8002060:	bd80      	pop	{r7, pc}
 8002062:	bf00      	nop
 8002064:	e000e010 	.word	0xe000e010

08002068 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	b082      	sub	sp, #8
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002070:	6878      	ldr	r0, [r7, #4]
 8002072:	f7ff ff2d 	bl	8001ed0 <__NVIC_SetPriorityGrouping>
}
 8002076:	bf00      	nop
 8002078:	3708      	adds	r7, #8
 800207a:	46bd      	mov	sp, r7
 800207c:	bd80      	pop	{r7, pc}

0800207e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800207e:	b580      	push	{r7, lr}
 8002080:	b086      	sub	sp, #24
 8002082:	af00      	add	r7, sp, #0
 8002084:	4603      	mov	r3, r0
 8002086:	60b9      	str	r1, [r7, #8]
 8002088:	607a      	str	r2, [r7, #4]
 800208a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800208c:	2300      	movs	r3, #0
 800208e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002090:	f7ff ff42 	bl	8001f18 <__NVIC_GetPriorityGrouping>
 8002094:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002096:	687a      	ldr	r2, [r7, #4]
 8002098:	68b9      	ldr	r1, [r7, #8]
 800209a:	6978      	ldr	r0, [r7, #20]
 800209c:	f7ff ff90 	bl	8001fc0 <NVIC_EncodePriority>
 80020a0:	4602      	mov	r2, r0
 80020a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80020a6:	4611      	mov	r1, r2
 80020a8:	4618      	mov	r0, r3
 80020aa:	f7ff ff5f 	bl	8001f6c <__NVIC_SetPriority>
}
 80020ae:	bf00      	nop
 80020b0:	3718      	adds	r7, #24
 80020b2:	46bd      	mov	sp, r7
 80020b4:	bd80      	pop	{r7, pc}

080020b6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020b6:	b580      	push	{r7, lr}
 80020b8:	b082      	sub	sp, #8
 80020ba:	af00      	add	r7, sp, #0
 80020bc:	4603      	mov	r3, r0
 80020be:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80020c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020c4:	4618      	mov	r0, r3
 80020c6:	f7ff ff35 	bl	8001f34 <__NVIC_EnableIRQ>
}
 80020ca:	bf00      	nop
 80020cc:	3708      	adds	r7, #8
 80020ce:	46bd      	mov	sp, r7
 80020d0:	bd80      	pop	{r7, pc}

080020d2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80020d2:	b580      	push	{r7, lr}
 80020d4:	b082      	sub	sp, #8
 80020d6:	af00      	add	r7, sp, #0
 80020d8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80020da:	6878      	ldr	r0, [r7, #4]
 80020dc:	f7ff ffa2 	bl	8002024 <SysTick_Config>
 80020e0:	4603      	mov	r3, r0
}
 80020e2:	4618      	mov	r0, r3
 80020e4:	3708      	adds	r7, #8
 80020e6:	46bd      	mov	sp, r7
 80020e8:	bd80      	pop	{r7, pc}
	...

080020ec <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80020ec:	b480      	push	{r7}
 80020ee:	b08b      	sub	sp, #44	; 0x2c
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
 80020f4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80020f6:	2300      	movs	r3, #0
 80020f8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80020fa:	2300      	movs	r3, #0
 80020fc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80020fe:	e169      	b.n	80023d4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002100:	2201      	movs	r2, #1
 8002102:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002104:	fa02 f303 	lsl.w	r3, r2, r3
 8002108:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800210a:	683b      	ldr	r3, [r7, #0]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	69fa      	ldr	r2, [r7, #28]
 8002110:	4013      	ands	r3, r2
 8002112:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002114:	69ba      	ldr	r2, [r7, #24]
 8002116:	69fb      	ldr	r3, [r7, #28]
 8002118:	429a      	cmp	r2, r3
 800211a:	f040 8158 	bne.w	80023ce <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800211e:	683b      	ldr	r3, [r7, #0]
 8002120:	685b      	ldr	r3, [r3, #4]
 8002122:	4a9a      	ldr	r2, [pc, #616]	; (800238c <HAL_GPIO_Init+0x2a0>)
 8002124:	4293      	cmp	r3, r2
 8002126:	d05e      	beq.n	80021e6 <HAL_GPIO_Init+0xfa>
 8002128:	4a98      	ldr	r2, [pc, #608]	; (800238c <HAL_GPIO_Init+0x2a0>)
 800212a:	4293      	cmp	r3, r2
 800212c:	d875      	bhi.n	800221a <HAL_GPIO_Init+0x12e>
 800212e:	4a98      	ldr	r2, [pc, #608]	; (8002390 <HAL_GPIO_Init+0x2a4>)
 8002130:	4293      	cmp	r3, r2
 8002132:	d058      	beq.n	80021e6 <HAL_GPIO_Init+0xfa>
 8002134:	4a96      	ldr	r2, [pc, #600]	; (8002390 <HAL_GPIO_Init+0x2a4>)
 8002136:	4293      	cmp	r3, r2
 8002138:	d86f      	bhi.n	800221a <HAL_GPIO_Init+0x12e>
 800213a:	4a96      	ldr	r2, [pc, #600]	; (8002394 <HAL_GPIO_Init+0x2a8>)
 800213c:	4293      	cmp	r3, r2
 800213e:	d052      	beq.n	80021e6 <HAL_GPIO_Init+0xfa>
 8002140:	4a94      	ldr	r2, [pc, #592]	; (8002394 <HAL_GPIO_Init+0x2a8>)
 8002142:	4293      	cmp	r3, r2
 8002144:	d869      	bhi.n	800221a <HAL_GPIO_Init+0x12e>
 8002146:	4a94      	ldr	r2, [pc, #592]	; (8002398 <HAL_GPIO_Init+0x2ac>)
 8002148:	4293      	cmp	r3, r2
 800214a:	d04c      	beq.n	80021e6 <HAL_GPIO_Init+0xfa>
 800214c:	4a92      	ldr	r2, [pc, #584]	; (8002398 <HAL_GPIO_Init+0x2ac>)
 800214e:	4293      	cmp	r3, r2
 8002150:	d863      	bhi.n	800221a <HAL_GPIO_Init+0x12e>
 8002152:	4a92      	ldr	r2, [pc, #584]	; (800239c <HAL_GPIO_Init+0x2b0>)
 8002154:	4293      	cmp	r3, r2
 8002156:	d046      	beq.n	80021e6 <HAL_GPIO_Init+0xfa>
 8002158:	4a90      	ldr	r2, [pc, #576]	; (800239c <HAL_GPIO_Init+0x2b0>)
 800215a:	4293      	cmp	r3, r2
 800215c:	d85d      	bhi.n	800221a <HAL_GPIO_Init+0x12e>
 800215e:	2b12      	cmp	r3, #18
 8002160:	d82a      	bhi.n	80021b8 <HAL_GPIO_Init+0xcc>
 8002162:	2b12      	cmp	r3, #18
 8002164:	d859      	bhi.n	800221a <HAL_GPIO_Init+0x12e>
 8002166:	a201      	add	r2, pc, #4	; (adr r2, 800216c <HAL_GPIO_Init+0x80>)
 8002168:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800216c:	080021e7 	.word	0x080021e7
 8002170:	080021c1 	.word	0x080021c1
 8002174:	080021d3 	.word	0x080021d3
 8002178:	08002215 	.word	0x08002215
 800217c:	0800221b 	.word	0x0800221b
 8002180:	0800221b 	.word	0x0800221b
 8002184:	0800221b 	.word	0x0800221b
 8002188:	0800221b 	.word	0x0800221b
 800218c:	0800221b 	.word	0x0800221b
 8002190:	0800221b 	.word	0x0800221b
 8002194:	0800221b 	.word	0x0800221b
 8002198:	0800221b 	.word	0x0800221b
 800219c:	0800221b 	.word	0x0800221b
 80021a0:	0800221b 	.word	0x0800221b
 80021a4:	0800221b 	.word	0x0800221b
 80021a8:	0800221b 	.word	0x0800221b
 80021ac:	0800221b 	.word	0x0800221b
 80021b0:	080021c9 	.word	0x080021c9
 80021b4:	080021dd 	.word	0x080021dd
 80021b8:	4a79      	ldr	r2, [pc, #484]	; (80023a0 <HAL_GPIO_Init+0x2b4>)
 80021ba:	4293      	cmp	r3, r2
 80021bc:	d013      	beq.n	80021e6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80021be:	e02c      	b.n	800221a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80021c0:	683b      	ldr	r3, [r7, #0]
 80021c2:	68db      	ldr	r3, [r3, #12]
 80021c4:	623b      	str	r3, [r7, #32]
          break;
 80021c6:	e029      	b.n	800221c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80021c8:	683b      	ldr	r3, [r7, #0]
 80021ca:	68db      	ldr	r3, [r3, #12]
 80021cc:	3304      	adds	r3, #4
 80021ce:	623b      	str	r3, [r7, #32]
          break;
 80021d0:	e024      	b.n	800221c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80021d2:	683b      	ldr	r3, [r7, #0]
 80021d4:	68db      	ldr	r3, [r3, #12]
 80021d6:	3308      	adds	r3, #8
 80021d8:	623b      	str	r3, [r7, #32]
          break;
 80021da:	e01f      	b.n	800221c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80021dc:	683b      	ldr	r3, [r7, #0]
 80021de:	68db      	ldr	r3, [r3, #12]
 80021e0:	330c      	adds	r3, #12
 80021e2:	623b      	str	r3, [r7, #32]
          break;
 80021e4:	e01a      	b.n	800221c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80021e6:	683b      	ldr	r3, [r7, #0]
 80021e8:	689b      	ldr	r3, [r3, #8]
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d102      	bne.n	80021f4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80021ee:	2304      	movs	r3, #4
 80021f0:	623b      	str	r3, [r7, #32]
          break;
 80021f2:	e013      	b.n	800221c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80021f4:	683b      	ldr	r3, [r7, #0]
 80021f6:	689b      	ldr	r3, [r3, #8]
 80021f8:	2b01      	cmp	r3, #1
 80021fa:	d105      	bne.n	8002208 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80021fc:	2308      	movs	r3, #8
 80021fe:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	69fa      	ldr	r2, [r7, #28]
 8002204:	611a      	str	r2, [r3, #16]
          break;
 8002206:	e009      	b.n	800221c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002208:	2308      	movs	r3, #8
 800220a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	69fa      	ldr	r2, [r7, #28]
 8002210:	615a      	str	r2, [r3, #20]
          break;
 8002212:	e003      	b.n	800221c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002214:	2300      	movs	r3, #0
 8002216:	623b      	str	r3, [r7, #32]
          break;
 8002218:	e000      	b.n	800221c <HAL_GPIO_Init+0x130>
          break;
 800221a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800221c:	69bb      	ldr	r3, [r7, #24]
 800221e:	2bff      	cmp	r3, #255	; 0xff
 8002220:	d801      	bhi.n	8002226 <HAL_GPIO_Init+0x13a>
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	e001      	b.n	800222a <HAL_GPIO_Init+0x13e>
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	3304      	adds	r3, #4
 800222a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800222c:	69bb      	ldr	r3, [r7, #24]
 800222e:	2bff      	cmp	r3, #255	; 0xff
 8002230:	d802      	bhi.n	8002238 <HAL_GPIO_Init+0x14c>
 8002232:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002234:	009b      	lsls	r3, r3, #2
 8002236:	e002      	b.n	800223e <HAL_GPIO_Init+0x152>
 8002238:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800223a:	3b08      	subs	r3, #8
 800223c:	009b      	lsls	r3, r3, #2
 800223e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002240:	697b      	ldr	r3, [r7, #20]
 8002242:	681a      	ldr	r2, [r3, #0]
 8002244:	210f      	movs	r1, #15
 8002246:	693b      	ldr	r3, [r7, #16]
 8002248:	fa01 f303 	lsl.w	r3, r1, r3
 800224c:	43db      	mvns	r3, r3
 800224e:	401a      	ands	r2, r3
 8002250:	6a39      	ldr	r1, [r7, #32]
 8002252:	693b      	ldr	r3, [r7, #16]
 8002254:	fa01 f303 	lsl.w	r3, r1, r3
 8002258:	431a      	orrs	r2, r3
 800225a:	697b      	ldr	r3, [r7, #20]
 800225c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800225e:	683b      	ldr	r3, [r7, #0]
 8002260:	685b      	ldr	r3, [r3, #4]
 8002262:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002266:	2b00      	cmp	r3, #0
 8002268:	f000 80b1 	beq.w	80023ce <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800226c:	4b4d      	ldr	r3, [pc, #308]	; (80023a4 <HAL_GPIO_Init+0x2b8>)
 800226e:	699b      	ldr	r3, [r3, #24]
 8002270:	4a4c      	ldr	r2, [pc, #304]	; (80023a4 <HAL_GPIO_Init+0x2b8>)
 8002272:	f043 0301 	orr.w	r3, r3, #1
 8002276:	6193      	str	r3, [r2, #24]
 8002278:	4b4a      	ldr	r3, [pc, #296]	; (80023a4 <HAL_GPIO_Init+0x2b8>)
 800227a:	699b      	ldr	r3, [r3, #24]
 800227c:	f003 0301 	and.w	r3, r3, #1
 8002280:	60bb      	str	r3, [r7, #8]
 8002282:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002284:	4a48      	ldr	r2, [pc, #288]	; (80023a8 <HAL_GPIO_Init+0x2bc>)
 8002286:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002288:	089b      	lsrs	r3, r3, #2
 800228a:	3302      	adds	r3, #2
 800228c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002290:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002292:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002294:	f003 0303 	and.w	r3, r3, #3
 8002298:	009b      	lsls	r3, r3, #2
 800229a:	220f      	movs	r2, #15
 800229c:	fa02 f303 	lsl.w	r3, r2, r3
 80022a0:	43db      	mvns	r3, r3
 80022a2:	68fa      	ldr	r2, [r7, #12]
 80022a4:	4013      	ands	r3, r2
 80022a6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	4a40      	ldr	r2, [pc, #256]	; (80023ac <HAL_GPIO_Init+0x2c0>)
 80022ac:	4293      	cmp	r3, r2
 80022ae:	d013      	beq.n	80022d8 <HAL_GPIO_Init+0x1ec>
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	4a3f      	ldr	r2, [pc, #252]	; (80023b0 <HAL_GPIO_Init+0x2c4>)
 80022b4:	4293      	cmp	r3, r2
 80022b6:	d00d      	beq.n	80022d4 <HAL_GPIO_Init+0x1e8>
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	4a3e      	ldr	r2, [pc, #248]	; (80023b4 <HAL_GPIO_Init+0x2c8>)
 80022bc:	4293      	cmp	r3, r2
 80022be:	d007      	beq.n	80022d0 <HAL_GPIO_Init+0x1e4>
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	4a3d      	ldr	r2, [pc, #244]	; (80023b8 <HAL_GPIO_Init+0x2cc>)
 80022c4:	4293      	cmp	r3, r2
 80022c6:	d101      	bne.n	80022cc <HAL_GPIO_Init+0x1e0>
 80022c8:	2303      	movs	r3, #3
 80022ca:	e006      	b.n	80022da <HAL_GPIO_Init+0x1ee>
 80022cc:	2304      	movs	r3, #4
 80022ce:	e004      	b.n	80022da <HAL_GPIO_Init+0x1ee>
 80022d0:	2302      	movs	r3, #2
 80022d2:	e002      	b.n	80022da <HAL_GPIO_Init+0x1ee>
 80022d4:	2301      	movs	r3, #1
 80022d6:	e000      	b.n	80022da <HAL_GPIO_Init+0x1ee>
 80022d8:	2300      	movs	r3, #0
 80022da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80022dc:	f002 0203 	and.w	r2, r2, #3
 80022e0:	0092      	lsls	r2, r2, #2
 80022e2:	4093      	lsls	r3, r2
 80022e4:	68fa      	ldr	r2, [r7, #12]
 80022e6:	4313      	orrs	r3, r2
 80022e8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80022ea:	492f      	ldr	r1, [pc, #188]	; (80023a8 <HAL_GPIO_Init+0x2bc>)
 80022ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022ee:	089b      	lsrs	r3, r3, #2
 80022f0:	3302      	adds	r3, #2
 80022f2:	68fa      	ldr	r2, [r7, #12]
 80022f4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80022f8:	683b      	ldr	r3, [r7, #0]
 80022fa:	685b      	ldr	r3, [r3, #4]
 80022fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002300:	2b00      	cmp	r3, #0
 8002302:	d006      	beq.n	8002312 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002304:	4b2d      	ldr	r3, [pc, #180]	; (80023bc <HAL_GPIO_Init+0x2d0>)
 8002306:	681a      	ldr	r2, [r3, #0]
 8002308:	492c      	ldr	r1, [pc, #176]	; (80023bc <HAL_GPIO_Init+0x2d0>)
 800230a:	69bb      	ldr	r3, [r7, #24]
 800230c:	4313      	orrs	r3, r2
 800230e:	600b      	str	r3, [r1, #0]
 8002310:	e006      	b.n	8002320 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002312:	4b2a      	ldr	r3, [pc, #168]	; (80023bc <HAL_GPIO_Init+0x2d0>)
 8002314:	681a      	ldr	r2, [r3, #0]
 8002316:	69bb      	ldr	r3, [r7, #24]
 8002318:	43db      	mvns	r3, r3
 800231a:	4928      	ldr	r1, [pc, #160]	; (80023bc <HAL_GPIO_Init+0x2d0>)
 800231c:	4013      	ands	r3, r2
 800231e:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002320:	683b      	ldr	r3, [r7, #0]
 8002322:	685b      	ldr	r3, [r3, #4]
 8002324:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002328:	2b00      	cmp	r3, #0
 800232a:	d006      	beq.n	800233a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800232c:	4b23      	ldr	r3, [pc, #140]	; (80023bc <HAL_GPIO_Init+0x2d0>)
 800232e:	685a      	ldr	r2, [r3, #4]
 8002330:	4922      	ldr	r1, [pc, #136]	; (80023bc <HAL_GPIO_Init+0x2d0>)
 8002332:	69bb      	ldr	r3, [r7, #24]
 8002334:	4313      	orrs	r3, r2
 8002336:	604b      	str	r3, [r1, #4]
 8002338:	e006      	b.n	8002348 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800233a:	4b20      	ldr	r3, [pc, #128]	; (80023bc <HAL_GPIO_Init+0x2d0>)
 800233c:	685a      	ldr	r2, [r3, #4]
 800233e:	69bb      	ldr	r3, [r7, #24]
 8002340:	43db      	mvns	r3, r3
 8002342:	491e      	ldr	r1, [pc, #120]	; (80023bc <HAL_GPIO_Init+0x2d0>)
 8002344:	4013      	ands	r3, r2
 8002346:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002348:	683b      	ldr	r3, [r7, #0]
 800234a:	685b      	ldr	r3, [r3, #4]
 800234c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002350:	2b00      	cmp	r3, #0
 8002352:	d006      	beq.n	8002362 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002354:	4b19      	ldr	r3, [pc, #100]	; (80023bc <HAL_GPIO_Init+0x2d0>)
 8002356:	689a      	ldr	r2, [r3, #8]
 8002358:	4918      	ldr	r1, [pc, #96]	; (80023bc <HAL_GPIO_Init+0x2d0>)
 800235a:	69bb      	ldr	r3, [r7, #24]
 800235c:	4313      	orrs	r3, r2
 800235e:	608b      	str	r3, [r1, #8]
 8002360:	e006      	b.n	8002370 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002362:	4b16      	ldr	r3, [pc, #88]	; (80023bc <HAL_GPIO_Init+0x2d0>)
 8002364:	689a      	ldr	r2, [r3, #8]
 8002366:	69bb      	ldr	r3, [r7, #24]
 8002368:	43db      	mvns	r3, r3
 800236a:	4914      	ldr	r1, [pc, #80]	; (80023bc <HAL_GPIO_Init+0x2d0>)
 800236c:	4013      	ands	r3, r2
 800236e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002370:	683b      	ldr	r3, [r7, #0]
 8002372:	685b      	ldr	r3, [r3, #4]
 8002374:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002378:	2b00      	cmp	r3, #0
 800237a:	d021      	beq.n	80023c0 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800237c:	4b0f      	ldr	r3, [pc, #60]	; (80023bc <HAL_GPIO_Init+0x2d0>)
 800237e:	68da      	ldr	r2, [r3, #12]
 8002380:	490e      	ldr	r1, [pc, #56]	; (80023bc <HAL_GPIO_Init+0x2d0>)
 8002382:	69bb      	ldr	r3, [r7, #24]
 8002384:	4313      	orrs	r3, r2
 8002386:	60cb      	str	r3, [r1, #12]
 8002388:	e021      	b.n	80023ce <HAL_GPIO_Init+0x2e2>
 800238a:	bf00      	nop
 800238c:	10320000 	.word	0x10320000
 8002390:	10310000 	.word	0x10310000
 8002394:	10220000 	.word	0x10220000
 8002398:	10210000 	.word	0x10210000
 800239c:	10120000 	.word	0x10120000
 80023a0:	10110000 	.word	0x10110000
 80023a4:	40021000 	.word	0x40021000
 80023a8:	40010000 	.word	0x40010000
 80023ac:	40010800 	.word	0x40010800
 80023b0:	40010c00 	.word	0x40010c00
 80023b4:	40011000 	.word	0x40011000
 80023b8:	40011400 	.word	0x40011400
 80023bc:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80023c0:	4b0b      	ldr	r3, [pc, #44]	; (80023f0 <HAL_GPIO_Init+0x304>)
 80023c2:	68da      	ldr	r2, [r3, #12]
 80023c4:	69bb      	ldr	r3, [r7, #24]
 80023c6:	43db      	mvns	r3, r3
 80023c8:	4909      	ldr	r1, [pc, #36]	; (80023f0 <HAL_GPIO_Init+0x304>)
 80023ca:	4013      	ands	r3, r2
 80023cc:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80023ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023d0:	3301      	adds	r3, #1
 80023d2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80023d4:	683b      	ldr	r3, [r7, #0]
 80023d6:	681a      	ldr	r2, [r3, #0]
 80023d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023da:	fa22 f303 	lsr.w	r3, r2, r3
 80023de:	2b00      	cmp	r3, #0
 80023e0:	f47f ae8e 	bne.w	8002100 <HAL_GPIO_Init+0x14>
  }
}
 80023e4:	bf00      	nop
 80023e6:	bf00      	nop
 80023e8:	372c      	adds	r7, #44	; 0x2c
 80023ea:	46bd      	mov	sp, r7
 80023ec:	bc80      	pop	{r7}
 80023ee:	4770      	bx	lr
 80023f0:	40010400 	.word	0x40010400

080023f4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80023f4:	b480      	push	{r7}
 80023f6:	b083      	sub	sp, #12
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]
 80023fc:	460b      	mov	r3, r1
 80023fe:	807b      	strh	r3, [r7, #2]
 8002400:	4613      	mov	r3, r2
 8002402:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002404:	787b      	ldrb	r3, [r7, #1]
 8002406:	2b00      	cmp	r3, #0
 8002408:	d003      	beq.n	8002412 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800240a:	887a      	ldrh	r2, [r7, #2]
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002410:	e003      	b.n	800241a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002412:	887b      	ldrh	r3, [r7, #2]
 8002414:	041a      	lsls	r2, r3, #16
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	611a      	str	r2, [r3, #16]
}
 800241a:	bf00      	nop
 800241c:	370c      	adds	r7, #12
 800241e:	46bd      	mov	sp, r7
 8002420:	bc80      	pop	{r7}
 8002422:	4770      	bx	lr

08002424 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002424:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002426:	b08b      	sub	sp, #44	; 0x2c
 8002428:	af06      	add	r7, sp, #24
 800242a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	2b00      	cmp	r3, #0
 8002430:	d101      	bne.n	8002436 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002432:	2301      	movs	r3, #1
 8002434:	e0fd      	b.n	8002632 <HAL_PCD_Init+0x20e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 800243c:	b2db      	uxtb	r3, r3
 800243e:	2b00      	cmp	r3, #0
 8002440:	d106      	bne.n	8002450 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	2200      	movs	r2, #0
 8002446:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800244a:	6878      	ldr	r0, [r7, #4]
 800244c:	f007 fbc2 	bl	8009bd4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	2203      	movs	r2, #3
 8002454:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	4618      	mov	r0, r3
 800245e:	f003 f8b1 	bl	80055c4 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	603b      	str	r3, [r7, #0]
 8002468:	687e      	ldr	r6, [r7, #4]
 800246a:	466d      	mov	r5, sp
 800246c:	f106 0410 	add.w	r4, r6, #16
 8002470:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002472:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002474:	6823      	ldr	r3, [r4, #0]
 8002476:	602b      	str	r3, [r5, #0]
 8002478:	1d33      	adds	r3, r6, #4
 800247a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800247c:	6838      	ldr	r0, [r7, #0]
 800247e:	f003 f87b 	bl	8005578 <USB_CoreInit>
 8002482:	4603      	mov	r3, r0
 8002484:	2b00      	cmp	r3, #0
 8002486:	d005      	beq.n	8002494 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	2202      	movs	r2, #2
 800248c:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8002490:	2301      	movs	r3, #1
 8002492:	e0ce      	b.n	8002632 <HAL_PCD_Init+0x20e>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	2100      	movs	r1, #0
 800249a:	4618      	mov	r0, r3
 800249c:	f003 f8ac 	bl	80055f8 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80024a0:	2300      	movs	r3, #0
 80024a2:	73fb      	strb	r3, [r7, #15]
 80024a4:	e04c      	b.n	8002540 <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80024a6:	7bfb      	ldrb	r3, [r7, #15]
 80024a8:	6879      	ldr	r1, [r7, #4]
 80024aa:	1c5a      	adds	r2, r3, #1
 80024ac:	4613      	mov	r3, r2
 80024ae:	009b      	lsls	r3, r3, #2
 80024b0:	4413      	add	r3, r2
 80024b2:	00db      	lsls	r3, r3, #3
 80024b4:	440b      	add	r3, r1
 80024b6:	3301      	adds	r3, #1
 80024b8:	2201      	movs	r2, #1
 80024ba:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80024bc:	7bfb      	ldrb	r3, [r7, #15]
 80024be:	6879      	ldr	r1, [r7, #4]
 80024c0:	1c5a      	adds	r2, r3, #1
 80024c2:	4613      	mov	r3, r2
 80024c4:	009b      	lsls	r3, r3, #2
 80024c6:	4413      	add	r3, r2
 80024c8:	00db      	lsls	r3, r3, #3
 80024ca:	440b      	add	r3, r1
 80024cc:	7bfa      	ldrb	r2, [r7, #15]
 80024ce:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80024d0:	7bfa      	ldrb	r2, [r7, #15]
 80024d2:	7bfb      	ldrb	r3, [r7, #15]
 80024d4:	b298      	uxth	r0, r3
 80024d6:	6879      	ldr	r1, [r7, #4]
 80024d8:	4613      	mov	r3, r2
 80024da:	009b      	lsls	r3, r3, #2
 80024dc:	4413      	add	r3, r2
 80024de:	00db      	lsls	r3, r3, #3
 80024e0:	440b      	add	r3, r1
 80024e2:	3336      	adds	r3, #54	; 0x36
 80024e4:	4602      	mov	r2, r0
 80024e6:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80024e8:	7bfb      	ldrb	r3, [r7, #15]
 80024ea:	6879      	ldr	r1, [r7, #4]
 80024ec:	1c5a      	adds	r2, r3, #1
 80024ee:	4613      	mov	r3, r2
 80024f0:	009b      	lsls	r3, r3, #2
 80024f2:	4413      	add	r3, r2
 80024f4:	00db      	lsls	r3, r3, #3
 80024f6:	440b      	add	r3, r1
 80024f8:	3303      	adds	r3, #3
 80024fa:	2200      	movs	r2, #0
 80024fc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80024fe:	7bfa      	ldrb	r2, [r7, #15]
 8002500:	6879      	ldr	r1, [r7, #4]
 8002502:	4613      	mov	r3, r2
 8002504:	009b      	lsls	r3, r3, #2
 8002506:	4413      	add	r3, r2
 8002508:	00db      	lsls	r3, r3, #3
 800250a:	440b      	add	r3, r1
 800250c:	3338      	adds	r3, #56	; 0x38
 800250e:	2200      	movs	r2, #0
 8002510:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002512:	7bfa      	ldrb	r2, [r7, #15]
 8002514:	6879      	ldr	r1, [r7, #4]
 8002516:	4613      	mov	r3, r2
 8002518:	009b      	lsls	r3, r3, #2
 800251a:	4413      	add	r3, r2
 800251c:	00db      	lsls	r3, r3, #3
 800251e:	440b      	add	r3, r1
 8002520:	333c      	adds	r3, #60	; 0x3c
 8002522:	2200      	movs	r2, #0
 8002524:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002526:	7bfa      	ldrb	r2, [r7, #15]
 8002528:	6879      	ldr	r1, [r7, #4]
 800252a:	4613      	mov	r3, r2
 800252c:	009b      	lsls	r3, r3, #2
 800252e:	4413      	add	r3, r2
 8002530:	00db      	lsls	r3, r3, #3
 8002532:	440b      	add	r3, r1
 8002534:	3340      	adds	r3, #64	; 0x40
 8002536:	2200      	movs	r2, #0
 8002538:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800253a:	7bfb      	ldrb	r3, [r7, #15]
 800253c:	3301      	adds	r3, #1
 800253e:	73fb      	strb	r3, [r7, #15]
 8002540:	7bfa      	ldrb	r2, [r7, #15]
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	685b      	ldr	r3, [r3, #4]
 8002546:	429a      	cmp	r2, r3
 8002548:	d3ad      	bcc.n	80024a6 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800254a:	2300      	movs	r3, #0
 800254c:	73fb      	strb	r3, [r7, #15]
 800254e:	e044      	b.n	80025da <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002550:	7bfa      	ldrb	r2, [r7, #15]
 8002552:	6879      	ldr	r1, [r7, #4]
 8002554:	4613      	mov	r3, r2
 8002556:	009b      	lsls	r3, r3, #2
 8002558:	4413      	add	r3, r2
 800255a:	00db      	lsls	r3, r3, #3
 800255c:	440b      	add	r3, r1
 800255e:	f203 1369 	addw	r3, r3, #361	; 0x169
 8002562:	2200      	movs	r2, #0
 8002564:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002566:	7bfa      	ldrb	r2, [r7, #15]
 8002568:	6879      	ldr	r1, [r7, #4]
 800256a:	4613      	mov	r3, r2
 800256c:	009b      	lsls	r3, r3, #2
 800256e:	4413      	add	r3, r2
 8002570:	00db      	lsls	r3, r3, #3
 8002572:	440b      	add	r3, r1
 8002574:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002578:	7bfa      	ldrb	r2, [r7, #15]
 800257a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800257c:	7bfa      	ldrb	r2, [r7, #15]
 800257e:	6879      	ldr	r1, [r7, #4]
 8002580:	4613      	mov	r3, r2
 8002582:	009b      	lsls	r3, r3, #2
 8002584:	4413      	add	r3, r2
 8002586:	00db      	lsls	r3, r3, #3
 8002588:	440b      	add	r3, r1
 800258a:	f203 136b 	addw	r3, r3, #363	; 0x16b
 800258e:	2200      	movs	r2, #0
 8002590:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002592:	7bfa      	ldrb	r2, [r7, #15]
 8002594:	6879      	ldr	r1, [r7, #4]
 8002596:	4613      	mov	r3, r2
 8002598:	009b      	lsls	r3, r3, #2
 800259a:	4413      	add	r3, r2
 800259c:	00db      	lsls	r3, r3, #3
 800259e:	440b      	add	r3, r1
 80025a0:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 80025a4:	2200      	movs	r2, #0
 80025a6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80025a8:	7bfa      	ldrb	r2, [r7, #15]
 80025aa:	6879      	ldr	r1, [r7, #4]
 80025ac:	4613      	mov	r3, r2
 80025ae:	009b      	lsls	r3, r3, #2
 80025b0:	4413      	add	r3, r2
 80025b2:	00db      	lsls	r3, r3, #3
 80025b4:	440b      	add	r3, r1
 80025b6:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80025ba:	2200      	movs	r2, #0
 80025bc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80025be:	7bfa      	ldrb	r2, [r7, #15]
 80025c0:	6879      	ldr	r1, [r7, #4]
 80025c2:	4613      	mov	r3, r2
 80025c4:	009b      	lsls	r3, r3, #2
 80025c6:	4413      	add	r3, r2
 80025c8:	00db      	lsls	r3, r3, #3
 80025ca:	440b      	add	r3, r1
 80025cc:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80025d0:	2200      	movs	r2, #0
 80025d2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80025d4:	7bfb      	ldrb	r3, [r7, #15]
 80025d6:	3301      	adds	r3, #1
 80025d8:	73fb      	strb	r3, [r7, #15]
 80025da:	7bfa      	ldrb	r2, [r7, #15]
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	685b      	ldr	r3, [r3, #4]
 80025e0:	429a      	cmp	r2, r3
 80025e2:	d3b5      	bcc.n	8002550 <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	603b      	str	r3, [r7, #0]
 80025ea:	687e      	ldr	r6, [r7, #4]
 80025ec:	466d      	mov	r5, sp
 80025ee:	f106 0410 	add.w	r4, r6, #16
 80025f2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80025f4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80025f6:	6823      	ldr	r3, [r4, #0]
 80025f8:	602b      	str	r3, [r5, #0]
 80025fa:	1d33      	adds	r3, r6, #4
 80025fc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80025fe:	6838      	ldr	r0, [r7, #0]
 8002600:	f003 f806 	bl	8005610 <USB_DevInit>
 8002604:	4603      	mov	r3, r0
 8002606:	2b00      	cmp	r3, #0
 8002608:	d005      	beq.n	8002616 <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	2202      	movs	r2, #2
 800260e:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8002612:	2301      	movs	r3, #1
 8002614:	e00d      	b.n	8002632 <HAL_PCD_Init+0x20e>
  }

  hpcd->USB_Address = 0U;
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	2200      	movs	r2, #0
 800261a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	2201      	movs	r2, #1
 8002622:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	4618      	mov	r0, r3
 800262c:	f005 fcb8 	bl	8007fa0 <USB_DevDisconnect>

  return HAL_OK;
 8002630:	2300      	movs	r3, #0
}
 8002632:	4618      	mov	r0, r3
 8002634:	3714      	adds	r7, #20
 8002636:	46bd      	mov	sp, r7
 8002638:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800263a <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800263a:	b580      	push	{r7, lr}
 800263c:	b082      	sub	sp, #8
 800263e:	af00      	add	r7, sp, #0
 8002640:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002648:	2b01      	cmp	r3, #1
 800264a:	d101      	bne.n	8002650 <HAL_PCD_Start+0x16>
 800264c:	2302      	movs	r3, #2
 800264e:	e016      	b.n	800267e <HAL_PCD_Start+0x44>
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	2201      	movs	r2, #1
 8002654:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	4618      	mov	r0, r3
 800265e:	f002 ff9b 	bl	8005598 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8002662:	2101      	movs	r1, #1
 8002664:	6878      	ldr	r0, [r7, #4]
 8002666:	f007 fd28 	bl	800a0ba <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	4618      	mov	r0, r3
 8002670:	f005 fc8c 	bl	8007f8c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	2200      	movs	r2, #0
 8002678:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800267c:	2300      	movs	r3, #0
}
 800267e:	4618      	mov	r0, r3
 8002680:	3708      	adds	r7, #8
 8002682:	46bd      	mov	sp, r7
 8002684:	bd80      	pop	{r7, pc}

08002686 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002686:	b580      	push	{r7, lr}
 8002688:	b088      	sub	sp, #32
 800268a:	af00      	add	r7, sp, #0
 800268c:	6078      	str	r0, [r7, #4]
  uint16_t store_ep[8];
  uint8_t i;

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	4618      	mov	r0, r3
 8002694:	f005 fc8e 	bl	8007fb4 <USB_ReadInterrupts>
 8002698:	4603      	mov	r3, r0
 800269a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800269e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80026a2:	d102      	bne.n	80026aa <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 80026a4:	6878      	ldr	r0, [r7, #4]
 80026a6:	f000 fb5f 	bl	8002d68 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	4618      	mov	r0, r3
 80026b0:	f005 fc80 	bl	8007fb4 <USB_ReadInterrupts>
 80026b4:	4603      	mov	r3, r0
 80026b6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80026be:	d112      	bne.n	80026e6 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80026c8:	b29a      	uxth	r2, r3
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80026d2:	b292      	uxth	r2, r2
 80026d4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80026d8:	6878      	ldr	r0, [r7, #4]
 80026da:	f007 faf6 	bl	8009cca <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80026de:	2100      	movs	r1, #0
 80026e0:	6878      	ldr	r0, [r7, #4]
 80026e2:	f000 f923 	bl	800292c <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	4618      	mov	r0, r3
 80026ec:	f005 fc62 	bl	8007fb4 <USB_ReadInterrupts>
 80026f0:	4603      	mov	r3, r0
 80026f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80026f6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80026fa:	d10b      	bne.n	8002714 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002704:	b29a      	uxth	r2, r3
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800270e:	b292      	uxth	r2, r2
 8002710:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	4618      	mov	r0, r3
 800271a:	f005 fc4b 	bl	8007fb4 <USB_ReadInterrupts>
 800271e:	4603      	mov	r3, r0
 8002720:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002724:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002728:	d10b      	bne.n	8002742 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002732:	b29a      	uxth	r2, r3
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800273c:	b292      	uxth	r2, r2
 800273e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	4618      	mov	r0, r3
 8002748:	f005 fc34 	bl	8007fb4 <USB_ReadInterrupts>
 800274c:	4603      	mov	r3, r0
 800274e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002752:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002756:	d126      	bne.n	80027a6 <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002760:	b29a      	uxth	r2, r3
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f022 0204 	bic.w	r2, r2, #4
 800276a:	b292      	uxth	r2, r2
 800276c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002778:	b29a      	uxth	r2, r3
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f022 0208 	bic.w	r2, r2, #8
 8002782:	b292      	uxth	r2, r2
 8002784:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8002788:	6878      	ldr	r0, [r7, #4]
 800278a:	f007 fad7 	bl	8009d3c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002796:	b29a      	uxth	r2, r3
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80027a0:	b292      	uxth	r2, r2
 80027a2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	4618      	mov	r0, r3
 80027ac:	f005 fc02 	bl	8007fb4 <USB_ReadInterrupts>
 80027b0:	4603      	mov	r3, r0
 80027b2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80027b6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80027ba:	f040 8082 	bne.w	80028c2 <HAL_PCD_IRQHandler+0x23c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint register */
    for (i = 0U; i < 8U; i++)
 80027be:	2300      	movs	r3, #0
 80027c0:	77fb      	strb	r3, [r7, #31]
 80027c2:	e010      	b.n	80027e6 <HAL_PCD_IRQHandler+0x160>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	461a      	mov	r2, r3
 80027ca:	7ffb      	ldrb	r3, [r7, #31]
 80027cc:	009b      	lsls	r3, r3, #2
 80027ce:	441a      	add	r2, r3
 80027d0:	7ffb      	ldrb	r3, [r7, #31]
 80027d2:	8812      	ldrh	r2, [r2, #0]
 80027d4:	b292      	uxth	r2, r2
 80027d6:	005b      	lsls	r3, r3, #1
 80027d8:	3320      	adds	r3, #32
 80027da:	443b      	add	r3, r7
 80027dc:	f823 2c14 	strh.w	r2, [r3, #-20]
    for (i = 0U; i < 8U; i++)
 80027e0:	7ffb      	ldrb	r3, [r7, #31]
 80027e2:	3301      	adds	r3, #1
 80027e4:	77fb      	strb	r3, [r7, #31]
 80027e6:	7ffb      	ldrb	r3, [r7, #31]
 80027e8:	2b07      	cmp	r3, #7
 80027ea:	d9eb      	bls.n	80027c4 <HAL_PCD_IRQHandler+0x13e>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80027f4:	b29a      	uxth	r2, r3
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f042 0201 	orr.w	r2, r2, #1
 80027fe:	b292      	uxth	r2, r2
 8002800:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800280c:	b29a      	uxth	r2, r3
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f022 0201 	bic.w	r2, r2, #1
 8002816:	b292      	uxth	r2, r2
 8002818:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 800281c:	bf00      	nop
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002826:	b29b      	uxth	r3, r3
 8002828:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800282c:	2b00      	cmp	r3, #0
 800282e:	d0f6      	beq.n	800281e <HAL_PCD_IRQHandler+0x198>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002838:	b29a      	uxth	r2, r3
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002842:	b292      	uxth	r2, r2
 8002844:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8002848:	2300      	movs	r3, #0
 800284a:	77fb      	strb	r3, [r7, #31]
 800284c:	e00f      	b.n	800286e <HAL_PCD_IRQHandler+0x1e8>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 800284e:	7ffb      	ldrb	r3, [r7, #31]
 8002850:	687a      	ldr	r2, [r7, #4]
 8002852:	6812      	ldr	r2, [r2, #0]
 8002854:	4611      	mov	r1, r2
 8002856:	7ffa      	ldrb	r2, [r7, #31]
 8002858:	0092      	lsls	r2, r2, #2
 800285a:	440a      	add	r2, r1
 800285c:	005b      	lsls	r3, r3, #1
 800285e:	3320      	adds	r3, #32
 8002860:	443b      	add	r3, r7
 8002862:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 8002866:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8002868:	7ffb      	ldrb	r3, [r7, #31]
 800286a:	3301      	adds	r3, #1
 800286c:	77fb      	strb	r3, [r7, #31]
 800286e:	7ffb      	ldrb	r3, [r7, #31]
 8002870:	2b07      	cmp	r3, #7
 8002872:	d9ec      	bls.n	800284e <HAL_PCD_IRQHandler+0x1c8>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800287c:	b29a      	uxth	r2, r3
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f042 0208 	orr.w	r2, r2, #8
 8002886:	b292      	uxth	r2, r2
 8002888:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002894:	b29a      	uxth	r2, r3
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800289e:	b292      	uxth	r2, r2
 80028a0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80028ac:	b29a      	uxth	r2, r3
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f042 0204 	orr.w	r2, r2, #4
 80028b6:	b292      	uxth	r2, r2
 80028b8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 80028bc:	6878      	ldr	r0, [r7, #4]
 80028be:	f007 fa23 	bl	8009d08 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	4618      	mov	r0, r3
 80028c8:	f005 fb74 	bl	8007fb4 <USB_ReadInterrupts>
 80028cc:	4603      	mov	r3, r0
 80028ce:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80028d2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80028d6:	d10e      	bne.n	80028f6 <HAL_PCD_IRQHandler+0x270>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80028e0:	b29a      	uxth	r2, r3
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80028ea:	b292      	uxth	r2, r2
 80028ec:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 80028f0:	6878      	ldr	r0, [r7, #4]
 80028f2:	f007 f9dc 	bl	8009cae <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	4618      	mov	r0, r3
 80028fc:	f005 fb5a 	bl	8007fb4 <USB_ReadInterrupts>
 8002900:	4603      	mov	r3, r0
 8002902:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002906:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800290a:	d10b      	bne.n	8002924 <HAL_PCD_IRQHandler+0x29e>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002914:	b29a      	uxth	r2, r3
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800291e:	b292      	uxth	r2, r2
 8002920:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8002924:	bf00      	nop
 8002926:	3720      	adds	r7, #32
 8002928:	46bd      	mov	sp, r7
 800292a:	bd80      	pop	{r7, pc}

0800292c <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800292c:	b580      	push	{r7, lr}
 800292e:	b082      	sub	sp, #8
 8002930:	af00      	add	r7, sp, #0
 8002932:	6078      	str	r0, [r7, #4]
 8002934:	460b      	mov	r3, r1
 8002936:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800293e:	2b01      	cmp	r3, #1
 8002940:	d101      	bne.n	8002946 <HAL_PCD_SetAddress+0x1a>
 8002942:	2302      	movs	r3, #2
 8002944:	e013      	b.n	800296e <HAL_PCD_SetAddress+0x42>
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	2201      	movs	r2, #1
 800294a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	78fa      	ldrb	r2, [r7, #3]
 8002952:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	78fa      	ldrb	r2, [r7, #3]
 800295c:	4611      	mov	r1, r2
 800295e:	4618      	mov	r0, r3
 8002960:	f005 fb01 	bl	8007f66 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	2200      	movs	r2, #0
 8002968:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800296c:	2300      	movs	r3, #0
}
 800296e:	4618      	mov	r0, r3
 8002970:	3708      	adds	r7, #8
 8002972:	46bd      	mov	sp, r7
 8002974:	bd80      	pop	{r7, pc}

08002976 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002976:	b580      	push	{r7, lr}
 8002978:	b084      	sub	sp, #16
 800297a:	af00      	add	r7, sp, #0
 800297c:	6078      	str	r0, [r7, #4]
 800297e:	4608      	mov	r0, r1
 8002980:	4611      	mov	r1, r2
 8002982:	461a      	mov	r2, r3
 8002984:	4603      	mov	r3, r0
 8002986:	70fb      	strb	r3, [r7, #3]
 8002988:	460b      	mov	r3, r1
 800298a:	803b      	strh	r3, [r7, #0]
 800298c:	4613      	mov	r3, r2
 800298e:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002990:	2300      	movs	r3, #0
 8002992:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002994:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002998:	2b00      	cmp	r3, #0
 800299a:	da0e      	bge.n	80029ba <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800299c:	78fb      	ldrb	r3, [r7, #3]
 800299e:	f003 0307 	and.w	r3, r3, #7
 80029a2:	1c5a      	adds	r2, r3, #1
 80029a4:	4613      	mov	r3, r2
 80029a6:	009b      	lsls	r3, r3, #2
 80029a8:	4413      	add	r3, r2
 80029aa:	00db      	lsls	r3, r3, #3
 80029ac:	687a      	ldr	r2, [r7, #4]
 80029ae:	4413      	add	r3, r2
 80029b0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	2201      	movs	r2, #1
 80029b6:	705a      	strb	r2, [r3, #1]
 80029b8:	e00e      	b.n	80029d8 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80029ba:	78fb      	ldrb	r3, [r7, #3]
 80029bc:	f003 0207 	and.w	r2, r3, #7
 80029c0:	4613      	mov	r3, r2
 80029c2:	009b      	lsls	r3, r3, #2
 80029c4:	4413      	add	r3, r2
 80029c6:	00db      	lsls	r3, r3, #3
 80029c8:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80029cc:	687a      	ldr	r2, [r7, #4]
 80029ce:	4413      	add	r3, r2
 80029d0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	2200      	movs	r2, #0
 80029d6:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80029d8:	78fb      	ldrb	r3, [r7, #3]
 80029da:	f003 0307 	and.w	r3, r3, #7
 80029de:	b2da      	uxtb	r2, r3
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80029e4:	883a      	ldrh	r2, [r7, #0]
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	78ba      	ldrb	r2, [r7, #2]
 80029ee:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	785b      	ldrb	r3, [r3, #1]
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d004      	beq.n	8002a02 <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	781b      	ldrb	r3, [r3, #0]
 80029fc:	b29a      	uxth	r2, r3
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002a02:	78bb      	ldrb	r3, [r7, #2]
 8002a04:	2b02      	cmp	r3, #2
 8002a06:	d102      	bne.n	8002a0e <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	2200      	movs	r2, #0
 8002a0c:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002a14:	2b01      	cmp	r3, #1
 8002a16:	d101      	bne.n	8002a1c <HAL_PCD_EP_Open+0xa6>
 8002a18:	2302      	movs	r3, #2
 8002a1a:	e00e      	b.n	8002a3a <HAL_PCD_EP_Open+0xc4>
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	2201      	movs	r2, #1
 8002a20:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	68f9      	ldr	r1, [r7, #12]
 8002a2a:	4618      	mov	r0, r3
 8002a2c:	f002 fe10 	bl	8005650 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	2200      	movs	r2, #0
 8002a34:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8002a38:	7afb      	ldrb	r3, [r7, #11]
}
 8002a3a:	4618      	mov	r0, r3
 8002a3c:	3710      	adds	r7, #16
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	bd80      	pop	{r7, pc}

08002a42 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002a42:	b580      	push	{r7, lr}
 8002a44:	b084      	sub	sp, #16
 8002a46:	af00      	add	r7, sp, #0
 8002a48:	6078      	str	r0, [r7, #4]
 8002a4a:	460b      	mov	r3, r1
 8002a4c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002a4e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	da0e      	bge.n	8002a74 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002a56:	78fb      	ldrb	r3, [r7, #3]
 8002a58:	f003 0307 	and.w	r3, r3, #7
 8002a5c:	1c5a      	adds	r2, r3, #1
 8002a5e:	4613      	mov	r3, r2
 8002a60:	009b      	lsls	r3, r3, #2
 8002a62:	4413      	add	r3, r2
 8002a64:	00db      	lsls	r3, r3, #3
 8002a66:	687a      	ldr	r2, [r7, #4]
 8002a68:	4413      	add	r3, r2
 8002a6a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	2201      	movs	r2, #1
 8002a70:	705a      	strb	r2, [r3, #1]
 8002a72:	e00e      	b.n	8002a92 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002a74:	78fb      	ldrb	r3, [r7, #3]
 8002a76:	f003 0207 	and.w	r2, r3, #7
 8002a7a:	4613      	mov	r3, r2
 8002a7c:	009b      	lsls	r3, r3, #2
 8002a7e:	4413      	add	r3, r2
 8002a80:	00db      	lsls	r3, r3, #3
 8002a82:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002a86:	687a      	ldr	r2, [r7, #4]
 8002a88:	4413      	add	r3, r2
 8002a8a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	2200      	movs	r2, #0
 8002a90:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002a92:	78fb      	ldrb	r3, [r7, #3]
 8002a94:	f003 0307 	and.w	r3, r3, #7
 8002a98:	b2da      	uxtb	r2, r3
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002aa4:	2b01      	cmp	r3, #1
 8002aa6:	d101      	bne.n	8002aac <HAL_PCD_EP_Close+0x6a>
 8002aa8:	2302      	movs	r3, #2
 8002aaa:	e00e      	b.n	8002aca <HAL_PCD_EP_Close+0x88>
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	2201      	movs	r2, #1
 8002ab0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	68f9      	ldr	r1, [r7, #12]
 8002aba:	4618      	mov	r0, r3
 8002abc:	f003 f932 	bl	8005d24 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8002ac8:	2300      	movs	r3, #0
}
 8002aca:	4618      	mov	r0, r3
 8002acc:	3710      	adds	r7, #16
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	bd80      	pop	{r7, pc}

08002ad2 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002ad2:	b580      	push	{r7, lr}
 8002ad4:	b086      	sub	sp, #24
 8002ad6:	af00      	add	r7, sp, #0
 8002ad8:	60f8      	str	r0, [r7, #12]
 8002ada:	607a      	str	r2, [r7, #4]
 8002adc:	603b      	str	r3, [r7, #0]
 8002ade:	460b      	mov	r3, r1
 8002ae0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002ae2:	7afb      	ldrb	r3, [r7, #11]
 8002ae4:	f003 0207 	and.w	r2, r3, #7
 8002ae8:	4613      	mov	r3, r2
 8002aea:	009b      	lsls	r3, r3, #2
 8002aec:	4413      	add	r3, r2
 8002aee:	00db      	lsls	r3, r3, #3
 8002af0:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002af4:	68fa      	ldr	r2, [r7, #12]
 8002af6:	4413      	add	r3, r2
 8002af8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002afa:	697b      	ldr	r3, [r7, #20]
 8002afc:	687a      	ldr	r2, [r7, #4]
 8002afe:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002b00:	697b      	ldr	r3, [r7, #20]
 8002b02:	683a      	ldr	r2, [r7, #0]
 8002b04:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002b06:	697b      	ldr	r3, [r7, #20]
 8002b08:	2200      	movs	r2, #0
 8002b0a:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8002b0c:	697b      	ldr	r3, [r7, #20]
 8002b0e:	2200      	movs	r2, #0
 8002b10:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002b12:	7afb      	ldrb	r3, [r7, #11]
 8002b14:	f003 0307 	and.w	r3, r3, #7
 8002b18:	b2da      	uxtb	r2, r3
 8002b1a:	697b      	ldr	r3, [r7, #20]
 8002b1c:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002b1e:	7afb      	ldrb	r3, [r7, #11]
 8002b20:	f003 0307 	and.w	r3, r3, #7
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d106      	bne.n	8002b36 <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	6979      	ldr	r1, [r7, #20]
 8002b2e:	4618      	mov	r0, r3
 8002b30:	f003 fae4 	bl	80060fc <USB_EPStartXfer>
 8002b34:	e005      	b.n	8002b42 <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	6979      	ldr	r1, [r7, #20]
 8002b3c:	4618      	mov	r0, r3
 8002b3e:	f003 fadd 	bl	80060fc <USB_EPStartXfer>
  }

  return HAL_OK;
 8002b42:	2300      	movs	r3, #0
}
 8002b44:	4618      	mov	r0, r3
 8002b46:	3718      	adds	r7, #24
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	bd80      	pop	{r7, pc}

08002b4c <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002b4c:	b480      	push	{r7}
 8002b4e:	b083      	sub	sp, #12
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	6078      	str	r0, [r7, #4]
 8002b54:	460b      	mov	r3, r1
 8002b56:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002b58:	78fb      	ldrb	r3, [r7, #3]
 8002b5a:	f003 0207 	and.w	r2, r3, #7
 8002b5e:	6879      	ldr	r1, [r7, #4]
 8002b60:	4613      	mov	r3, r2
 8002b62:	009b      	lsls	r3, r3, #2
 8002b64:	4413      	add	r3, r2
 8002b66:	00db      	lsls	r3, r3, #3
 8002b68:	440b      	add	r3, r1
 8002b6a:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8002b6e:	681b      	ldr	r3, [r3, #0]
}
 8002b70:	4618      	mov	r0, r3
 8002b72:	370c      	adds	r7, #12
 8002b74:	46bd      	mov	sp, r7
 8002b76:	bc80      	pop	{r7}
 8002b78:	4770      	bx	lr

08002b7a <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002b7a:	b580      	push	{r7, lr}
 8002b7c:	b086      	sub	sp, #24
 8002b7e:	af00      	add	r7, sp, #0
 8002b80:	60f8      	str	r0, [r7, #12]
 8002b82:	607a      	str	r2, [r7, #4]
 8002b84:	603b      	str	r3, [r7, #0]
 8002b86:	460b      	mov	r3, r1
 8002b88:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002b8a:	7afb      	ldrb	r3, [r7, #11]
 8002b8c:	f003 0307 	and.w	r3, r3, #7
 8002b90:	1c5a      	adds	r2, r3, #1
 8002b92:	4613      	mov	r3, r2
 8002b94:	009b      	lsls	r3, r3, #2
 8002b96:	4413      	add	r3, r2
 8002b98:	00db      	lsls	r3, r3, #3
 8002b9a:	68fa      	ldr	r2, [r7, #12]
 8002b9c:	4413      	add	r3, r2
 8002b9e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002ba0:	697b      	ldr	r3, [r7, #20]
 8002ba2:	687a      	ldr	r2, [r7, #4]
 8002ba4:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002ba6:	697b      	ldr	r3, [r7, #20]
 8002ba8:	683a      	ldr	r2, [r7, #0]
 8002baa:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8002bac:	697b      	ldr	r3, [r7, #20]
 8002bae:	2201      	movs	r2, #1
 8002bb0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8002bb4:	697b      	ldr	r3, [r7, #20]
 8002bb6:	683a      	ldr	r2, [r7, #0]
 8002bb8:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8002bba:	697b      	ldr	r3, [r7, #20]
 8002bbc:	2200      	movs	r2, #0
 8002bbe:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8002bc0:	697b      	ldr	r3, [r7, #20]
 8002bc2:	2201      	movs	r2, #1
 8002bc4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002bc6:	7afb      	ldrb	r3, [r7, #11]
 8002bc8:	f003 0307 	and.w	r3, r3, #7
 8002bcc:	b2da      	uxtb	r2, r3
 8002bce:	697b      	ldr	r3, [r7, #20]
 8002bd0:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002bd2:	7afb      	ldrb	r3, [r7, #11]
 8002bd4:	f003 0307 	and.w	r3, r3, #7
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d106      	bne.n	8002bea <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	6979      	ldr	r1, [r7, #20]
 8002be2:	4618      	mov	r0, r3
 8002be4:	f003 fa8a 	bl	80060fc <USB_EPStartXfer>
 8002be8:	e005      	b.n	8002bf6 <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	6979      	ldr	r1, [r7, #20]
 8002bf0:	4618      	mov	r0, r3
 8002bf2:	f003 fa83 	bl	80060fc <USB_EPStartXfer>
  }

  return HAL_OK;
 8002bf6:	2300      	movs	r3, #0
}
 8002bf8:	4618      	mov	r0, r3
 8002bfa:	3718      	adds	r7, #24
 8002bfc:	46bd      	mov	sp, r7
 8002bfe:	bd80      	pop	{r7, pc}

08002c00 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002c00:	b580      	push	{r7, lr}
 8002c02:	b084      	sub	sp, #16
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	6078      	str	r0, [r7, #4]
 8002c08:	460b      	mov	r3, r1
 8002c0a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002c0c:	78fb      	ldrb	r3, [r7, #3]
 8002c0e:	f003 0207 	and.w	r2, r3, #7
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	685b      	ldr	r3, [r3, #4]
 8002c16:	429a      	cmp	r2, r3
 8002c18:	d901      	bls.n	8002c1e <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002c1a:	2301      	movs	r3, #1
 8002c1c:	e04c      	b.n	8002cb8 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002c1e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	da0e      	bge.n	8002c44 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002c26:	78fb      	ldrb	r3, [r7, #3]
 8002c28:	f003 0307 	and.w	r3, r3, #7
 8002c2c:	1c5a      	adds	r2, r3, #1
 8002c2e:	4613      	mov	r3, r2
 8002c30:	009b      	lsls	r3, r3, #2
 8002c32:	4413      	add	r3, r2
 8002c34:	00db      	lsls	r3, r3, #3
 8002c36:	687a      	ldr	r2, [r7, #4]
 8002c38:	4413      	add	r3, r2
 8002c3a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	2201      	movs	r2, #1
 8002c40:	705a      	strb	r2, [r3, #1]
 8002c42:	e00c      	b.n	8002c5e <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002c44:	78fa      	ldrb	r2, [r7, #3]
 8002c46:	4613      	mov	r3, r2
 8002c48:	009b      	lsls	r3, r3, #2
 8002c4a:	4413      	add	r3, r2
 8002c4c:	00db      	lsls	r3, r3, #3
 8002c4e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002c52:	687a      	ldr	r2, [r7, #4]
 8002c54:	4413      	add	r3, r2
 8002c56:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	2200      	movs	r2, #0
 8002c5c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	2201      	movs	r2, #1
 8002c62:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002c64:	78fb      	ldrb	r3, [r7, #3]
 8002c66:	f003 0307 	and.w	r3, r3, #7
 8002c6a:	b2da      	uxtb	r2, r3
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002c76:	2b01      	cmp	r3, #1
 8002c78:	d101      	bne.n	8002c7e <HAL_PCD_EP_SetStall+0x7e>
 8002c7a:	2302      	movs	r3, #2
 8002c7c:	e01c      	b.n	8002cb8 <HAL_PCD_EP_SetStall+0xb8>
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	2201      	movs	r2, #1
 8002c82:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	68f9      	ldr	r1, [r7, #12]
 8002c8c:	4618      	mov	r0, r3
 8002c8e:	f005 f86d 	bl	8007d6c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002c92:	78fb      	ldrb	r3, [r7, #3]
 8002c94:	f003 0307 	and.w	r3, r3, #7
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d108      	bne.n	8002cae <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681a      	ldr	r2, [r3, #0]
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8002ca6:	4619      	mov	r1, r3
 8002ca8:	4610      	mov	r0, r2
 8002caa:	f005 f992 	bl	8007fd2 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002cb6:	2300      	movs	r3, #0
}
 8002cb8:	4618      	mov	r0, r3
 8002cba:	3710      	adds	r7, #16
 8002cbc:	46bd      	mov	sp, r7
 8002cbe:	bd80      	pop	{r7, pc}

08002cc0 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	b084      	sub	sp, #16
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	6078      	str	r0, [r7, #4]
 8002cc8:	460b      	mov	r3, r1
 8002cca:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002ccc:	78fb      	ldrb	r3, [r7, #3]
 8002cce:	f003 020f 	and.w	r2, r3, #15
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	685b      	ldr	r3, [r3, #4]
 8002cd6:	429a      	cmp	r2, r3
 8002cd8:	d901      	bls.n	8002cde <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002cda:	2301      	movs	r3, #1
 8002cdc:	e040      	b.n	8002d60 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002cde:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	da0e      	bge.n	8002d04 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002ce6:	78fb      	ldrb	r3, [r7, #3]
 8002ce8:	f003 0307 	and.w	r3, r3, #7
 8002cec:	1c5a      	adds	r2, r3, #1
 8002cee:	4613      	mov	r3, r2
 8002cf0:	009b      	lsls	r3, r3, #2
 8002cf2:	4413      	add	r3, r2
 8002cf4:	00db      	lsls	r3, r3, #3
 8002cf6:	687a      	ldr	r2, [r7, #4]
 8002cf8:	4413      	add	r3, r2
 8002cfa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	2201      	movs	r2, #1
 8002d00:	705a      	strb	r2, [r3, #1]
 8002d02:	e00e      	b.n	8002d22 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002d04:	78fb      	ldrb	r3, [r7, #3]
 8002d06:	f003 0207 	and.w	r2, r3, #7
 8002d0a:	4613      	mov	r3, r2
 8002d0c:	009b      	lsls	r3, r3, #2
 8002d0e:	4413      	add	r3, r2
 8002d10:	00db      	lsls	r3, r3, #3
 8002d12:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002d16:	687a      	ldr	r2, [r7, #4]
 8002d18:	4413      	add	r3, r2
 8002d1a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	2200      	movs	r2, #0
 8002d20:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	2200      	movs	r2, #0
 8002d26:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002d28:	78fb      	ldrb	r3, [r7, #3]
 8002d2a:	f003 0307 	and.w	r3, r3, #7
 8002d2e:	b2da      	uxtb	r2, r3
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002d3a:	2b01      	cmp	r3, #1
 8002d3c:	d101      	bne.n	8002d42 <HAL_PCD_EP_ClrStall+0x82>
 8002d3e:	2302      	movs	r3, #2
 8002d40:	e00e      	b.n	8002d60 <HAL_PCD_EP_ClrStall+0xa0>
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	2201      	movs	r2, #1
 8002d46:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	68f9      	ldr	r1, [r7, #12]
 8002d50:	4618      	mov	r0, r3
 8002d52:	f005 f85b 	bl	8007e0c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	2200      	movs	r2, #0
 8002d5a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002d5e:	2300      	movs	r3, #0
}
 8002d60:	4618      	mov	r0, r3
 8002d62:	3710      	adds	r7, #16
 8002d64:	46bd      	mov	sp, r7
 8002d66:	bd80      	pop	{r7, pc}

08002d68 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	b08e      	sub	sp, #56	; 0x38
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002d70:	e2ec      	b.n	800334c <PCD_EP_ISR_Handler+0x5e4>
  {
    wIstr = hpcd->Instance->ISTR;
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002d7a:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8002d7c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002d7e:	b2db      	uxtb	r3, r3
 8002d80:	f003 030f 	and.w	r3, r3, #15
 8002d84:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 8002d88:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	f040 8161 	bne.w	8003054 <PCD_EP_ISR_Handler+0x2ec>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8002d92:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002d94:	f003 0310 	and.w	r3, r3, #16
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d152      	bne.n	8002e42 <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	881b      	ldrh	r3, [r3, #0]
 8002da2:	b29b      	uxth	r3, r3
 8002da4:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8002da8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002dac:	81fb      	strh	r3, [r7, #14]
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681a      	ldr	r2, [r3, #0]
 8002db2:	89fb      	ldrh	r3, [r7, #14]
 8002db4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002db8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002dbc:	b29b      	uxth	r3, r3
 8002dbe:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	3328      	adds	r3, #40	; 0x28
 8002dc4:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002dce:	b29b      	uxth	r3, r3
 8002dd0:	461a      	mov	r2, r3
 8002dd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dd4:	781b      	ldrb	r3, [r3, #0]
 8002dd6:	00db      	lsls	r3, r3, #3
 8002dd8:	4413      	add	r3, r2
 8002dda:	3302      	adds	r3, #2
 8002ddc:	005b      	lsls	r3, r3, #1
 8002dde:	687a      	ldr	r2, [r7, #4]
 8002de0:	6812      	ldr	r2, [r2, #0]
 8002de2:	4413      	add	r3, r2
 8002de4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002de8:	881b      	ldrh	r3, [r3, #0]
 8002dea:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002dee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002df0:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8002df2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002df4:	695a      	ldr	r2, [r3, #20]
 8002df6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002df8:	69db      	ldr	r3, [r3, #28]
 8002dfa:	441a      	add	r2, r3
 8002dfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dfe:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8002e00:	2100      	movs	r1, #0
 8002e02:	6878      	ldr	r0, [r7, #4]
 8002e04:	f006 ff39 	bl	8009c7a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002e0e:	b2db      	uxtb	r3, r3
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	f000 829b 	beq.w	800334c <PCD_EP_ISR_Handler+0x5e4>
 8002e16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e18:	699b      	ldr	r3, [r3, #24]
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	f040 8296 	bne.w	800334c <PCD_EP_ISR_Handler+0x5e4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002e26:	b2db      	uxtb	r3, r3
 8002e28:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002e2c:	b2da      	uxtb	r2, r3
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	b292      	uxth	r2, r2
 8002e34:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	2200      	movs	r2, #0
 8002e3c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002e40:	e284      	b.n	800334c <PCD_EP_ISR_Handler+0x5e4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002e48:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	881b      	ldrh	r3, [r3, #0]
 8002e50:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8002e52:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002e54:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d034      	beq.n	8002ec6 <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002e64:	b29b      	uxth	r3, r3
 8002e66:	461a      	mov	r2, r3
 8002e68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e6a:	781b      	ldrb	r3, [r3, #0]
 8002e6c:	00db      	lsls	r3, r3, #3
 8002e6e:	4413      	add	r3, r2
 8002e70:	3306      	adds	r3, #6
 8002e72:	005b      	lsls	r3, r3, #1
 8002e74:	687a      	ldr	r2, [r7, #4]
 8002e76:	6812      	ldr	r2, [r2, #0]
 8002e78:	4413      	add	r3, r2
 8002e7a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002e7e:	881b      	ldrh	r3, [r3, #0]
 8002e80:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002e84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e86:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	6818      	ldr	r0, [r3, #0]
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8002e92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e94:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8002e96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e98:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002e9a:	b29b      	uxth	r3, r3
 8002e9c:	f005 f8e9 	bl	8008072 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	881b      	ldrh	r3, [r3, #0]
 8002ea6:	b29a      	uxth	r2, r3
 8002ea8:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002eac:	4013      	ands	r3, r2
 8002eae:	823b      	strh	r3, [r7, #16]
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	8a3a      	ldrh	r2, [r7, #16]
 8002eb6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002eba:	b292      	uxth	r2, r2
 8002ebc:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8002ebe:	6878      	ldr	r0, [r7, #4]
 8002ec0:	f006 feae 	bl	8009c20 <HAL_PCD_SetupStageCallback>
 8002ec4:	e242      	b.n	800334c <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002ec6:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	f280 823e 	bge.w	800334c <PCD_EP_ISR_Handler+0x5e4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	881b      	ldrh	r3, [r3, #0]
 8002ed6:	b29a      	uxth	r2, r3
 8002ed8:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002edc:	4013      	ands	r3, r2
 8002ede:	83bb      	strh	r3, [r7, #28]
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	8bba      	ldrh	r2, [r7, #28]
 8002ee6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002eea:	b292      	uxth	r2, r2
 8002eec:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002ef6:	b29b      	uxth	r3, r3
 8002ef8:	461a      	mov	r2, r3
 8002efa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002efc:	781b      	ldrb	r3, [r3, #0]
 8002efe:	00db      	lsls	r3, r3, #3
 8002f00:	4413      	add	r3, r2
 8002f02:	3306      	adds	r3, #6
 8002f04:	005b      	lsls	r3, r3, #1
 8002f06:	687a      	ldr	r2, [r7, #4]
 8002f08:	6812      	ldr	r2, [r2, #0]
 8002f0a:	4413      	add	r3, r2
 8002f0c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002f10:	881b      	ldrh	r3, [r3, #0]
 8002f12:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002f16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f18:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8002f1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f1c:	69db      	ldr	r3, [r3, #28]
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d019      	beq.n	8002f56 <PCD_EP_ISR_Handler+0x1ee>
 8002f22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f24:	695b      	ldr	r3, [r3, #20]
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d015      	beq.n	8002f56 <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	6818      	ldr	r0, [r3, #0]
 8002f2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f30:	6959      	ldr	r1, [r3, #20]
 8002f32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f34:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8002f36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f38:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002f3a:	b29b      	uxth	r3, r3
 8002f3c:	f005 f899 	bl	8008072 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8002f40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f42:	695a      	ldr	r2, [r3, #20]
 8002f44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f46:	69db      	ldr	r3, [r3, #28]
 8002f48:	441a      	add	r2, r3
 8002f4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f4c:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8002f4e:	2100      	movs	r1, #0
 8002f50:	6878      	ldr	r0, [r7, #4]
 8002f52:	f006 fe77 	bl	8009c44 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	881b      	ldrh	r3, [r3, #0]
 8002f5c:	b29b      	uxth	r3, r3
 8002f5e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	f040 81f2 	bne.w	800334c <PCD_EP_ISR_Handler+0x5e4>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	61bb      	str	r3, [r7, #24]
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002f76:	b29b      	uxth	r3, r3
 8002f78:	461a      	mov	r2, r3
 8002f7a:	69bb      	ldr	r3, [r7, #24]
 8002f7c:	4413      	add	r3, r2
 8002f7e:	61bb      	str	r3, [r7, #24]
 8002f80:	69bb      	ldr	r3, [r7, #24]
 8002f82:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002f86:	617b      	str	r3, [r7, #20]
 8002f88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f8a:	691b      	ldr	r3, [r3, #16]
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d112      	bne.n	8002fb6 <PCD_EP_ISR_Handler+0x24e>
 8002f90:	697b      	ldr	r3, [r7, #20]
 8002f92:	881b      	ldrh	r3, [r3, #0]
 8002f94:	b29b      	uxth	r3, r3
 8002f96:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002f9a:	b29a      	uxth	r2, r3
 8002f9c:	697b      	ldr	r3, [r7, #20]
 8002f9e:	801a      	strh	r2, [r3, #0]
 8002fa0:	697b      	ldr	r3, [r7, #20]
 8002fa2:	881b      	ldrh	r3, [r3, #0]
 8002fa4:	b29b      	uxth	r3, r3
 8002fa6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002faa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002fae:	b29a      	uxth	r2, r3
 8002fb0:	697b      	ldr	r3, [r7, #20]
 8002fb2:	801a      	strh	r2, [r3, #0]
 8002fb4:	e02f      	b.n	8003016 <PCD_EP_ISR_Handler+0x2ae>
 8002fb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fb8:	691b      	ldr	r3, [r3, #16]
 8002fba:	2b3e      	cmp	r3, #62	; 0x3e
 8002fbc:	d813      	bhi.n	8002fe6 <PCD_EP_ISR_Handler+0x27e>
 8002fbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fc0:	691b      	ldr	r3, [r3, #16]
 8002fc2:	085b      	lsrs	r3, r3, #1
 8002fc4:	633b      	str	r3, [r7, #48]	; 0x30
 8002fc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fc8:	691b      	ldr	r3, [r3, #16]
 8002fca:	f003 0301 	and.w	r3, r3, #1
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d002      	beq.n	8002fd8 <PCD_EP_ISR_Handler+0x270>
 8002fd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fd4:	3301      	adds	r3, #1
 8002fd6:	633b      	str	r3, [r7, #48]	; 0x30
 8002fd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fda:	b29b      	uxth	r3, r3
 8002fdc:	029b      	lsls	r3, r3, #10
 8002fde:	b29a      	uxth	r2, r3
 8002fe0:	697b      	ldr	r3, [r7, #20]
 8002fe2:	801a      	strh	r2, [r3, #0]
 8002fe4:	e017      	b.n	8003016 <PCD_EP_ISR_Handler+0x2ae>
 8002fe6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fe8:	691b      	ldr	r3, [r3, #16]
 8002fea:	095b      	lsrs	r3, r3, #5
 8002fec:	633b      	str	r3, [r7, #48]	; 0x30
 8002fee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ff0:	691b      	ldr	r3, [r3, #16]
 8002ff2:	f003 031f 	and.w	r3, r3, #31
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d102      	bne.n	8003000 <PCD_EP_ISR_Handler+0x298>
 8002ffa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ffc:	3b01      	subs	r3, #1
 8002ffe:	633b      	str	r3, [r7, #48]	; 0x30
 8003000:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003002:	b29b      	uxth	r3, r3
 8003004:	029b      	lsls	r3, r3, #10
 8003006:	b29b      	uxth	r3, r3
 8003008:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800300c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003010:	b29a      	uxth	r2, r3
 8003012:	697b      	ldr	r3, [r7, #20]
 8003014:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	881b      	ldrh	r3, [r3, #0]
 800301c:	b29b      	uxth	r3, r3
 800301e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003022:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003026:	827b      	strh	r3, [r7, #18]
 8003028:	8a7b      	ldrh	r3, [r7, #18]
 800302a:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800302e:	827b      	strh	r3, [r7, #18]
 8003030:	8a7b      	ldrh	r3, [r7, #18]
 8003032:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003036:	827b      	strh	r3, [r7, #18]
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681a      	ldr	r2, [r3, #0]
 800303c:	8a7b      	ldrh	r3, [r7, #18]
 800303e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003042:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003046:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800304a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800304e:	b29b      	uxth	r3, r3
 8003050:	8013      	strh	r3, [r2, #0]
 8003052:	e17b      	b.n	800334c <PCD_EP_ISR_Handler+0x5e4>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	461a      	mov	r2, r3
 800305a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800305e:	009b      	lsls	r3, r3, #2
 8003060:	4413      	add	r3, r2
 8003062:	881b      	ldrh	r3, [r3, #0]
 8003064:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003066:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800306a:	2b00      	cmp	r3, #0
 800306c:	f280 80ea 	bge.w	8003244 <PCD_EP_ISR_Handler+0x4dc>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	461a      	mov	r2, r3
 8003076:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800307a:	009b      	lsls	r3, r3, #2
 800307c:	4413      	add	r3, r2
 800307e:	881b      	ldrh	r3, [r3, #0]
 8003080:	b29a      	uxth	r2, r3
 8003082:	f640 738f 	movw	r3, #3983	; 0xf8f
 8003086:	4013      	ands	r3, r2
 8003088:	853b      	strh	r3, [r7, #40]	; 0x28
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	461a      	mov	r2, r3
 8003090:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003094:	009b      	lsls	r3, r3, #2
 8003096:	4413      	add	r3, r2
 8003098:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800309a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800309e:	b292      	uxth	r2, r2
 80030a0:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80030a2:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 80030a6:	4613      	mov	r3, r2
 80030a8:	009b      	lsls	r3, r3, #2
 80030aa:	4413      	add	r3, r2
 80030ac:	00db      	lsls	r3, r3, #3
 80030ae:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80030b2:	687a      	ldr	r2, [r7, #4]
 80030b4:	4413      	add	r3, r2
 80030b6:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 80030b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030ba:	7b1b      	ldrb	r3, [r3, #12]
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d122      	bne.n	8003106 <PCD_EP_ISR_Handler+0x39e>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80030c8:	b29b      	uxth	r3, r3
 80030ca:	461a      	mov	r2, r3
 80030cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030ce:	781b      	ldrb	r3, [r3, #0]
 80030d0:	00db      	lsls	r3, r3, #3
 80030d2:	4413      	add	r3, r2
 80030d4:	3306      	adds	r3, #6
 80030d6:	005b      	lsls	r3, r3, #1
 80030d8:	687a      	ldr	r2, [r7, #4]
 80030da:	6812      	ldr	r2, [r2, #0]
 80030dc:	4413      	add	r3, r2
 80030de:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80030e2:	881b      	ldrh	r3, [r3, #0]
 80030e4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80030e8:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 80030ea:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	f000 8087 	beq.w	8003200 <PCD_EP_ISR_Handler+0x498>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	6818      	ldr	r0, [r3, #0]
 80030f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030f8:	6959      	ldr	r1, [r3, #20]
 80030fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030fc:	88da      	ldrh	r2, [r3, #6]
 80030fe:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003100:	f004 ffb7 	bl	8008072 <USB_ReadPMA>
 8003104:	e07c      	b.n	8003200 <PCD_EP_ISR_Handler+0x498>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8003106:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003108:	78db      	ldrb	r3, [r3, #3]
 800310a:	2b02      	cmp	r3, #2
 800310c:	d108      	bne.n	8003120 <PCD_EP_ISR_Handler+0x3b8>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 800310e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003110:	461a      	mov	r2, r3
 8003112:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003114:	6878      	ldr	r0, [r7, #4]
 8003116:	f000 f927 	bl	8003368 <HAL_PCD_EP_DB_Receive>
 800311a:	4603      	mov	r3, r0
 800311c:	86fb      	strh	r3, [r7, #54]	; 0x36
 800311e:	e06f      	b.n	8003200 <PCD_EP_ISR_Handler+0x498>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	461a      	mov	r2, r3
 8003126:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003128:	781b      	ldrb	r3, [r3, #0]
 800312a:	009b      	lsls	r3, r3, #2
 800312c:	4413      	add	r3, r2
 800312e:	881b      	ldrh	r3, [r3, #0]
 8003130:	b29b      	uxth	r3, r3
 8003132:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003136:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800313a:	847b      	strh	r3, [r7, #34]	; 0x22
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	461a      	mov	r2, r3
 8003142:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003144:	781b      	ldrb	r3, [r3, #0]
 8003146:	009b      	lsls	r3, r3, #2
 8003148:	441a      	add	r2, r3
 800314a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800314c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003150:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003154:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003158:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800315c:	b29b      	uxth	r3, r3
 800315e:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	461a      	mov	r2, r3
 8003166:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003168:	781b      	ldrb	r3, [r3, #0]
 800316a:	009b      	lsls	r3, r3, #2
 800316c:	4413      	add	r3, r2
 800316e:	881b      	ldrh	r3, [r3, #0]
 8003170:	b29b      	uxth	r3, r3
 8003172:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003176:	2b00      	cmp	r3, #0
 8003178:	d021      	beq.n	80031be <PCD_EP_ISR_Handler+0x456>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003182:	b29b      	uxth	r3, r3
 8003184:	461a      	mov	r2, r3
 8003186:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003188:	781b      	ldrb	r3, [r3, #0]
 800318a:	00db      	lsls	r3, r3, #3
 800318c:	4413      	add	r3, r2
 800318e:	3302      	adds	r3, #2
 8003190:	005b      	lsls	r3, r3, #1
 8003192:	687a      	ldr	r2, [r7, #4]
 8003194:	6812      	ldr	r2, [r2, #0]
 8003196:	4413      	add	r3, r2
 8003198:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800319c:	881b      	ldrh	r3, [r3, #0]
 800319e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80031a2:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 80031a4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d02a      	beq.n	8003200 <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	6818      	ldr	r0, [r3, #0]
 80031ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031b0:	6959      	ldr	r1, [r3, #20]
 80031b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031b4:	891a      	ldrh	r2, [r3, #8]
 80031b6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80031b8:	f004 ff5b 	bl	8008072 <USB_ReadPMA>
 80031bc:	e020      	b.n	8003200 <PCD_EP_ISR_Handler+0x498>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80031c6:	b29b      	uxth	r3, r3
 80031c8:	461a      	mov	r2, r3
 80031ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031cc:	781b      	ldrb	r3, [r3, #0]
 80031ce:	00db      	lsls	r3, r3, #3
 80031d0:	4413      	add	r3, r2
 80031d2:	3306      	adds	r3, #6
 80031d4:	005b      	lsls	r3, r3, #1
 80031d6:	687a      	ldr	r2, [r7, #4]
 80031d8:	6812      	ldr	r2, [r2, #0]
 80031da:	4413      	add	r3, r2
 80031dc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80031e0:	881b      	ldrh	r3, [r3, #0]
 80031e2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80031e6:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 80031e8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d008      	beq.n	8003200 <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	6818      	ldr	r0, [r3, #0]
 80031f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031f4:	6959      	ldr	r1, [r3, #20]
 80031f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031f8:	895a      	ldrh	r2, [r3, #10]
 80031fa:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80031fc:	f004 ff39 	bl	8008072 <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8003200:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003202:	69da      	ldr	r2, [r3, #28]
 8003204:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003206:	441a      	add	r2, r3
 8003208:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800320a:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 800320c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800320e:	695a      	ldr	r2, [r3, #20]
 8003210:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003212:	441a      	add	r2, r3
 8003214:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003216:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8003218:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800321a:	699b      	ldr	r3, [r3, #24]
 800321c:	2b00      	cmp	r3, #0
 800321e:	d004      	beq.n	800322a <PCD_EP_ISR_Handler+0x4c2>
 8003220:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8003222:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003224:	691b      	ldr	r3, [r3, #16]
 8003226:	429a      	cmp	r2, r3
 8003228:	d206      	bcs.n	8003238 <PCD_EP_ISR_Handler+0x4d0>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 800322a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800322c:	781b      	ldrb	r3, [r3, #0]
 800322e:	4619      	mov	r1, r3
 8003230:	6878      	ldr	r0, [r7, #4]
 8003232:	f006 fd07 	bl	8009c44 <HAL_PCD_DataOutStageCallback>
 8003236:	e005      	b.n	8003244 <PCD_EP_ISR_Handler+0x4dc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800323e:	4618      	mov	r0, r3
 8003240:	f002 ff5c 	bl	80060fc <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8003244:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003246:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800324a:	2b00      	cmp	r3, #0
 800324c:	d07e      	beq.n	800334c <PCD_EP_ISR_Handler+0x5e4>
      {
        ep = &hpcd->IN_ep[epindex];
 800324e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003252:	1c5a      	adds	r2, r3, #1
 8003254:	4613      	mov	r3, r2
 8003256:	009b      	lsls	r3, r3, #2
 8003258:	4413      	add	r3, r2
 800325a:	00db      	lsls	r3, r3, #3
 800325c:	687a      	ldr	r2, [r7, #4]
 800325e:	4413      	add	r3, r2
 8003260:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	461a      	mov	r2, r3
 8003268:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800326c:	009b      	lsls	r3, r3, #2
 800326e:	4413      	add	r3, r2
 8003270:	881b      	ldrh	r3, [r3, #0]
 8003272:	b29b      	uxth	r3, r3
 8003274:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8003278:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800327c:	843b      	strh	r3, [r7, #32]
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	461a      	mov	r2, r3
 8003284:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003288:	009b      	lsls	r3, r3, #2
 800328a:	441a      	add	r2, r3
 800328c:	8c3b      	ldrh	r3, [r7, #32]
 800328e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003292:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003296:	b29b      	uxth	r3, r3
 8003298:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk/isoc transaction Bulk Single Buffer Transaction */
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 800329a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800329c:	78db      	ldrb	r3, [r3, #3]
 800329e:	2b03      	cmp	r3, #3
 80032a0:	d00c      	beq.n	80032bc <PCD_EP_ISR_Handler+0x554>
 80032a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032a4:	78db      	ldrb	r3, [r3, #3]
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d008      	beq.n	80032bc <PCD_EP_ISR_Handler+0x554>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 80032aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032ac:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 80032ae:	2b02      	cmp	r3, #2
 80032b0:	d146      	bne.n	8003340 <PCD_EP_ISR_Handler+0x5d8>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 80032b2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80032b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d141      	bne.n	8003340 <PCD_EP_ISR_Handler+0x5d8>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80032c4:	b29b      	uxth	r3, r3
 80032c6:	461a      	mov	r2, r3
 80032c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032ca:	781b      	ldrb	r3, [r3, #0]
 80032cc:	00db      	lsls	r3, r3, #3
 80032ce:	4413      	add	r3, r2
 80032d0:	3302      	adds	r3, #2
 80032d2:	005b      	lsls	r3, r3, #1
 80032d4:	687a      	ldr	r2, [r7, #4]
 80032d6:	6812      	ldr	r2, [r2, #0]
 80032d8:	4413      	add	r3, r2
 80032da:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80032de:	881b      	ldrh	r3, [r3, #0]
 80032e0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80032e4:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 80032e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032e8:	699a      	ldr	r2, [r3, #24]
 80032ea:	8bfb      	ldrh	r3, [r7, #30]
 80032ec:	429a      	cmp	r2, r3
 80032ee:	d906      	bls.n	80032fe <PCD_EP_ISR_Handler+0x596>
          {
            ep->xfer_len -= TxByteNbre;
 80032f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032f2:	699a      	ldr	r2, [r3, #24]
 80032f4:	8bfb      	ldrh	r3, [r7, #30]
 80032f6:	1ad2      	subs	r2, r2, r3
 80032f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032fa:	619a      	str	r2, [r3, #24]
 80032fc:	e002      	b.n	8003304 <PCD_EP_ISR_Handler+0x59c>
          }
          else
          {
            ep->xfer_len = 0U;
 80032fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003300:	2200      	movs	r2, #0
 8003302:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 8003304:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003306:	699b      	ldr	r3, [r3, #24]
 8003308:	2b00      	cmp	r3, #0
 800330a:	d106      	bne.n	800331a <PCD_EP_ISR_Handler+0x5b2>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800330c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800330e:	781b      	ldrb	r3, [r3, #0]
 8003310:	4619      	mov	r1, r3
 8003312:	6878      	ldr	r0, [r7, #4]
 8003314:	f006 fcb1 	bl	8009c7a <HAL_PCD_DataInStageCallback>
 8003318:	e018      	b.n	800334c <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 800331a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800331c:	695a      	ldr	r2, [r3, #20]
 800331e:	8bfb      	ldrh	r3, [r7, #30]
 8003320:	441a      	add	r2, r3
 8003322:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003324:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 8003326:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003328:	69da      	ldr	r2, [r3, #28]
 800332a:	8bfb      	ldrh	r3, [r7, #30]
 800332c:	441a      	add	r2, r3
 800332e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003330:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003338:	4618      	mov	r0, r3
 800333a:	f002 fedf 	bl	80060fc <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 800333e:	e005      	b.n	800334c <PCD_EP_ISR_Handler+0x5e4>
          }
        }
        /* Double Buffer Iso/bulk IN (bulk transfer Len > Ep_Mps) */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8003340:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003342:	461a      	mov	r2, r3
 8003344:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003346:	6878      	ldr	r0, [r7, #4]
 8003348:	f000 f91b 	bl	8003582 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003354:	b29b      	uxth	r3, r3
 8003356:	b21b      	sxth	r3, r3
 8003358:	2b00      	cmp	r3, #0
 800335a:	f6ff ad0a 	blt.w	8002d72 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 800335e:	2300      	movs	r3, #0
}
 8003360:	4618      	mov	r0, r3
 8003362:	3738      	adds	r7, #56	; 0x38
 8003364:	46bd      	mov	sp, r7
 8003366:	bd80      	pop	{r7, pc}

08003368 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8003368:	b580      	push	{r7, lr}
 800336a:	b088      	sub	sp, #32
 800336c:	af00      	add	r7, sp, #0
 800336e:	60f8      	str	r0, [r7, #12]
 8003370:	60b9      	str	r1, [r7, #8]
 8003372:	4613      	mov	r3, r2
 8003374:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003376:	88fb      	ldrh	r3, [r7, #6]
 8003378:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800337c:	2b00      	cmp	r3, #0
 800337e:	d07e      	beq.n	800347e <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003388:	b29b      	uxth	r3, r3
 800338a:	461a      	mov	r2, r3
 800338c:	68bb      	ldr	r3, [r7, #8]
 800338e:	781b      	ldrb	r3, [r3, #0]
 8003390:	00db      	lsls	r3, r3, #3
 8003392:	4413      	add	r3, r2
 8003394:	3302      	adds	r3, #2
 8003396:	005b      	lsls	r3, r3, #1
 8003398:	68fa      	ldr	r2, [r7, #12]
 800339a:	6812      	ldr	r2, [r2, #0]
 800339c:	4413      	add	r3, r2
 800339e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80033a2:	881b      	ldrh	r3, [r3, #0]
 80033a4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80033a8:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80033aa:	68bb      	ldr	r3, [r7, #8]
 80033ac:	699a      	ldr	r2, [r3, #24]
 80033ae:	8b7b      	ldrh	r3, [r7, #26]
 80033b0:	429a      	cmp	r2, r3
 80033b2:	d306      	bcc.n	80033c2 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 80033b4:	68bb      	ldr	r3, [r7, #8]
 80033b6:	699a      	ldr	r2, [r3, #24]
 80033b8:	8b7b      	ldrh	r3, [r7, #26]
 80033ba:	1ad2      	subs	r2, r2, r3
 80033bc:	68bb      	ldr	r3, [r7, #8]
 80033be:	619a      	str	r2, [r3, #24]
 80033c0:	e002      	b.n	80033c8 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 80033c2:	68bb      	ldr	r3, [r7, #8]
 80033c4:	2200      	movs	r2, #0
 80033c6:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80033c8:	68bb      	ldr	r3, [r7, #8]
 80033ca:	699b      	ldr	r3, [r3, #24]
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d123      	bne.n	8003418 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	461a      	mov	r2, r3
 80033d6:	68bb      	ldr	r3, [r7, #8]
 80033d8:	781b      	ldrb	r3, [r3, #0]
 80033da:	009b      	lsls	r3, r3, #2
 80033dc:	4413      	add	r3, r2
 80033de:	881b      	ldrh	r3, [r3, #0]
 80033e0:	b29b      	uxth	r3, r3
 80033e2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80033e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80033ea:	833b      	strh	r3, [r7, #24]
 80033ec:	8b3b      	ldrh	r3, [r7, #24]
 80033ee:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80033f2:	833b      	strh	r3, [r7, #24]
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	461a      	mov	r2, r3
 80033fa:	68bb      	ldr	r3, [r7, #8]
 80033fc:	781b      	ldrb	r3, [r3, #0]
 80033fe:	009b      	lsls	r3, r3, #2
 8003400:	441a      	add	r2, r3
 8003402:	8b3b      	ldrh	r3, [r7, #24]
 8003404:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003408:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800340c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003410:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003414:	b29b      	uxth	r3, r3
 8003416:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003418:	88fb      	ldrh	r3, [r7, #6]
 800341a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800341e:	2b00      	cmp	r3, #0
 8003420:	d01f      	beq.n	8003462 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	461a      	mov	r2, r3
 8003428:	68bb      	ldr	r3, [r7, #8]
 800342a:	781b      	ldrb	r3, [r3, #0]
 800342c:	009b      	lsls	r3, r3, #2
 800342e:	4413      	add	r3, r2
 8003430:	881b      	ldrh	r3, [r3, #0]
 8003432:	b29b      	uxth	r3, r3
 8003434:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003438:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800343c:	82fb      	strh	r3, [r7, #22]
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	461a      	mov	r2, r3
 8003444:	68bb      	ldr	r3, [r7, #8]
 8003446:	781b      	ldrb	r3, [r3, #0]
 8003448:	009b      	lsls	r3, r3, #2
 800344a:	441a      	add	r2, r3
 800344c:	8afb      	ldrh	r3, [r7, #22]
 800344e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003452:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003456:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800345a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800345e:	b29b      	uxth	r3, r3
 8003460:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8003462:	8b7b      	ldrh	r3, [r7, #26]
 8003464:	2b00      	cmp	r3, #0
 8003466:	f000 8087 	beq.w	8003578 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	6818      	ldr	r0, [r3, #0]
 800346e:	68bb      	ldr	r3, [r7, #8]
 8003470:	6959      	ldr	r1, [r3, #20]
 8003472:	68bb      	ldr	r3, [r7, #8]
 8003474:	891a      	ldrh	r2, [r3, #8]
 8003476:	8b7b      	ldrh	r3, [r7, #26]
 8003478:	f004 fdfb 	bl	8008072 <USB_ReadPMA>
 800347c:	e07c      	b.n	8003578 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003486:	b29b      	uxth	r3, r3
 8003488:	461a      	mov	r2, r3
 800348a:	68bb      	ldr	r3, [r7, #8]
 800348c:	781b      	ldrb	r3, [r3, #0]
 800348e:	00db      	lsls	r3, r3, #3
 8003490:	4413      	add	r3, r2
 8003492:	3306      	adds	r3, #6
 8003494:	005b      	lsls	r3, r3, #1
 8003496:	68fa      	ldr	r2, [r7, #12]
 8003498:	6812      	ldr	r2, [r2, #0]
 800349a:	4413      	add	r3, r2
 800349c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80034a0:	881b      	ldrh	r3, [r3, #0]
 80034a2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80034a6:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80034a8:	68bb      	ldr	r3, [r7, #8]
 80034aa:	699a      	ldr	r2, [r3, #24]
 80034ac:	8b7b      	ldrh	r3, [r7, #26]
 80034ae:	429a      	cmp	r2, r3
 80034b0:	d306      	bcc.n	80034c0 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 80034b2:	68bb      	ldr	r3, [r7, #8]
 80034b4:	699a      	ldr	r2, [r3, #24]
 80034b6:	8b7b      	ldrh	r3, [r7, #26]
 80034b8:	1ad2      	subs	r2, r2, r3
 80034ba:	68bb      	ldr	r3, [r7, #8]
 80034bc:	619a      	str	r2, [r3, #24]
 80034be:	e002      	b.n	80034c6 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 80034c0:	68bb      	ldr	r3, [r7, #8]
 80034c2:	2200      	movs	r2, #0
 80034c4:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80034c6:	68bb      	ldr	r3, [r7, #8]
 80034c8:	699b      	ldr	r3, [r3, #24]
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d123      	bne.n	8003516 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	461a      	mov	r2, r3
 80034d4:	68bb      	ldr	r3, [r7, #8]
 80034d6:	781b      	ldrb	r3, [r3, #0]
 80034d8:	009b      	lsls	r3, r3, #2
 80034da:	4413      	add	r3, r2
 80034dc:	881b      	ldrh	r3, [r3, #0]
 80034de:	b29b      	uxth	r3, r3
 80034e0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80034e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80034e8:	83fb      	strh	r3, [r7, #30]
 80034ea:	8bfb      	ldrh	r3, [r7, #30]
 80034ec:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80034f0:	83fb      	strh	r3, [r7, #30]
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	461a      	mov	r2, r3
 80034f8:	68bb      	ldr	r3, [r7, #8]
 80034fa:	781b      	ldrb	r3, [r3, #0]
 80034fc:	009b      	lsls	r3, r3, #2
 80034fe:	441a      	add	r2, r3
 8003500:	8bfb      	ldrh	r3, [r7, #30]
 8003502:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003506:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800350a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800350e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003512:	b29b      	uxth	r3, r3
 8003514:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8003516:	88fb      	ldrh	r3, [r7, #6]
 8003518:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800351c:	2b00      	cmp	r3, #0
 800351e:	d11f      	bne.n	8003560 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	461a      	mov	r2, r3
 8003526:	68bb      	ldr	r3, [r7, #8]
 8003528:	781b      	ldrb	r3, [r3, #0]
 800352a:	009b      	lsls	r3, r3, #2
 800352c:	4413      	add	r3, r2
 800352e:	881b      	ldrh	r3, [r3, #0]
 8003530:	b29b      	uxth	r3, r3
 8003532:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003536:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800353a:	83bb      	strh	r3, [r7, #28]
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	461a      	mov	r2, r3
 8003542:	68bb      	ldr	r3, [r7, #8]
 8003544:	781b      	ldrb	r3, [r3, #0]
 8003546:	009b      	lsls	r3, r3, #2
 8003548:	441a      	add	r2, r3
 800354a:	8bbb      	ldrh	r3, [r7, #28]
 800354c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003550:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003554:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003558:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800355c:	b29b      	uxth	r3, r3
 800355e:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8003560:	8b7b      	ldrh	r3, [r7, #26]
 8003562:	2b00      	cmp	r3, #0
 8003564:	d008      	beq.n	8003578 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	6818      	ldr	r0, [r3, #0]
 800356a:	68bb      	ldr	r3, [r7, #8]
 800356c:	6959      	ldr	r1, [r3, #20]
 800356e:	68bb      	ldr	r3, [r7, #8]
 8003570:	895a      	ldrh	r2, [r3, #10]
 8003572:	8b7b      	ldrh	r3, [r7, #26]
 8003574:	f004 fd7d 	bl	8008072 <USB_ReadPMA>
    }
  }

  return count;
 8003578:	8b7b      	ldrh	r3, [r7, #26]
}
 800357a:	4618      	mov	r0, r3
 800357c:	3720      	adds	r7, #32
 800357e:	46bd      	mov	sp, r7
 8003580:	bd80      	pop	{r7, pc}

08003582 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8003582:	b580      	push	{r7, lr}
 8003584:	b0a2      	sub	sp, #136	; 0x88
 8003586:	af00      	add	r7, sp, #0
 8003588:	60f8      	str	r0, [r7, #12]
 800358a:	60b9      	str	r1, [r7, #8]
 800358c:	4613      	mov	r3, r2
 800358e:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003590:	88fb      	ldrh	r3, [r7, #6]
 8003592:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003596:	2b00      	cmp	r3, #0
 8003598:	f000 81c7 	beq.w	800392a <HAL_PCD_EP_DB_Transmit+0x3a8>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80035a4:	b29b      	uxth	r3, r3
 80035a6:	461a      	mov	r2, r3
 80035a8:	68bb      	ldr	r3, [r7, #8]
 80035aa:	781b      	ldrb	r3, [r3, #0]
 80035ac:	00db      	lsls	r3, r3, #3
 80035ae:	4413      	add	r3, r2
 80035b0:	3302      	adds	r3, #2
 80035b2:	005b      	lsls	r3, r3, #1
 80035b4:	68fa      	ldr	r2, [r7, #12]
 80035b6:	6812      	ldr	r2, [r2, #0]
 80035b8:	4413      	add	r3, r2
 80035ba:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80035be:	881b      	ldrh	r3, [r3, #0]
 80035c0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80035c4:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxByteNbre)
 80035c8:	68bb      	ldr	r3, [r7, #8]
 80035ca:	699a      	ldr	r2, [r3, #24]
 80035cc:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80035d0:	429a      	cmp	r2, r3
 80035d2:	d907      	bls.n	80035e4 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 80035d4:	68bb      	ldr	r3, [r7, #8]
 80035d6:	699a      	ldr	r2, [r3, #24]
 80035d8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80035dc:	1ad2      	subs	r2, r2, r3
 80035de:	68bb      	ldr	r3, [r7, #8]
 80035e0:	619a      	str	r2, [r3, #24]
 80035e2:	e002      	b.n	80035ea <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 80035e4:	68bb      	ldr	r3, [r7, #8]
 80035e6:	2200      	movs	r2, #0
 80035e8:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80035ea:	68bb      	ldr	r3, [r7, #8]
 80035ec:	699b      	ldr	r3, [r3, #24]
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	f040 80b9 	bne.w	8003766 <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80035f4:	68bb      	ldr	r3, [r7, #8]
 80035f6:	785b      	ldrb	r3, [r3, #1]
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d126      	bne.n	800364a <HAL_PCD_EP_DB_Transmit+0xc8>
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	62bb      	str	r3, [r7, #40]	; 0x28
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800360a:	b29b      	uxth	r3, r3
 800360c:	461a      	mov	r2, r3
 800360e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003610:	4413      	add	r3, r2
 8003612:	62bb      	str	r3, [r7, #40]	; 0x28
 8003614:	68bb      	ldr	r3, [r7, #8]
 8003616:	781b      	ldrb	r3, [r3, #0]
 8003618:	011a      	lsls	r2, r3, #4
 800361a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800361c:	4413      	add	r3, r2
 800361e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003622:	627b      	str	r3, [r7, #36]	; 0x24
 8003624:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003626:	881b      	ldrh	r3, [r3, #0]
 8003628:	b29b      	uxth	r3, r3
 800362a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800362e:	b29a      	uxth	r2, r3
 8003630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003632:	801a      	strh	r2, [r3, #0]
 8003634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003636:	881b      	ldrh	r3, [r3, #0]
 8003638:	b29b      	uxth	r3, r3
 800363a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800363e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003642:	b29a      	uxth	r2, r3
 8003644:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003646:	801a      	strh	r2, [r3, #0]
 8003648:	e01a      	b.n	8003680 <HAL_PCD_EP_DB_Transmit+0xfe>
 800364a:	68bb      	ldr	r3, [r7, #8]
 800364c:	785b      	ldrb	r3, [r3, #1]
 800364e:	2b01      	cmp	r3, #1
 8003650:	d116      	bne.n	8003680 <HAL_PCD_EP_DB_Transmit+0xfe>
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	633b      	str	r3, [r7, #48]	; 0x30
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003660:	b29b      	uxth	r3, r3
 8003662:	461a      	mov	r2, r3
 8003664:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003666:	4413      	add	r3, r2
 8003668:	633b      	str	r3, [r7, #48]	; 0x30
 800366a:	68bb      	ldr	r3, [r7, #8]
 800366c:	781b      	ldrb	r3, [r3, #0]
 800366e:	011a      	lsls	r2, r3, #4
 8003670:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003672:	4413      	add	r3, r2
 8003674:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003678:	62fb      	str	r3, [r7, #44]	; 0x2c
 800367a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800367c:	2200      	movs	r2, #0
 800367e:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	623b      	str	r3, [r7, #32]
 8003686:	68bb      	ldr	r3, [r7, #8]
 8003688:	785b      	ldrb	r3, [r3, #1]
 800368a:	2b00      	cmp	r3, #0
 800368c:	d126      	bne.n	80036dc <HAL_PCD_EP_DB_Transmit+0x15a>
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	61bb      	str	r3, [r7, #24]
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800369c:	b29b      	uxth	r3, r3
 800369e:	461a      	mov	r2, r3
 80036a0:	69bb      	ldr	r3, [r7, #24]
 80036a2:	4413      	add	r3, r2
 80036a4:	61bb      	str	r3, [r7, #24]
 80036a6:	68bb      	ldr	r3, [r7, #8]
 80036a8:	781b      	ldrb	r3, [r3, #0]
 80036aa:	011a      	lsls	r2, r3, #4
 80036ac:	69bb      	ldr	r3, [r7, #24]
 80036ae:	4413      	add	r3, r2
 80036b0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80036b4:	617b      	str	r3, [r7, #20]
 80036b6:	697b      	ldr	r3, [r7, #20]
 80036b8:	881b      	ldrh	r3, [r3, #0]
 80036ba:	b29b      	uxth	r3, r3
 80036bc:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80036c0:	b29a      	uxth	r2, r3
 80036c2:	697b      	ldr	r3, [r7, #20]
 80036c4:	801a      	strh	r2, [r3, #0]
 80036c6:	697b      	ldr	r3, [r7, #20]
 80036c8:	881b      	ldrh	r3, [r3, #0]
 80036ca:	b29b      	uxth	r3, r3
 80036cc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80036d0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80036d4:	b29a      	uxth	r2, r3
 80036d6:	697b      	ldr	r3, [r7, #20]
 80036d8:	801a      	strh	r2, [r3, #0]
 80036da:	e017      	b.n	800370c <HAL_PCD_EP_DB_Transmit+0x18a>
 80036dc:	68bb      	ldr	r3, [r7, #8]
 80036de:	785b      	ldrb	r3, [r3, #1]
 80036e0:	2b01      	cmp	r3, #1
 80036e2:	d113      	bne.n	800370c <HAL_PCD_EP_DB_Transmit+0x18a>
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80036ec:	b29b      	uxth	r3, r3
 80036ee:	461a      	mov	r2, r3
 80036f0:	6a3b      	ldr	r3, [r7, #32]
 80036f2:	4413      	add	r3, r2
 80036f4:	623b      	str	r3, [r7, #32]
 80036f6:	68bb      	ldr	r3, [r7, #8]
 80036f8:	781b      	ldrb	r3, [r3, #0]
 80036fa:	011a      	lsls	r2, r3, #4
 80036fc:	6a3b      	ldr	r3, [r7, #32]
 80036fe:	4413      	add	r3, r2
 8003700:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003704:	61fb      	str	r3, [r7, #28]
 8003706:	69fb      	ldr	r3, [r7, #28]
 8003708:	2200      	movs	r2, #0
 800370a:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800370c:	68bb      	ldr	r3, [r7, #8]
 800370e:	781b      	ldrb	r3, [r3, #0]
 8003710:	4619      	mov	r1, r3
 8003712:	68f8      	ldr	r0, [r7, #12]
 8003714:	f006 fab1 	bl	8009c7a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003718:	88fb      	ldrh	r3, [r7, #6]
 800371a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800371e:	2b00      	cmp	r3, #0
 8003720:	f000 82d4 	beq.w	8003ccc <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	461a      	mov	r2, r3
 800372a:	68bb      	ldr	r3, [r7, #8]
 800372c:	781b      	ldrb	r3, [r3, #0]
 800372e:	009b      	lsls	r3, r3, #2
 8003730:	4413      	add	r3, r2
 8003732:	881b      	ldrh	r3, [r3, #0]
 8003734:	b29b      	uxth	r3, r3
 8003736:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800373a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800373e:	827b      	strh	r3, [r7, #18]
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	461a      	mov	r2, r3
 8003746:	68bb      	ldr	r3, [r7, #8]
 8003748:	781b      	ldrb	r3, [r3, #0]
 800374a:	009b      	lsls	r3, r3, #2
 800374c:	441a      	add	r2, r3
 800374e:	8a7b      	ldrh	r3, [r7, #18]
 8003750:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003754:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003758:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800375c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003760:	b29b      	uxth	r3, r3
 8003762:	8013      	strh	r3, [r2, #0]
 8003764:	e2b2      	b.n	8003ccc <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003766:	88fb      	ldrh	r3, [r7, #6]
 8003768:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800376c:	2b00      	cmp	r3, #0
 800376e:	d021      	beq.n	80037b4 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	461a      	mov	r2, r3
 8003776:	68bb      	ldr	r3, [r7, #8]
 8003778:	781b      	ldrb	r3, [r3, #0]
 800377a:	009b      	lsls	r3, r3, #2
 800377c:	4413      	add	r3, r2
 800377e:	881b      	ldrh	r3, [r3, #0]
 8003780:	b29b      	uxth	r3, r3
 8003782:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003786:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800378a:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	461a      	mov	r2, r3
 8003794:	68bb      	ldr	r3, [r7, #8]
 8003796:	781b      	ldrb	r3, [r3, #0]
 8003798:	009b      	lsls	r3, r3, #2
 800379a:	441a      	add	r2, r3
 800379c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80037a0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80037a4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80037a8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80037ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80037b0:	b29b      	uxth	r3, r3
 80037b2:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80037b4:	68bb      	ldr	r3, [r7, #8]
 80037b6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80037ba:	2b01      	cmp	r3, #1
 80037bc:	f040 8286 	bne.w	8003ccc <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 80037c0:	68bb      	ldr	r3, [r7, #8]
 80037c2:	695a      	ldr	r2, [r3, #20]
 80037c4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80037c8:	441a      	add	r2, r3
 80037ca:	68bb      	ldr	r3, [r7, #8]
 80037cc:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 80037ce:	68bb      	ldr	r3, [r7, #8]
 80037d0:	69da      	ldr	r2, [r3, #28]
 80037d2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80037d6:	441a      	add	r2, r3
 80037d8:	68bb      	ldr	r3, [r7, #8]
 80037da:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80037dc:	68bb      	ldr	r3, [r7, #8]
 80037de:	6a1a      	ldr	r2, [r3, #32]
 80037e0:	68bb      	ldr	r3, [r7, #8]
 80037e2:	691b      	ldr	r3, [r3, #16]
 80037e4:	429a      	cmp	r2, r3
 80037e6:	d309      	bcc.n	80037fc <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 80037e8:	68bb      	ldr	r3, [r7, #8]
 80037ea:	691b      	ldr	r3, [r3, #16]
 80037ec:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 80037ee:	68bb      	ldr	r3, [r7, #8]
 80037f0:	6a1a      	ldr	r2, [r3, #32]
 80037f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80037f4:	1ad2      	subs	r2, r2, r3
 80037f6:	68bb      	ldr	r3, [r7, #8]
 80037f8:	621a      	str	r2, [r3, #32]
 80037fa:	e015      	b.n	8003828 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 80037fc:	68bb      	ldr	r3, [r7, #8]
 80037fe:	6a1b      	ldr	r3, [r3, #32]
 8003800:	2b00      	cmp	r3, #0
 8003802:	d107      	bne.n	8003814 <HAL_PCD_EP_DB_Transmit+0x292>
        {
          len = TxByteNbre;
 8003804:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003808:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 800380a:	68bb      	ldr	r3, [r7, #8]
 800380c:	2200      	movs	r2, #0
 800380e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8003812:	e009      	b.n	8003828 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8003814:	68bb      	ldr	r3, [r7, #8]
 8003816:	2200      	movs	r2, #0
 8003818:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 800381c:	68bb      	ldr	r3, [r7, #8]
 800381e:	6a1b      	ldr	r3, [r3, #32]
 8003820:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8003822:	68bb      	ldr	r3, [r7, #8]
 8003824:	2200      	movs	r2, #0
 8003826:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003828:	68bb      	ldr	r3, [r7, #8]
 800382a:	785b      	ldrb	r3, [r3, #1]
 800382c:	2b00      	cmp	r3, #0
 800382e:	d155      	bne.n	80038dc <HAL_PCD_EP_DB_Transmit+0x35a>
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	63bb      	str	r3, [r7, #56]	; 0x38
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800383e:	b29b      	uxth	r3, r3
 8003840:	461a      	mov	r2, r3
 8003842:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003844:	4413      	add	r3, r2
 8003846:	63bb      	str	r3, [r7, #56]	; 0x38
 8003848:	68bb      	ldr	r3, [r7, #8]
 800384a:	781b      	ldrb	r3, [r3, #0]
 800384c:	011a      	lsls	r2, r3, #4
 800384e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003850:	4413      	add	r3, r2
 8003852:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003856:	637b      	str	r3, [r7, #52]	; 0x34
 8003858:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800385a:	2b00      	cmp	r3, #0
 800385c:	d112      	bne.n	8003884 <HAL_PCD_EP_DB_Transmit+0x302>
 800385e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003860:	881b      	ldrh	r3, [r3, #0]
 8003862:	b29b      	uxth	r3, r3
 8003864:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003868:	b29a      	uxth	r2, r3
 800386a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800386c:	801a      	strh	r2, [r3, #0]
 800386e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003870:	881b      	ldrh	r3, [r3, #0]
 8003872:	b29b      	uxth	r3, r3
 8003874:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003878:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800387c:	b29a      	uxth	r2, r3
 800387e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003880:	801a      	strh	r2, [r3, #0]
 8003882:	e047      	b.n	8003914 <HAL_PCD_EP_DB_Transmit+0x392>
 8003884:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003886:	2b3e      	cmp	r3, #62	; 0x3e
 8003888:	d811      	bhi.n	80038ae <HAL_PCD_EP_DB_Transmit+0x32c>
 800388a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800388c:	085b      	lsrs	r3, r3, #1
 800388e:	64bb      	str	r3, [r7, #72]	; 0x48
 8003890:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003892:	f003 0301 	and.w	r3, r3, #1
 8003896:	2b00      	cmp	r3, #0
 8003898:	d002      	beq.n	80038a0 <HAL_PCD_EP_DB_Transmit+0x31e>
 800389a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800389c:	3301      	adds	r3, #1
 800389e:	64bb      	str	r3, [r7, #72]	; 0x48
 80038a0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80038a2:	b29b      	uxth	r3, r3
 80038a4:	029b      	lsls	r3, r3, #10
 80038a6:	b29a      	uxth	r2, r3
 80038a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80038aa:	801a      	strh	r2, [r3, #0]
 80038ac:	e032      	b.n	8003914 <HAL_PCD_EP_DB_Transmit+0x392>
 80038ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80038b0:	095b      	lsrs	r3, r3, #5
 80038b2:	64bb      	str	r3, [r7, #72]	; 0x48
 80038b4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80038b6:	f003 031f 	and.w	r3, r3, #31
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d102      	bne.n	80038c4 <HAL_PCD_EP_DB_Transmit+0x342>
 80038be:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80038c0:	3b01      	subs	r3, #1
 80038c2:	64bb      	str	r3, [r7, #72]	; 0x48
 80038c4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80038c6:	b29b      	uxth	r3, r3
 80038c8:	029b      	lsls	r3, r3, #10
 80038ca:	b29b      	uxth	r3, r3
 80038cc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80038d0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80038d4:	b29a      	uxth	r2, r3
 80038d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80038d8:	801a      	strh	r2, [r3, #0]
 80038da:	e01b      	b.n	8003914 <HAL_PCD_EP_DB_Transmit+0x392>
 80038dc:	68bb      	ldr	r3, [r7, #8]
 80038de:	785b      	ldrb	r3, [r3, #1]
 80038e0:	2b01      	cmp	r3, #1
 80038e2:	d117      	bne.n	8003914 <HAL_PCD_EP_DB_Transmit+0x392>
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	643b      	str	r3, [r7, #64]	; 0x40
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80038f2:	b29b      	uxth	r3, r3
 80038f4:	461a      	mov	r2, r3
 80038f6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80038f8:	4413      	add	r3, r2
 80038fa:	643b      	str	r3, [r7, #64]	; 0x40
 80038fc:	68bb      	ldr	r3, [r7, #8]
 80038fe:	781b      	ldrb	r3, [r3, #0]
 8003900:	011a      	lsls	r2, r3, #4
 8003902:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003904:	4413      	add	r3, r2
 8003906:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800390a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800390c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800390e:	b29a      	uxth	r2, r3
 8003910:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003912:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	6818      	ldr	r0, [r3, #0]
 8003918:	68bb      	ldr	r3, [r7, #8]
 800391a:	6959      	ldr	r1, [r3, #20]
 800391c:	68bb      	ldr	r3, [r7, #8]
 800391e:	891a      	ldrh	r2, [r3, #8]
 8003920:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003922:	b29b      	uxth	r3, r3
 8003924:	f004 fb60 	bl	8007fe8 <USB_WritePMA>
 8003928:	e1d0      	b.n	8003ccc <HAL_PCD_EP_DB_Transmit+0x74a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003932:	b29b      	uxth	r3, r3
 8003934:	461a      	mov	r2, r3
 8003936:	68bb      	ldr	r3, [r7, #8]
 8003938:	781b      	ldrb	r3, [r3, #0]
 800393a:	00db      	lsls	r3, r3, #3
 800393c:	4413      	add	r3, r2
 800393e:	3306      	adds	r3, #6
 8003940:	005b      	lsls	r3, r3, #1
 8003942:	68fa      	ldr	r2, [r7, #12]
 8003944:	6812      	ldr	r2, [r2, #0]
 8003946:	4413      	add	r3, r2
 8003948:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800394c:	881b      	ldrh	r3, [r3, #0]
 800394e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003952:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxByteNbre)
 8003956:	68bb      	ldr	r3, [r7, #8]
 8003958:	699a      	ldr	r2, [r3, #24]
 800395a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800395e:	429a      	cmp	r2, r3
 8003960:	d307      	bcc.n	8003972 <HAL_PCD_EP_DB_Transmit+0x3f0>
    {
      ep->xfer_len -= TxByteNbre;
 8003962:	68bb      	ldr	r3, [r7, #8]
 8003964:	699a      	ldr	r2, [r3, #24]
 8003966:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800396a:	1ad2      	subs	r2, r2, r3
 800396c:	68bb      	ldr	r3, [r7, #8]
 800396e:	619a      	str	r2, [r3, #24]
 8003970:	e002      	b.n	8003978 <HAL_PCD_EP_DB_Transmit+0x3f6>
    }
    else
    {
      ep->xfer_len = 0U;
 8003972:	68bb      	ldr	r3, [r7, #8]
 8003974:	2200      	movs	r2, #0
 8003976:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003978:	68bb      	ldr	r3, [r7, #8]
 800397a:	699b      	ldr	r3, [r3, #24]
 800397c:	2b00      	cmp	r3, #0
 800397e:	f040 80c4 	bne.w	8003b0a <HAL_PCD_EP_DB_Transmit+0x588>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003982:	68bb      	ldr	r3, [r7, #8]
 8003984:	785b      	ldrb	r3, [r3, #1]
 8003986:	2b00      	cmp	r3, #0
 8003988:	d126      	bne.n	80039d8 <HAL_PCD_EP_DB_Transmit+0x456>
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003998:	b29b      	uxth	r3, r3
 800399a:	461a      	mov	r2, r3
 800399c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800399e:	4413      	add	r3, r2
 80039a0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80039a2:	68bb      	ldr	r3, [r7, #8]
 80039a4:	781b      	ldrb	r3, [r3, #0]
 80039a6:	011a      	lsls	r2, r3, #4
 80039a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80039aa:	4413      	add	r3, r2
 80039ac:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80039b0:	66bb      	str	r3, [r7, #104]	; 0x68
 80039b2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80039b4:	881b      	ldrh	r3, [r3, #0]
 80039b6:	b29b      	uxth	r3, r3
 80039b8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80039bc:	b29a      	uxth	r2, r3
 80039be:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80039c0:	801a      	strh	r2, [r3, #0]
 80039c2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80039c4:	881b      	ldrh	r3, [r3, #0]
 80039c6:	b29b      	uxth	r3, r3
 80039c8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80039cc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80039d0:	b29a      	uxth	r2, r3
 80039d2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80039d4:	801a      	strh	r2, [r3, #0]
 80039d6:	e01a      	b.n	8003a0e <HAL_PCD_EP_DB_Transmit+0x48c>
 80039d8:	68bb      	ldr	r3, [r7, #8]
 80039da:	785b      	ldrb	r3, [r3, #1]
 80039dc:	2b01      	cmp	r3, #1
 80039de:	d116      	bne.n	8003a0e <HAL_PCD_EP_DB_Transmit+0x48c>
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	677b      	str	r3, [r7, #116]	; 0x74
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80039ee:	b29b      	uxth	r3, r3
 80039f0:	461a      	mov	r2, r3
 80039f2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80039f4:	4413      	add	r3, r2
 80039f6:	677b      	str	r3, [r7, #116]	; 0x74
 80039f8:	68bb      	ldr	r3, [r7, #8]
 80039fa:	781b      	ldrb	r3, [r3, #0]
 80039fc:	011a      	lsls	r2, r3, #4
 80039fe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003a00:	4413      	add	r3, r2
 8003a02:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003a06:	673b      	str	r3, [r7, #112]	; 0x70
 8003a08:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003a0a:	2200      	movs	r2, #0
 8003a0c:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	67bb      	str	r3, [r7, #120]	; 0x78
 8003a14:	68bb      	ldr	r3, [r7, #8]
 8003a16:	785b      	ldrb	r3, [r3, #1]
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d12f      	bne.n	8003a7c <HAL_PCD_EP_DB_Transmit+0x4fa>
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003a2c:	b29b      	uxth	r3, r3
 8003a2e:	461a      	mov	r2, r3
 8003a30:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003a34:	4413      	add	r3, r2
 8003a36:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003a3a:	68bb      	ldr	r3, [r7, #8]
 8003a3c:	781b      	ldrb	r3, [r3, #0]
 8003a3e:	011a      	lsls	r2, r3, #4
 8003a40:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003a44:	4413      	add	r3, r2
 8003a46:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003a4a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003a4e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003a52:	881b      	ldrh	r3, [r3, #0]
 8003a54:	b29b      	uxth	r3, r3
 8003a56:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003a5a:	b29a      	uxth	r2, r3
 8003a5c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003a60:	801a      	strh	r2, [r3, #0]
 8003a62:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003a66:	881b      	ldrh	r3, [r3, #0]
 8003a68:	b29b      	uxth	r3, r3
 8003a6a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003a6e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003a72:	b29a      	uxth	r2, r3
 8003a74:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003a78:	801a      	strh	r2, [r3, #0]
 8003a7a:	e017      	b.n	8003aac <HAL_PCD_EP_DB_Transmit+0x52a>
 8003a7c:	68bb      	ldr	r3, [r7, #8]
 8003a7e:	785b      	ldrb	r3, [r3, #1]
 8003a80:	2b01      	cmp	r3, #1
 8003a82:	d113      	bne.n	8003aac <HAL_PCD_EP_DB_Transmit+0x52a>
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003a8c:	b29b      	uxth	r3, r3
 8003a8e:	461a      	mov	r2, r3
 8003a90:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003a92:	4413      	add	r3, r2
 8003a94:	67bb      	str	r3, [r7, #120]	; 0x78
 8003a96:	68bb      	ldr	r3, [r7, #8]
 8003a98:	781b      	ldrb	r3, [r3, #0]
 8003a9a:	011a      	lsls	r2, r3, #4
 8003a9c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003a9e:	4413      	add	r3, r2
 8003aa0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003aa4:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003aa6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003aa8:	2200      	movs	r2, #0
 8003aaa:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003aac:	68bb      	ldr	r3, [r7, #8]
 8003aae:	781b      	ldrb	r3, [r3, #0]
 8003ab0:	4619      	mov	r1, r3
 8003ab2:	68f8      	ldr	r0, [r7, #12]
 8003ab4:	f006 f8e1 	bl	8009c7a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003ab8:	88fb      	ldrh	r3, [r7, #6]
 8003aba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	f040 8104 	bne.w	8003ccc <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	461a      	mov	r2, r3
 8003aca:	68bb      	ldr	r3, [r7, #8]
 8003acc:	781b      	ldrb	r3, [r3, #0]
 8003ace:	009b      	lsls	r3, r3, #2
 8003ad0:	4413      	add	r3, r2
 8003ad2:	881b      	ldrh	r3, [r3, #0]
 8003ad4:	b29b      	uxth	r3, r3
 8003ad6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003ada:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ade:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	461a      	mov	r2, r3
 8003ae8:	68bb      	ldr	r3, [r7, #8]
 8003aea:	781b      	ldrb	r3, [r3, #0]
 8003aec:	009b      	lsls	r3, r3, #2
 8003aee:	441a      	add	r2, r3
 8003af0:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8003af4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003af8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003afc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003b00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003b04:	b29b      	uxth	r3, r3
 8003b06:	8013      	strh	r3, [r2, #0]
 8003b08:	e0e0      	b.n	8003ccc <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003b0a:	88fb      	ldrh	r3, [r7, #6]
 8003b0c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d121      	bne.n	8003b58 <HAL_PCD_EP_DB_Transmit+0x5d6>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	461a      	mov	r2, r3
 8003b1a:	68bb      	ldr	r3, [r7, #8]
 8003b1c:	781b      	ldrb	r3, [r3, #0]
 8003b1e:	009b      	lsls	r3, r3, #2
 8003b20:	4413      	add	r3, r2
 8003b22:	881b      	ldrh	r3, [r3, #0]
 8003b24:	b29b      	uxth	r3, r3
 8003b26:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003b2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b2e:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	461a      	mov	r2, r3
 8003b38:	68bb      	ldr	r3, [r7, #8]
 8003b3a:	781b      	ldrb	r3, [r3, #0]
 8003b3c:	009b      	lsls	r3, r3, #2
 8003b3e:	441a      	add	r2, r3
 8003b40:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8003b44:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003b48:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003b4c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003b50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003b54:	b29b      	uxth	r3, r3
 8003b56:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003b58:	68bb      	ldr	r3, [r7, #8]
 8003b5a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003b5e:	2b01      	cmp	r3, #1
 8003b60:	f040 80b4 	bne.w	8003ccc <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 8003b64:	68bb      	ldr	r3, [r7, #8]
 8003b66:	695a      	ldr	r2, [r3, #20]
 8003b68:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003b6c:	441a      	add	r2, r3
 8003b6e:	68bb      	ldr	r3, [r7, #8]
 8003b70:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8003b72:	68bb      	ldr	r3, [r7, #8]
 8003b74:	69da      	ldr	r2, [r3, #28]
 8003b76:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003b7a:	441a      	add	r2, r3
 8003b7c:	68bb      	ldr	r3, [r7, #8]
 8003b7e:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8003b80:	68bb      	ldr	r3, [r7, #8]
 8003b82:	6a1a      	ldr	r2, [r3, #32]
 8003b84:	68bb      	ldr	r3, [r7, #8]
 8003b86:	691b      	ldr	r3, [r3, #16]
 8003b88:	429a      	cmp	r2, r3
 8003b8a:	d309      	bcc.n	8003ba0 <HAL_PCD_EP_DB_Transmit+0x61e>
        {
          len = ep->maxpacket;
 8003b8c:	68bb      	ldr	r3, [r7, #8]
 8003b8e:	691b      	ldr	r3, [r3, #16]
 8003b90:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8003b92:	68bb      	ldr	r3, [r7, #8]
 8003b94:	6a1a      	ldr	r2, [r3, #32]
 8003b96:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003b98:	1ad2      	subs	r2, r2, r3
 8003b9a:	68bb      	ldr	r3, [r7, #8]
 8003b9c:	621a      	str	r2, [r3, #32]
 8003b9e:	e015      	b.n	8003bcc <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else if (ep->xfer_len_db == 0U)
 8003ba0:	68bb      	ldr	r3, [r7, #8]
 8003ba2:	6a1b      	ldr	r3, [r3, #32]
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d107      	bne.n	8003bb8 <HAL_PCD_EP_DB_Transmit+0x636>
        {
          len = TxByteNbre;
 8003ba8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003bac:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8003bae:	68bb      	ldr	r3, [r7, #8]
 8003bb0:	2200      	movs	r2, #0
 8003bb2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8003bb6:	e009      	b.n	8003bcc <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else
        {
          len = ep->xfer_len_db;
 8003bb8:	68bb      	ldr	r3, [r7, #8]
 8003bba:	6a1b      	ldr	r3, [r3, #32]
 8003bbc:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8003bbe:	68bb      	ldr	r3, [r7, #8]
 8003bc0:	2200      	movs	r2, #0
 8003bc2:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8003bc4:	68bb      	ldr	r3, [r7, #8]
 8003bc6:	2200      	movs	r2, #0
 8003bc8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	667b      	str	r3, [r7, #100]	; 0x64
 8003bd2:	68bb      	ldr	r3, [r7, #8]
 8003bd4:	785b      	ldrb	r3, [r3, #1]
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d155      	bne.n	8003c86 <HAL_PCD_EP_DB_Transmit+0x704>
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003be8:	b29b      	uxth	r3, r3
 8003bea:	461a      	mov	r2, r3
 8003bec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003bee:	4413      	add	r3, r2
 8003bf0:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003bf2:	68bb      	ldr	r3, [r7, #8]
 8003bf4:	781b      	ldrb	r3, [r3, #0]
 8003bf6:	011a      	lsls	r2, r3, #4
 8003bf8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003bfa:	4413      	add	r3, r2
 8003bfc:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003c00:	65bb      	str	r3, [r7, #88]	; 0x58
 8003c02:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d112      	bne.n	8003c2e <HAL_PCD_EP_DB_Transmit+0x6ac>
 8003c08:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003c0a:	881b      	ldrh	r3, [r3, #0]
 8003c0c:	b29b      	uxth	r3, r3
 8003c0e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003c12:	b29a      	uxth	r2, r3
 8003c14:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003c16:	801a      	strh	r2, [r3, #0]
 8003c18:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003c1a:	881b      	ldrh	r3, [r3, #0]
 8003c1c:	b29b      	uxth	r3, r3
 8003c1e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003c22:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003c26:	b29a      	uxth	r2, r3
 8003c28:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003c2a:	801a      	strh	r2, [r3, #0]
 8003c2c:	e044      	b.n	8003cb8 <HAL_PCD_EP_DB_Transmit+0x736>
 8003c2e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003c30:	2b3e      	cmp	r3, #62	; 0x3e
 8003c32:	d811      	bhi.n	8003c58 <HAL_PCD_EP_DB_Transmit+0x6d6>
 8003c34:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003c36:	085b      	lsrs	r3, r3, #1
 8003c38:	657b      	str	r3, [r7, #84]	; 0x54
 8003c3a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003c3c:	f003 0301 	and.w	r3, r3, #1
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d002      	beq.n	8003c4a <HAL_PCD_EP_DB_Transmit+0x6c8>
 8003c44:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003c46:	3301      	adds	r3, #1
 8003c48:	657b      	str	r3, [r7, #84]	; 0x54
 8003c4a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003c4c:	b29b      	uxth	r3, r3
 8003c4e:	029b      	lsls	r3, r3, #10
 8003c50:	b29a      	uxth	r2, r3
 8003c52:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003c54:	801a      	strh	r2, [r3, #0]
 8003c56:	e02f      	b.n	8003cb8 <HAL_PCD_EP_DB_Transmit+0x736>
 8003c58:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003c5a:	095b      	lsrs	r3, r3, #5
 8003c5c:	657b      	str	r3, [r7, #84]	; 0x54
 8003c5e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003c60:	f003 031f 	and.w	r3, r3, #31
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d102      	bne.n	8003c6e <HAL_PCD_EP_DB_Transmit+0x6ec>
 8003c68:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003c6a:	3b01      	subs	r3, #1
 8003c6c:	657b      	str	r3, [r7, #84]	; 0x54
 8003c6e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003c70:	b29b      	uxth	r3, r3
 8003c72:	029b      	lsls	r3, r3, #10
 8003c74:	b29b      	uxth	r3, r3
 8003c76:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003c7a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003c7e:	b29a      	uxth	r2, r3
 8003c80:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003c82:	801a      	strh	r2, [r3, #0]
 8003c84:	e018      	b.n	8003cb8 <HAL_PCD_EP_DB_Transmit+0x736>
 8003c86:	68bb      	ldr	r3, [r7, #8]
 8003c88:	785b      	ldrb	r3, [r3, #1]
 8003c8a:	2b01      	cmp	r3, #1
 8003c8c:	d114      	bne.n	8003cb8 <HAL_PCD_EP_DB_Transmit+0x736>
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003c96:	b29b      	uxth	r3, r3
 8003c98:	461a      	mov	r2, r3
 8003c9a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003c9c:	4413      	add	r3, r2
 8003c9e:	667b      	str	r3, [r7, #100]	; 0x64
 8003ca0:	68bb      	ldr	r3, [r7, #8]
 8003ca2:	781b      	ldrb	r3, [r3, #0]
 8003ca4:	011a      	lsls	r2, r3, #4
 8003ca6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003ca8:	4413      	add	r3, r2
 8003caa:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003cae:	663b      	str	r3, [r7, #96]	; 0x60
 8003cb0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003cb2:	b29a      	uxth	r2, r3
 8003cb4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003cb6:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	6818      	ldr	r0, [r3, #0]
 8003cbc:	68bb      	ldr	r3, [r7, #8]
 8003cbe:	6959      	ldr	r1, [r3, #20]
 8003cc0:	68bb      	ldr	r3, [r7, #8]
 8003cc2:	895a      	ldrh	r2, [r3, #10]
 8003cc4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003cc6:	b29b      	uxth	r3, r3
 8003cc8:	f004 f98e 	bl	8007fe8 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	461a      	mov	r2, r3
 8003cd2:	68bb      	ldr	r3, [r7, #8]
 8003cd4:	781b      	ldrb	r3, [r3, #0]
 8003cd6:	009b      	lsls	r3, r3, #2
 8003cd8:	4413      	add	r3, r2
 8003cda:	881b      	ldrh	r3, [r3, #0]
 8003cdc:	b29b      	uxth	r3, r3
 8003cde:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003ce2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003ce6:	823b      	strh	r3, [r7, #16]
 8003ce8:	8a3b      	ldrh	r3, [r7, #16]
 8003cea:	f083 0310 	eor.w	r3, r3, #16
 8003cee:	823b      	strh	r3, [r7, #16]
 8003cf0:	8a3b      	ldrh	r3, [r7, #16]
 8003cf2:	f083 0320 	eor.w	r3, r3, #32
 8003cf6:	823b      	strh	r3, [r7, #16]
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	461a      	mov	r2, r3
 8003cfe:	68bb      	ldr	r3, [r7, #8]
 8003d00:	781b      	ldrb	r3, [r3, #0]
 8003d02:	009b      	lsls	r3, r3, #2
 8003d04:	441a      	add	r2, r3
 8003d06:	8a3b      	ldrh	r3, [r7, #16]
 8003d08:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003d0c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003d10:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003d14:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003d18:	b29b      	uxth	r3, r3
 8003d1a:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8003d1c:	2300      	movs	r3, #0
}
 8003d1e:	4618      	mov	r0, r3
 8003d20:	3788      	adds	r7, #136	; 0x88
 8003d22:	46bd      	mov	sp, r7
 8003d24:	bd80      	pop	{r7, pc}

08003d26 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8003d26:	b480      	push	{r7}
 8003d28:	b087      	sub	sp, #28
 8003d2a:	af00      	add	r7, sp, #0
 8003d2c:	60f8      	str	r0, [r7, #12]
 8003d2e:	607b      	str	r3, [r7, #4]
 8003d30:	460b      	mov	r3, r1
 8003d32:	817b      	strh	r3, [r7, #10]
 8003d34:	4613      	mov	r3, r2
 8003d36:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8003d38:	897b      	ldrh	r3, [r7, #10]
 8003d3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d3e:	b29b      	uxth	r3, r3
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d00b      	beq.n	8003d5c <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003d44:	897b      	ldrh	r3, [r7, #10]
 8003d46:	f003 0307 	and.w	r3, r3, #7
 8003d4a:	1c5a      	adds	r2, r3, #1
 8003d4c:	4613      	mov	r3, r2
 8003d4e:	009b      	lsls	r3, r3, #2
 8003d50:	4413      	add	r3, r2
 8003d52:	00db      	lsls	r3, r3, #3
 8003d54:	68fa      	ldr	r2, [r7, #12]
 8003d56:	4413      	add	r3, r2
 8003d58:	617b      	str	r3, [r7, #20]
 8003d5a:	e009      	b.n	8003d70 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003d5c:	897a      	ldrh	r2, [r7, #10]
 8003d5e:	4613      	mov	r3, r2
 8003d60:	009b      	lsls	r3, r3, #2
 8003d62:	4413      	add	r3, r2
 8003d64:	00db      	lsls	r3, r3, #3
 8003d66:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003d6a:	68fa      	ldr	r2, [r7, #12]
 8003d6c:	4413      	add	r3, r2
 8003d6e:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8003d70:	893b      	ldrh	r3, [r7, #8]
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d107      	bne.n	8003d86 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8003d76:	697b      	ldr	r3, [r7, #20]
 8003d78:	2200      	movs	r2, #0
 8003d7a:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	b29a      	uxth	r2, r3
 8003d80:	697b      	ldr	r3, [r7, #20]
 8003d82:	80da      	strh	r2, [r3, #6]
 8003d84:	e00b      	b.n	8003d9e <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8003d86:	697b      	ldr	r3, [r7, #20]
 8003d88:	2201      	movs	r2, #1
 8003d8a:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	b29a      	uxth	r2, r3
 8003d90:	697b      	ldr	r3, [r7, #20]
 8003d92:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	0c1b      	lsrs	r3, r3, #16
 8003d98:	b29a      	uxth	r2, r3
 8003d9a:	697b      	ldr	r3, [r7, #20]
 8003d9c:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8003d9e:	2300      	movs	r3, #0
}
 8003da0:	4618      	mov	r0, r3
 8003da2:	371c      	adds	r7, #28
 8003da4:	46bd      	mov	sp, r7
 8003da6:	bc80      	pop	{r7}
 8003da8:	4770      	bx	lr
	...

08003dac <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003dac:	b580      	push	{r7, lr}
 8003dae:	b086      	sub	sp, #24
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d101      	bne.n	8003dbe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003dba:	2301      	movs	r3, #1
 8003dbc:	e272      	b.n	80042a4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f003 0301 	and.w	r3, r3, #1
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	f000 8087 	beq.w	8003eda <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003dcc:	4b92      	ldr	r3, [pc, #584]	; (8004018 <HAL_RCC_OscConfig+0x26c>)
 8003dce:	685b      	ldr	r3, [r3, #4]
 8003dd0:	f003 030c 	and.w	r3, r3, #12
 8003dd4:	2b04      	cmp	r3, #4
 8003dd6:	d00c      	beq.n	8003df2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003dd8:	4b8f      	ldr	r3, [pc, #572]	; (8004018 <HAL_RCC_OscConfig+0x26c>)
 8003dda:	685b      	ldr	r3, [r3, #4]
 8003ddc:	f003 030c 	and.w	r3, r3, #12
 8003de0:	2b08      	cmp	r3, #8
 8003de2:	d112      	bne.n	8003e0a <HAL_RCC_OscConfig+0x5e>
 8003de4:	4b8c      	ldr	r3, [pc, #560]	; (8004018 <HAL_RCC_OscConfig+0x26c>)
 8003de6:	685b      	ldr	r3, [r3, #4]
 8003de8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003dec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003df0:	d10b      	bne.n	8003e0a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003df2:	4b89      	ldr	r3, [pc, #548]	; (8004018 <HAL_RCC_OscConfig+0x26c>)
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d06c      	beq.n	8003ed8 <HAL_RCC_OscConfig+0x12c>
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	685b      	ldr	r3, [r3, #4]
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d168      	bne.n	8003ed8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003e06:	2301      	movs	r3, #1
 8003e08:	e24c      	b.n	80042a4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	685b      	ldr	r3, [r3, #4]
 8003e0e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e12:	d106      	bne.n	8003e22 <HAL_RCC_OscConfig+0x76>
 8003e14:	4b80      	ldr	r3, [pc, #512]	; (8004018 <HAL_RCC_OscConfig+0x26c>)
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	4a7f      	ldr	r2, [pc, #508]	; (8004018 <HAL_RCC_OscConfig+0x26c>)
 8003e1a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e1e:	6013      	str	r3, [r2, #0]
 8003e20:	e02e      	b.n	8003e80 <HAL_RCC_OscConfig+0xd4>
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	685b      	ldr	r3, [r3, #4]
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d10c      	bne.n	8003e44 <HAL_RCC_OscConfig+0x98>
 8003e2a:	4b7b      	ldr	r3, [pc, #492]	; (8004018 <HAL_RCC_OscConfig+0x26c>)
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	4a7a      	ldr	r2, [pc, #488]	; (8004018 <HAL_RCC_OscConfig+0x26c>)
 8003e30:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e34:	6013      	str	r3, [r2, #0]
 8003e36:	4b78      	ldr	r3, [pc, #480]	; (8004018 <HAL_RCC_OscConfig+0x26c>)
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	4a77      	ldr	r2, [pc, #476]	; (8004018 <HAL_RCC_OscConfig+0x26c>)
 8003e3c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003e40:	6013      	str	r3, [r2, #0]
 8003e42:	e01d      	b.n	8003e80 <HAL_RCC_OscConfig+0xd4>
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	685b      	ldr	r3, [r3, #4]
 8003e48:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003e4c:	d10c      	bne.n	8003e68 <HAL_RCC_OscConfig+0xbc>
 8003e4e:	4b72      	ldr	r3, [pc, #456]	; (8004018 <HAL_RCC_OscConfig+0x26c>)
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	4a71      	ldr	r2, [pc, #452]	; (8004018 <HAL_RCC_OscConfig+0x26c>)
 8003e54:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003e58:	6013      	str	r3, [r2, #0]
 8003e5a:	4b6f      	ldr	r3, [pc, #444]	; (8004018 <HAL_RCC_OscConfig+0x26c>)
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	4a6e      	ldr	r2, [pc, #440]	; (8004018 <HAL_RCC_OscConfig+0x26c>)
 8003e60:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e64:	6013      	str	r3, [r2, #0]
 8003e66:	e00b      	b.n	8003e80 <HAL_RCC_OscConfig+0xd4>
 8003e68:	4b6b      	ldr	r3, [pc, #428]	; (8004018 <HAL_RCC_OscConfig+0x26c>)
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	4a6a      	ldr	r2, [pc, #424]	; (8004018 <HAL_RCC_OscConfig+0x26c>)
 8003e6e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e72:	6013      	str	r3, [r2, #0]
 8003e74:	4b68      	ldr	r3, [pc, #416]	; (8004018 <HAL_RCC_OscConfig+0x26c>)
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	4a67      	ldr	r2, [pc, #412]	; (8004018 <HAL_RCC_OscConfig+0x26c>)
 8003e7a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003e7e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	685b      	ldr	r3, [r3, #4]
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d013      	beq.n	8003eb0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e88:	f7fd fd04 	bl	8001894 <HAL_GetTick>
 8003e8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e8e:	e008      	b.n	8003ea2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003e90:	f7fd fd00 	bl	8001894 <HAL_GetTick>
 8003e94:	4602      	mov	r2, r0
 8003e96:	693b      	ldr	r3, [r7, #16]
 8003e98:	1ad3      	subs	r3, r2, r3
 8003e9a:	2b64      	cmp	r3, #100	; 0x64
 8003e9c:	d901      	bls.n	8003ea2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003e9e:	2303      	movs	r3, #3
 8003ea0:	e200      	b.n	80042a4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ea2:	4b5d      	ldr	r3, [pc, #372]	; (8004018 <HAL_RCC_OscConfig+0x26c>)
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d0f0      	beq.n	8003e90 <HAL_RCC_OscConfig+0xe4>
 8003eae:	e014      	b.n	8003eda <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003eb0:	f7fd fcf0 	bl	8001894 <HAL_GetTick>
 8003eb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003eb6:	e008      	b.n	8003eca <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003eb8:	f7fd fcec 	bl	8001894 <HAL_GetTick>
 8003ebc:	4602      	mov	r2, r0
 8003ebe:	693b      	ldr	r3, [r7, #16]
 8003ec0:	1ad3      	subs	r3, r2, r3
 8003ec2:	2b64      	cmp	r3, #100	; 0x64
 8003ec4:	d901      	bls.n	8003eca <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003ec6:	2303      	movs	r3, #3
 8003ec8:	e1ec      	b.n	80042a4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003eca:	4b53      	ldr	r3, [pc, #332]	; (8004018 <HAL_RCC_OscConfig+0x26c>)
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d1f0      	bne.n	8003eb8 <HAL_RCC_OscConfig+0x10c>
 8003ed6:	e000      	b.n	8003eda <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ed8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f003 0302 	and.w	r3, r3, #2
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d063      	beq.n	8003fae <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003ee6:	4b4c      	ldr	r3, [pc, #304]	; (8004018 <HAL_RCC_OscConfig+0x26c>)
 8003ee8:	685b      	ldr	r3, [r3, #4]
 8003eea:	f003 030c 	and.w	r3, r3, #12
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d00b      	beq.n	8003f0a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003ef2:	4b49      	ldr	r3, [pc, #292]	; (8004018 <HAL_RCC_OscConfig+0x26c>)
 8003ef4:	685b      	ldr	r3, [r3, #4]
 8003ef6:	f003 030c 	and.w	r3, r3, #12
 8003efa:	2b08      	cmp	r3, #8
 8003efc:	d11c      	bne.n	8003f38 <HAL_RCC_OscConfig+0x18c>
 8003efe:	4b46      	ldr	r3, [pc, #280]	; (8004018 <HAL_RCC_OscConfig+0x26c>)
 8003f00:	685b      	ldr	r3, [r3, #4]
 8003f02:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d116      	bne.n	8003f38 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003f0a:	4b43      	ldr	r3, [pc, #268]	; (8004018 <HAL_RCC_OscConfig+0x26c>)
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	f003 0302 	and.w	r3, r3, #2
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d005      	beq.n	8003f22 <HAL_RCC_OscConfig+0x176>
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	691b      	ldr	r3, [r3, #16]
 8003f1a:	2b01      	cmp	r3, #1
 8003f1c:	d001      	beq.n	8003f22 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003f1e:	2301      	movs	r3, #1
 8003f20:	e1c0      	b.n	80042a4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f22:	4b3d      	ldr	r3, [pc, #244]	; (8004018 <HAL_RCC_OscConfig+0x26c>)
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	695b      	ldr	r3, [r3, #20]
 8003f2e:	00db      	lsls	r3, r3, #3
 8003f30:	4939      	ldr	r1, [pc, #228]	; (8004018 <HAL_RCC_OscConfig+0x26c>)
 8003f32:	4313      	orrs	r3, r2
 8003f34:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003f36:	e03a      	b.n	8003fae <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	691b      	ldr	r3, [r3, #16]
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d020      	beq.n	8003f82 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003f40:	4b36      	ldr	r3, [pc, #216]	; (800401c <HAL_RCC_OscConfig+0x270>)
 8003f42:	2201      	movs	r2, #1
 8003f44:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f46:	f7fd fca5 	bl	8001894 <HAL_GetTick>
 8003f4a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f4c:	e008      	b.n	8003f60 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003f4e:	f7fd fca1 	bl	8001894 <HAL_GetTick>
 8003f52:	4602      	mov	r2, r0
 8003f54:	693b      	ldr	r3, [r7, #16]
 8003f56:	1ad3      	subs	r3, r2, r3
 8003f58:	2b02      	cmp	r3, #2
 8003f5a:	d901      	bls.n	8003f60 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003f5c:	2303      	movs	r3, #3
 8003f5e:	e1a1      	b.n	80042a4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f60:	4b2d      	ldr	r3, [pc, #180]	; (8004018 <HAL_RCC_OscConfig+0x26c>)
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	f003 0302 	and.w	r3, r3, #2
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d0f0      	beq.n	8003f4e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f6c:	4b2a      	ldr	r3, [pc, #168]	; (8004018 <HAL_RCC_OscConfig+0x26c>)
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	695b      	ldr	r3, [r3, #20]
 8003f78:	00db      	lsls	r3, r3, #3
 8003f7a:	4927      	ldr	r1, [pc, #156]	; (8004018 <HAL_RCC_OscConfig+0x26c>)
 8003f7c:	4313      	orrs	r3, r2
 8003f7e:	600b      	str	r3, [r1, #0]
 8003f80:	e015      	b.n	8003fae <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003f82:	4b26      	ldr	r3, [pc, #152]	; (800401c <HAL_RCC_OscConfig+0x270>)
 8003f84:	2200      	movs	r2, #0
 8003f86:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f88:	f7fd fc84 	bl	8001894 <HAL_GetTick>
 8003f8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003f8e:	e008      	b.n	8003fa2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003f90:	f7fd fc80 	bl	8001894 <HAL_GetTick>
 8003f94:	4602      	mov	r2, r0
 8003f96:	693b      	ldr	r3, [r7, #16]
 8003f98:	1ad3      	subs	r3, r2, r3
 8003f9a:	2b02      	cmp	r3, #2
 8003f9c:	d901      	bls.n	8003fa2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003f9e:	2303      	movs	r3, #3
 8003fa0:	e180      	b.n	80042a4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003fa2:	4b1d      	ldr	r3, [pc, #116]	; (8004018 <HAL_RCC_OscConfig+0x26c>)
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f003 0302 	and.w	r3, r3, #2
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d1f0      	bne.n	8003f90 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f003 0308 	and.w	r3, r3, #8
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d03a      	beq.n	8004030 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	699b      	ldr	r3, [r3, #24]
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d019      	beq.n	8003ff6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003fc2:	4b17      	ldr	r3, [pc, #92]	; (8004020 <HAL_RCC_OscConfig+0x274>)
 8003fc4:	2201      	movs	r2, #1
 8003fc6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003fc8:	f7fd fc64 	bl	8001894 <HAL_GetTick>
 8003fcc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003fce:	e008      	b.n	8003fe2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003fd0:	f7fd fc60 	bl	8001894 <HAL_GetTick>
 8003fd4:	4602      	mov	r2, r0
 8003fd6:	693b      	ldr	r3, [r7, #16]
 8003fd8:	1ad3      	subs	r3, r2, r3
 8003fda:	2b02      	cmp	r3, #2
 8003fdc:	d901      	bls.n	8003fe2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003fde:	2303      	movs	r3, #3
 8003fe0:	e160      	b.n	80042a4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003fe2:	4b0d      	ldr	r3, [pc, #52]	; (8004018 <HAL_RCC_OscConfig+0x26c>)
 8003fe4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fe6:	f003 0302 	and.w	r3, r3, #2
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d0f0      	beq.n	8003fd0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003fee:	2001      	movs	r0, #1
 8003ff0:	f000 faa6 	bl	8004540 <RCC_Delay>
 8003ff4:	e01c      	b.n	8004030 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003ff6:	4b0a      	ldr	r3, [pc, #40]	; (8004020 <HAL_RCC_OscConfig+0x274>)
 8003ff8:	2200      	movs	r2, #0
 8003ffa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ffc:	f7fd fc4a 	bl	8001894 <HAL_GetTick>
 8004000:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004002:	e00f      	b.n	8004024 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004004:	f7fd fc46 	bl	8001894 <HAL_GetTick>
 8004008:	4602      	mov	r2, r0
 800400a:	693b      	ldr	r3, [r7, #16]
 800400c:	1ad3      	subs	r3, r2, r3
 800400e:	2b02      	cmp	r3, #2
 8004010:	d908      	bls.n	8004024 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8004012:	2303      	movs	r3, #3
 8004014:	e146      	b.n	80042a4 <HAL_RCC_OscConfig+0x4f8>
 8004016:	bf00      	nop
 8004018:	40021000 	.word	0x40021000
 800401c:	42420000 	.word	0x42420000
 8004020:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004024:	4b92      	ldr	r3, [pc, #584]	; (8004270 <HAL_RCC_OscConfig+0x4c4>)
 8004026:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004028:	f003 0302 	and.w	r3, r3, #2
 800402c:	2b00      	cmp	r3, #0
 800402e:	d1e9      	bne.n	8004004 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	f003 0304 	and.w	r3, r3, #4
 8004038:	2b00      	cmp	r3, #0
 800403a:	f000 80a6 	beq.w	800418a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800403e:	2300      	movs	r3, #0
 8004040:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004042:	4b8b      	ldr	r3, [pc, #556]	; (8004270 <HAL_RCC_OscConfig+0x4c4>)
 8004044:	69db      	ldr	r3, [r3, #28]
 8004046:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800404a:	2b00      	cmp	r3, #0
 800404c:	d10d      	bne.n	800406a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800404e:	4b88      	ldr	r3, [pc, #544]	; (8004270 <HAL_RCC_OscConfig+0x4c4>)
 8004050:	69db      	ldr	r3, [r3, #28]
 8004052:	4a87      	ldr	r2, [pc, #540]	; (8004270 <HAL_RCC_OscConfig+0x4c4>)
 8004054:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004058:	61d3      	str	r3, [r2, #28]
 800405a:	4b85      	ldr	r3, [pc, #532]	; (8004270 <HAL_RCC_OscConfig+0x4c4>)
 800405c:	69db      	ldr	r3, [r3, #28]
 800405e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004062:	60bb      	str	r3, [r7, #8]
 8004064:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004066:	2301      	movs	r3, #1
 8004068:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800406a:	4b82      	ldr	r3, [pc, #520]	; (8004274 <HAL_RCC_OscConfig+0x4c8>)
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004072:	2b00      	cmp	r3, #0
 8004074:	d118      	bne.n	80040a8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004076:	4b7f      	ldr	r3, [pc, #508]	; (8004274 <HAL_RCC_OscConfig+0x4c8>)
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	4a7e      	ldr	r2, [pc, #504]	; (8004274 <HAL_RCC_OscConfig+0x4c8>)
 800407c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004080:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004082:	f7fd fc07 	bl	8001894 <HAL_GetTick>
 8004086:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004088:	e008      	b.n	800409c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800408a:	f7fd fc03 	bl	8001894 <HAL_GetTick>
 800408e:	4602      	mov	r2, r0
 8004090:	693b      	ldr	r3, [r7, #16]
 8004092:	1ad3      	subs	r3, r2, r3
 8004094:	2b64      	cmp	r3, #100	; 0x64
 8004096:	d901      	bls.n	800409c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004098:	2303      	movs	r3, #3
 800409a:	e103      	b.n	80042a4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800409c:	4b75      	ldr	r3, [pc, #468]	; (8004274 <HAL_RCC_OscConfig+0x4c8>)
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d0f0      	beq.n	800408a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	68db      	ldr	r3, [r3, #12]
 80040ac:	2b01      	cmp	r3, #1
 80040ae:	d106      	bne.n	80040be <HAL_RCC_OscConfig+0x312>
 80040b0:	4b6f      	ldr	r3, [pc, #444]	; (8004270 <HAL_RCC_OscConfig+0x4c4>)
 80040b2:	6a1b      	ldr	r3, [r3, #32]
 80040b4:	4a6e      	ldr	r2, [pc, #440]	; (8004270 <HAL_RCC_OscConfig+0x4c4>)
 80040b6:	f043 0301 	orr.w	r3, r3, #1
 80040ba:	6213      	str	r3, [r2, #32]
 80040bc:	e02d      	b.n	800411a <HAL_RCC_OscConfig+0x36e>
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	68db      	ldr	r3, [r3, #12]
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d10c      	bne.n	80040e0 <HAL_RCC_OscConfig+0x334>
 80040c6:	4b6a      	ldr	r3, [pc, #424]	; (8004270 <HAL_RCC_OscConfig+0x4c4>)
 80040c8:	6a1b      	ldr	r3, [r3, #32]
 80040ca:	4a69      	ldr	r2, [pc, #420]	; (8004270 <HAL_RCC_OscConfig+0x4c4>)
 80040cc:	f023 0301 	bic.w	r3, r3, #1
 80040d0:	6213      	str	r3, [r2, #32]
 80040d2:	4b67      	ldr	r3, [pc, #412]	; (8004270 <HAL_RCC_OscConfig+0x4c4>)
 80040d4:	6a1b      	ldr	r3, [r3, #32]
 80040d6:	4a66      	ldr	r2, [pc, #408]	; (8004270 <HAL_RCC_OscConfig+0x4c4>)
 80040d8:	f023 0304 	bic.w	r3, r3, #4
 80040dc:	6213      	str	r3, [r2, #32]
 80040de:	e01c      	b.n	800411a <HAL_RCC_OscConfig+0x36e>
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	68db      	ldr	r3, [r3, #12]
 80040e4:	2b05      	cmp	r3, #5
 80040e6:	d10c      	bne.n	8004102 <HAL_RCC_OscConfig+0x356>
 80040e8:	4b61      	ldr	r3, [pc, #388]	; (8004270 <HAL_RCC_OscConfig+0x4c4>)
 80040ea:	6a1b      	ldr	r3, [r3, #32]
 80040ec:	4a60      	ldr	r2, [pc, #384]	; (8004270 <HAL_RCC_OscConfig+0x4c4>)
 80040ee:	f043 0304 	orr.w	r3, r3, #4
 80040f2:	6213      	str	r3, [r2, #32]
 80040f4:	4b5e      	ldr	r3, [pc, #376]	; (8004270 <HAL_RCC_OscConfig+0x4c4>)
 80040f6:	6a1b      	ldr	r3, [r3, #32]
 80040f8:	4a5d      	ldr	r2, [pc, #372]	; (8004270 <HAL_RCC_OscConfig+0x4c4>)
 80040fa:	f043 0301 	orr.w	r3, r3, #1
 80040fe:	6213      	str	r3, [r2, #32]
 8004100:	e00b      	b.n	800411a <HAL_RCC_OscConfig+0x36e>
 8004102:	4b5b      	ldr	r3, [pc, #364]	; (8004270 <HAL_RCC_OscConfig+0x4c4>)
 8004104:	6a1b      	ldr	r3, [r3, #32]
 8004106:	4a5a      	ldr	r2, [pc, #360]	; (8004270 <HAL_RCC_OscConfig+0x4c4>)
 8004108:	f023 0301 	bic.w	r3, r3, #1
 800410c:	6213      	str	r3, [r2, #32]
 800410e:	4b58      	ldr	r3, [pc, #352]	; (8004270 <HAL_RCC_OscConfig+0x4c4>)
 8004110:	6a1b      	ldr	r3, [r3, #32]
 8004112:	4a57      	ldr	r2, [pc, #348]	; (8004270 <HAL_RCC_OscConfig+0x4c4>)
 8004114:	f023 0304 	bic.w	r3, r3, #4
 8004118:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	68db      	ldr	r3, [r3, #12]
 800411e:	2b00      	cmp	r3, #0
 8004120:	d015      	beq.n	800414e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004122:	f7fd fbb7 	bl	8001894 <HAL_GetTick>
 8004126:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004128:	e00a      	b.n	8004140 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800412a:	f7fd fbb3 	bl	8001894 <HAL_GetTick>
 800412e:	4602      	mov	r2, r0
 8004130:	693b      	ldr	r3, [r7, #16]
 8004132:	1ad3      	subs	r3, r2, r3
 8004134:	f241 3288 	movw	r2, #5000	; 0x1388
 8004138:	4293      	cmp	r3, r2
 800413a:	d901      	bls.n	8004140 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800413c:	2303      	movs	r3, #3
 800413e:	e0b1      	b.n	80042a4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004140:	4b4b      	ldr	r3, [pc, #300]	; (8004270 <HAL_RCC_OscConfig+0x4c4>)
 8004142:	6a1b      	ldr	r3, [r3, #32]
 8004144:	f003 0302 	and.w	r3, r3, #2
 8004148:	2b00      	cmp	r3, #0
 800414a:	d0ee      	beq.n	800412a <HAL_RCC_OscConfig+0x37e>
 800414c:	e014      	b.n	8004178 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800414e:	f7fd fba1 	bl	8001894 <HAL_GetTick>
 8004152:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004154:	e00a      	b.n	800416c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004156:	f7fd fb9d 	bl	8001894 <HAL_GetTick>
 800415a:	4602      	mov	r2, r0
 800415c:	693b      	ldr	r3, [r7, #16]
 800415e:	1ad3      	subs	r3, r2, r3
 8004160:	f241 3288 	movw	r2, #5000	; 0x1388
 8004164:	4293      	cmp	r3, r2
 8004166:	d901      	bls.n	800416c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004168:	2303      	movs	r3, #3
 800416a:	e09b      	b.n	80042a4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800416c:	4b40      	ldr	r3, [pc, #256]	; (8004270 <HAL_RCC_OscConfig+0x4c4>)
 800416e:	6a1b      	ldr	r3, [r3, #32]
 8004170:	f003 0302 	and.w	r3, r3, #2
 8004174:	2b00      	cmp	r3, #0
 8004176:	d1ee      	bne.n	8004156 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004178:	7dfb      	ldrb	r3, [r7, #23]
 800417a:	2b01      	cmp	r3, #1
 800417c:	d105      	bne.n	800418a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800417e:	4b3c      	ldr	r3, [pc, #240]	; (8004270 <HAL_RCC_OscConfig+0x4c4>)
 8004180:	69db      	ldr	r3, [r3, #28]
 8004182:	4a3b      	ldr	r2, [pc, #236]	; (8004270 <HAL_RCC_OscConfig+0x4c4>)
 8004184:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004188:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	69db      	ldr	r3, [r3, #28]
 800418e:	2b00      	cmp	r3, #0
 8004190:	f000 8087 	beq.w	80042a2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004194:	4b36      	ldr	r3, [pc, #216]	; (8004270 <HAL_RCC_OscConfig+0x4c4>)
 8004196:	685b      	ldr	r3, [r3, #4]
 8004198:	f003 030c 	and.w	r3, r3, #12
 800419c:	2b08      	cmp	r3, #8
 800419e:	d061      	beq.n	8004264 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	69db      	ldr	r3, [r3, #28]
 80041a4:	2b02      	cmp	r3, #2
 80041a6:	d146      	bne.n	8004236 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80041a8:	4b33      	ldr	r3, [pc, #204]	; (8004278 <HAL_RCC_OscConfig+0x4cc>)
 80041aa:	2200      	movs	r2, #0
 80041ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041ae:	f7fd fb71 	bl	8001894 <HAL_GetTick>
 80041b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80041b4:	e008      	b.n	80041c8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80041b6:	f7fd fb6d 	bl	8001894 <HAL_GetTick>
 80041ba:	4602      	mov	r2, r0
 80041bc:	693b      	ldr	r3, [r7, #16]
 80041be:	1ad3      	subs	r3, r2, r3
 80041c0:	2b02      	cmp	r3, #2
 80041c2:	d901      	bls.n	80041c8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80041c4:	2303      	movs	r3, #3
 80041c6:	e06d      	b.n	80042a4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80041c8:	4b29      	ldr	r3, [pc, #164]	; (8004270 <HAL_RCC_OscConfig+0x4c4>)
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d1f0      	bne.n	80041b6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	6a1b      	ldr	r3, [r3, #32]
 80041d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80041dc:	d108      	bne.n	80041f0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80041de:	4b24      	ldr	r3, [pc, #144]	; (8004270 <HAL_RCC_OscConfig+0x4c4>)
 80041e0:	685b      	ldr	r3, [r3, #4]
 80041e2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	689b      	ldr	r3, [r3, #8]
 80041ea:	4921      	ldr	r1, [pc, #132]	; (8004270 <HAL_RCC_OscConfig+0x4c4>)
 80041ec:	4313      	orrs	r3, r2
 80041ee:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80041f0:	4b1f      	ldr	r3, [pc, #124]	; (8004270 <HAL_RCC_OscConfig+0x4c4>)
 80041f2:	685b      	ldr	r3, [r3, #4]
 80041f4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	6a19      	ldr	r1, [r3, #32]
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004200:	430b      	orrs	r3, r1
 8004202:	491b      	ldr	r1, [pc, #108]	; (8004270 <HAL_RCC_OscConfig+0x4c4>)
 8004204:	4313      	orrs	r3, r2
 8004206:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004208:	4b1b      	ldr	r3, [pc, #108]	; (8004278 <HAL_RCC_OscConfig+0x4cc>)
 800420a:	2201      	movs	r2, #1
 800420c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800420e:	f7fd fb41 	bl	8001894 <HAL_GetTick>
 8004212:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004214:	e008      	b.n	8004228 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004216:	f7fd fb3d 	bl	8001894 <HAL_GetTick>
 800421a:	4602      	mov	r2, r0
 800421c:	693b      	ldr	r3, [r7, #16]
 800421e:	1ad3      	subs	r3, r2, r3
 8004220:	2b02      	cmp	r3, #2
 8004222:	d901      	bls.n	8004228 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004224:	2303      	movs	r3, #3
 8004226:	e03d      	b.n	80042a4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004228:	4b11      	ldr	r3, [pc, #68]	; (8004270 <HAL_RCC_OscConfig+0x4c4>)
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004230:	2b00      	cmp	r3, #0
 8004232:	d0f0      	beq.n	8004216 <HAL_RCC_OscConfig+0x46a>
 8004234:	e035      	b.n	80042a2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004236:	4b10      	ldr	r3, [pc, #64]	; (8004278 <HAL_RCC_OscConfig+0x4cc>)
 8004238:	2200      	movs	r2, #0
 800423a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800423c:	f7fd fb2a 	bl	8001894 <HAL_GetTick>
 8004240:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004242:	e008      	b.n	8004256 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004244:	f7fd fb26 	bl	8001894 <HAL_GetTick>
 8004248:	4602      	mov	r2, r0
 800424a:	693b      	ldr	r3, [r7, #16]
 800424c:	1ad3      	subs	r3, r2, r3
 800424e:	2b02      	cmp	r3, #2
 8004250:	d901      	bls.n	8004256 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004252:	2303      	movs	r3, #3
 8004254:	e026      	b.n	80042a4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004256:	4b06      	ldr	r3, [pc, #24]	; (8004270 <HAL_RCC_OscConfig+0x4c4>)
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800425e:	2b00      	cmp	r3, #0
 8004260:	d1f0      	bne.n	8004244 <HAL_RCC_OscConfig+0x498>
 8004262:	e01e      	b.n	80042a2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	69db      	ldr	r3, [r3, #28]
 8004268:	2b01      	cmp	r3, #1
 800426a:	d107      	bne.n	800427c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800426c:	2301      	movs	r3, #1
 800426e:	e019      	b.n	80042a4 <HAL_RCC_OscConfig+0x4f8>
 8004270:	40021000 	.word	0x40021000
 8004274:	40007000 	.word	0x40007000
 8004278:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800427c:	4b0b      	ldr	r3, [pc, #44]	; (80042ac <HAL_RCC_OscConfig+0x500>)
 800427e:	685b      	ldr	r3, [r3, #4]
 8004280:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	6a1b      	ldr	r3, [r3, #32]
 800428c:	429a      	cmp	r2, r3
 800428e:	d106      	bne.n	800429e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800429a:	429a      	cmp	r2, r3
 800429c:	d001      	beq.n	80042a2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800429e:	2301      	movs	r3, #1
 80042a0:	e000      	b.n	80042a4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80042a2:	2300      	movs	r3, #0
}
 80042a4:	4618      	mov	r0, r3
 80042a6:	3718      	adds	r7, #24
 80042a8:	46bd      	mov	sp, r7
 80042aa:	bd80      	pop	{r7, pc}
 80042ac:	40021000 	.word	0x40021000

080042b0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80042b0:	b580      	push	{r7, lr}
 80042b2:	b084      	sub	sp, #16
 80042b4:	af00      	add	r7, sp, #0
 80042b6:	6078      	str	r0, [r7, #4]
 80042b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d101      	bne.n	80042c4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80042c0:	2301      	movs	r3, #1
 80042c2:	e0d0      	b.n	8004466 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80042c4:	4b6a      	ldr	r3, [pc, #424]	; (8004470 <HAL_RCC_ClockConfig+0x1c0>)
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	f003 0307 	and.w	r3, r3, #7
 80042cc:	683a      	ldr	r2, [r7, #0]
 80042ce:	429a      	cmp	r2, r3
 80042d0:	d910      	bls.n	80042f4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80042d2:	4b67      	ldr	r3, [pc, #412]	; (8004470 <HAL_RCC_ClockConfig+0x1c0>)
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	f023 0207 	bic.w	r2, r3, #7
 80042da:	4965      	ldr	r1, [pc, #404]	; (8004470 <HAL_RCC_ClockConfig+0x1c0>)
 80042dc:	683b      	ldr	r3, [r7, #0]
 80042de:	4313      	orrs	r3, r2
 80042e0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80042e2:	4b63      	ldr	r3, [pc, #396]	; (8004470 <HAL_RCC_ClockConfig+0x1c0>)
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	f003 0307 	and.w	r3, r3, #7
 80042ea:	683a      	ldr	r2, [r7, #0]
 80042ec:	429a      	cmp	r2, r3
 80042ee:	d001      	beq.n	80042f4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80042f0:	2301      	movs	r3, #1
 80042f2:	e0b8      	b.n	8004466 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	f003 0302 	and.w	r3, r3, #2
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d020      	beq.n	8004342 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	f003 0304 	and.w	r3, r3, #4
 8004308:	2b00      	cmp	r3, #0
 800430a:	d005      	beq.n	8004318 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800430c:	4b59      	ldr	r3, [pc, #356]	; (8004474 <HAL_RCC_ClockConfig+0x1c4>)
 800430e:	685b      	ldr	r3, [r3, #4]
 8004310:	4a58      	ldr	r2, [pc, #352]	; (8004474 <HAL_RCC_ClockConfig+0x1c4>)
 8004312:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004316:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	f003 0308 	and.w	r3, r3, #8
 8004320:	2b00      	cmp	r3, #0
 8004322:	d005      	beq.n	8004330 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004324:	4b53      	ldr	r3, [pc, #332]	; (8004474 <HAL_RCC_ClockConfig+0x1c4>)
 8004326:	685b      	ldr	r3, [r3, #4]
 8004328:	4a52      	ldr	r2, [pc, #328]	; (8004474 <HAL_RCC_ClockConfig+0x1c4>)
 800432a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800432e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004330:	4b50      	ldr	r3, [pc, #320]	; (8004474 <HAL_RCC_ClockConfig+0x1c4>)
 8004332:	685b      	ldr	r3, [r3, #4]
 8004334:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	689b      	ldr	r3, [r3, #8]
 800433c:	494d      	ldr	r1, [pc, #308]	; (8004474 <HAL_RCC_ClockConfig+0x1c4>)
 800433e:	4313      	orrs	r3, r2
 8004340:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	f003 0301 	and.w	r3, r3, #1
 800434a:	2b00      	cmp	r3, #0
 800434c:	d040      	beq.n	80043d0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	685b      	ldr	r3, [r3, #4]
 8004352:	2b01      	cmp	r3, #1
 8004354:	d107      	bne.n	8004366 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004356:	4b47      	ldr	r3, [pc, #284]	; (8004474 <HAL_RCC_ClockConfig+0x1c4>)
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800435e:	2b00      	cmp	r3, #0
 8004360:	d115      	bne.n	800438e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004362:	2301      	movs	r3, #1
 8004364:	e07f      	b.n	8004466 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	685b      	ldr	r3, [r3, #4]
 800436a:	2b02      	cmp	r3, #2
 800436c:	d107      	bne.n	800437e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800436e:	4b41      	ldr	r3, [pc, #260]	; (8004474 <HAL_RCC_ClockConfig+0x1c4>)
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004376:	2b00      	cmp	r3, #0
 8004378:	d109      	bne.n	800438e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800437a:	2301      	movs	r3, #1
 800437c:	e073      	b.n	8004466 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800437e:	4b3d      	ldr	r3, [pc, #244]	; (8004474 <HAL_RCC_ClockConfig+0x1c4>)
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	f003 0302 	and.w	r3, r3, #2
 8004386:	2b00      	cmp	r3, #0
 8004388:	d101      	bne.n	800438e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800438a:	2301      	movs	r3, #1
 800438c:	e06b      	b.n	8004466 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800438e:	4b39      	ldr	r3, [pc, #228]	; (8004474 <HAL_RCC_ClockConfig+0x1c4>)
 8004390:	685b      	ldr	r3, [r3, #4]
 8004392:	f023 0203 	bic.w	r2, r3, #3
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	685b      	ldr	r3, [r3, #4]
 800439a:	4936      	ldr	r1, [pc, #216]	; (8004474 <HAL_RCC_ClockConfig+0x1c4>)
 800439c:	4313      	orrs	r3, r2
 800439e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80043a0:	f7fd fa78 	bl	8001894 <HAL_GetTick>
 80043a4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80043a6:	e00a      	b.n	80043be <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80043a8:	f7fd fa74 	bl	8001894 <HAL_GetTick>
 80043ac:	4602      	mov	r2, r0
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	1ad3      	subs	r3, r2, r3
 80043b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80043b6:	4293      	cmp	r3, r2
 80043b8:	d901      	bls.n	80043be <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80043ba:	2303      	movs	r3, #3
 80043bc:	e053      	b.n	8004466 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80043be:	4b2d      	ldr	r3, [pc, #180]	; (8004474 <HAL_RCC_ClockConfig+0x1c4>)
 80043c0:	685b      	ldr	r3, [r3, #4]
 80043c2:	f003 020c 	and.w	r2, r3, #12
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	685b      	ldr	r3, [r3, #4]
 80043ca:	009b      	lsls	r3, r3, #2
 80043cc:	429a      	cmp	r2, r3
 80043ce:	d1eb      	bne.n	80043a8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80043d0:	4b27      	ldr	r3, [pc, #156]	; (8004470 <HAL_RCC_ClockConfig+0x1c0>)
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	f003 0307 	and.w	r3, r3, #7
 80043d8:	683a      	ldr	r2, [r7, #0]
 80043da:	429a      	cmp	r2, r3
 80043dc:	d210      	bcs.n	8004400 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80043de:	4b24      	ldr	r3, [pc, #144]	; (8004470 <HAL_RCC_ClockConfig+0x1c0>)
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	f023 0207 	bic.w	r2, r3, #7
 80043e6:	4922      	ldr	r1, [pc, #136]	; (8004470 <HAL_RCC_ClockConfig+0x1c0>)
 80043e8:	683b      	ldr	r3, [r7, #0]
 80043ea:	4313      	orrs	r3, r2
 80043ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80043ee:	4b20      	ldr	r3, [pc, #128]	; (8004470 <HAL_RCC_ClockConfig+0x1c0>)
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	f003 0307 	and.w	r3, r3, #7
 80043f6:	683a      	ldr	r2, [r7, #0]
 80043f8:	429a      	cmp	r2, r3
 80043fa:	d001      	beq.n	8004400 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80043fc:	2301      	movs	r3, #1
 80043fe:	e032      	b.n	8004466 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	f003 0304 	and.w	r3, r3, #4
 8004408:	2b00      	cmp	r3, #0
 800440a:	d008      	beq.n	800441e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800440c:	4b19      	ldr	r3, [pc, #100]	; (8004474 <HAL_RCC_ClockConfig+0x1c4>)
 800440e:	685b      	ldr	r3, [r3, #4]
 8004410:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	68db      	ldr	r3, [r3, #12]
 8004418:	4916      	ldr	r1, [pc, #88]	; (8004474 <HAL_RCC_ClockConfig+0x1c4>)
 800441a:	4313      	orrs	r3, r2
 800441c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	f003 0308 	and.w	r3, r3, #8
 8004426:	2b00      	cmp	r3, #0
 8004428:	d009      	beq.n	800443e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800442a:	4b12      	ldr	r3, [pc, #72]	; (8004474 <HAL_RCC_ClockConfig+0x1c4>)
 800442c:	685b      	ldr	r3, [r3, #4]
 800442e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	691b      	ldr	r3, [r3, #16]
 8004436:	00db      	lsls	r3, r3, #3
 8004438:	490e      	ldr	r1, [pc, #56]	; (8004474 <HAL_RCC_ClockConfig+0x1c4>)
 800443a:	4313      	orrs	r3, r2
 800443c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800443e:	f000 f821 	bl	8004484 <HAL_RCC_GetSysClockFreq>
 8004442:	4602      	mov	r2, r0
 8004444:	4b0b      	ldr	r3, [pc, #44]	; (8004474 <HAL_RCC_ClockConfig+0x1c4>)
 8004446:	685b      	ldr	r3, [r3, #4]
 8004448:	091b      	lsrs	r3, r3, #4
 800444a:	f003 030f 	and.w	r3, r3, #15
 800444e:	490a      	ldr	r1, [pc, #40]	; (8004478 <HAL_RCC_ClockConfig+0x1c8>)
 8004450:	5ccb      	ldrb	r3, [r1, r3]
 8004452:	fa22 f303 	lsr.w	r3, r2, r3
 8004456:	4a09      	ldr	r2, [pc, #36]	; (800447c <HAL_RCC_ClockConfig+0x1cc>)
 8004458:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800445a:	4b09      	ldr	r3, [pc, #36]	; (8004480 <HAL_RCC_ClockConfig+0x1d0>)
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	4618      	mov	r0, r3
 8004460:	f7fd f9d6 	bl	8001810 <HAL_InitTick>

  return HAL_OK;
 8004464:	2300      	movs	r3, #0
}
 8004466:	4618      	mov	r0, r3
 8004468:	3710      	adds	r7, #16
 800446a:	46bd      	mov	sp, r7
 800446c:	bd80      	pop	{r7, pc}
 800446e:	bf00      	nop
 8004470:	40022000 	.word	0x40022000
 8004474:	40021000 	.word	0x40021000
 8004478:	0800a268 	.word	0x0800a268
 800447c:	20000000 	.word	0x20000000
 8004480:	20000004 	.word	0x20000004

08004484 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004484:	b490      	push	{r4, r7}
 8004486:	b08a      	sub	sp, #40	; 0x28
 8004488:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800448a:	4b29      	ldr	r3, [pc, #164]	; (8004530 <HAL_RCC_GetSysClockFreq+0xac>)
 800448c:	1d3c      	adds	r4, r7, #4
 800448e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004490:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8004494:	f240 2301 	movw	r3, #513	; 0x201
 8004498:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800449a:	2300      	movs	r3, #0
 800449c:	61fb      	str	r3, [r7, #28]
 800449e:	2300      	movs	r3, #0
 80044a0:	61bb      	str	r3, [r7, #24]
 80044a2:	2300      	movs	r3, #0
 80044a4:	627b      	str	r3, [r7, #36]	; 0x24
 80044a6:	2300      	movs	r3, #0
 80044a8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80044aa:	2300      	movs	r3, #0
 80044ac:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80044ae:	4b21      	ldr	r3, [pc, #132]	; (8004534 <HAL_RCC_GetSysClockFreq+0xb0>)
 80044b0:	685b      	ldr	r3, [r3, #4]
 80044b2:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80044b4:	69fb      	ldr	r3, [r7, #28]
 80044b6:	f003 030c 	and.w	r3, r3, #12
 80044ba:	2b04      	cmp	r3, #4
 80044bc:	d002      	beq.n	80044c4 <HAL_RCC_GetSysClockFreq+0x40>
 80044be:	2b08      	cmp	r3, #8
 80044c0:	d003      	beq.n	80044ca <HAL_RCC_GetSysClockFreq+0x46>
 80044c2:	e02b      	b.n	800451c <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80044c4:	4b1c      	ldr	r3, [pc, #112]	; (8004538 <HAL_RCC_GetSysClockFreq+0xb4>)
 80044c6:	623b      	str	r3, [r7, #32]
      break;
 80044c8:	e02b      	b.n	8004522 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80044ca:	69fb      	ldr	r3, [r7, #28]
 80044cc:	0c9b      	lsrs	r3, r3, #18
 80044ce:	f003 030f 	and.w	r3, r3, #15
 80044d2:	3328      	adds	r3, #40	; 0x28
 80044d4:	443b      	add	r3, r7
 80044d6:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80044da:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80044dc:	69fb      	ldr	r3, [r7, #28]
 80044de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d012      	beq.n	800450c <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80044e6:	4b13      	ldr	r3, [pc, #76]	; (8004534 <HAL_RCC_GetSysClockFreq+0xb0>)
 80044e8:	685b      	ldr	r3, [r3, #4]
 80044ea:	0c5b      	lsrs	r3, r3, #17
 80044ec:	f003 0301 	and.w	r3, r3, #1
 80044f0:	3328      	adds	r3, #40	; 0x28
 80044f2:	443b      	add	r3, r7
 80044f4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80044f8:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80044fa:	697b      	ldr	r3, [r7, #20]
 80044fc:	4a0e      	ldr	r2, [pc, #56]	; (8004538 <HAL_RCC_GetSysClockFreq+0xb4>)
 80044fe:	fb03 f202 	mul.w	r2, r3, r2
 8004502:	69bb      	ldr	r3, [r7, #24]
 8004504:	fbb2 f3f3 	udiv	r3, r2, r3
 8004508:	627b      	str	r3, [r7, #36]	; 0x24
 800450a:	e004      	b.n	8004516 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800450c:	697b      	ldr	r3, [r7, #20]
 800450e:	4a0b      	ldr	r2, [pc, #44]	; (800453c <HAL_RCC_GetSysClockFreq+0xb8>)
 8004510:	fb02 f303 	mul.w	r3, r2, r3
 8004514:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8004516:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004518:	623b      	str	r3, [r7, #32]
      break;
 800451a:	e002      	b.n	8004522 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800451c:	4b06      	ldr	r3, [pc, #24]	; (8004538 <HAL_RCC_GetSysClockFreq+0xb4>)
 800451e:	623b      	str	r3, [r7, #32]
      break;
 8004520:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004522:	6a3b      	ldr	r3, [r7, #32]
}
 8004524:	4618      	mov	r0, r3
 8004526:	3728      	adds	r7, #40	; 0x28
 8004528:	46bd      	mov	sp, r7
 800452a:	bc90      	pop	{r4, r7}
 800452c:	4770      	bx	lr
 800452e:	bf00      	nop
 8004530:	0800a198 	.word	0x0800a198
 8004534:	40021000 	.word	0x40021000
 8004538:	007a1200 	.word	0x007a1200
 800453c:	003d0900 	.word	0x003d0900

08004540 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004540:	b480      	push	{r7}
 8004542:	b085      	sub	sp, #20
 8004544:	af00      	add	r7, sp, #0
 8004546:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004548:	4b0a      	ldr	r3, [pc, #40]	; (8004574 <RCC_Delay+0x34>)
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	4a0a      	ldr	r2, [pc, #40]	; (8004578 <RCC_Delay+0x38>)
 800454e:	fba2 2303 	umull	r2, r3, r2, r3
 8004552:	0a5b      	lsrs	r3, r3, #9
 8004554:	687a      	ldr	r2, [r7, #4]
 8004556:	fb02 f303 	mul.w	r3, r2, r3
 800455a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800455c:	bf00      	nop
  }
  while (Delay --);
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	1e5a      	subs	r2, r3, #1
 8004562:	60fa      	str	r2, [r7, #12]
 8004564:	2b00      	cmp	r3, #0
 8004566:	d1f9      	bne.n	800455c <RCC_Delay+0x1c>
}
 8004568:	bf00      	nop
 800456a:	bf00      	nop
 800456c:	3714      	adds	r7, #20
 800456e:	46bd      	mov	sp, r7
 8004570:	bc80      	pop	{r7}
 8004572:	4770      	bx	lr
 8004574:	20000000 	.word	0x20000000
 8004578:	10624dd3 	.word	0x10624dd3

0800457c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800457c:	b580      	push	{r7, lr}
 800457e:	b086      	sub	sp, #24
 8004580:	af00      	add	r7, sp, #0
 8004582:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8004584:	2300      	movs	r3, #0
 8004586:	613b      	str	r3, [r7, #16]
 8004588:	2300      	movs	r3, #0
 800458a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	f003 0301 	and.w	r3, r3, #1
 8004594:	2b00      	cmp	r3, #0
 8004596:	d07d      	beq.n	8004694 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8004598:	2300      	movs	r3, #0
 800459a:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800459c:	4b4f      	ldr	r3, [pc, #316]	; (80046dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800459e:	69db      	ldr	r3, [r3, #28]
 80045a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d10d      	bne.n	80045c4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80045a8:	4b4c      	ldr	r3, [pc, #304]	; (80046dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80045aa:	69db      	ldr	r3, [r3, #28]
 80045ac:	4a4b      	ldr	r2, [pc, #300]	; (80046dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80045ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80045b2:	61d3      	str	r3, [r2, #28]
 80045b4:	4b49      	ldr	r3, [pc, #292]	; (80046dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80045b6:	69db      	ldr	r3, [r3, #28]
 80045b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80045bc:	60bb      	str	r3, [r7, #8]
 80045be:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80045c0:	2301      	movs	r3, #1
 80045c2:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80045c4:	4b46      	ldr	r3, [pc, #280]	; (80046e0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d118      	bne.n	8004602 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80045d0:	4b43      	ldr	r3, [pc, #268]	; (80046e0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	4a42      	ldr	r2, [pc, #264]	; (80046e0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80045d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80045da:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80045dc:	f7fd f95a 	bl	8001894 <HAL_GetTick>
 80045e0:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80045e2:	e008      	b.n	80045f6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80045e4:	f7fd f956 	bl	8001894 <HAL_GetTick>
 80045e8:	4602      	mov	r2, r0
 80045ea:	693b      	ldr	r3, [r7, #16]
 80045ec:	1ad3      	subs	r3, r2, r3
 80045ee:	2b64      	cmp	r3, #100	; 0x64
 80045f0:	d901      	bls.n	80045f6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80045f2:	2303      	movs	r3, #3
 80045f4:	e06d      	b.n	80046d2 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80045f6:	4b3a      	ldr	r3, [pc, #232]	; (80046e0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d0f0      	beq.n	80045e4 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004602:	4b36      	ldr	r3, [pc, #216]	; (80046dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004604:	6a1b      	ldr	r3, [r3, #32]
 8004606:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800460a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	2b00      	cmp	r3, #0
 8004610:	d02e      	beq.n	8004670 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	685b      	ldr	r3, [r3, #4]
 8004616:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800461a:	68fa      	ldr	r2, [r7, #12]
 800461c:	429a      	cmp	r2, r3
 800461e:	d027      	beq.n	8004670 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004620:	4b2e      	ldr	r3, [pc, #184]	; (80046dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004622:	6a1b      	ldr	r3, [r3, #32]
 8004624:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004628:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800462a:	4b2e      	ldr	r3, [pc, #184]	; (80046e4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800462c:	2201      	movs	r2, #1
 800462e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004630:	4b2c      	ldr	r3, [pc, #176]	; (80046e4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004632:	2200      	movs	r2, #0
 8004634:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004636:	4a29      	ldr	r2, [pc, #164]	; (80046dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	f003 0301 	and.w	r3, r3, #1
 8004642:	2b00      	cmp	r3, #0
 8004644:	d014      	beq.n	8004670 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004646:	f7fd f925 	bl	8001894 <HAL_GetTick>
 800464a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800464c:	e00a      	b.n	8004664 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800464e:	f7fd f921 	bl	8001894 <HAL_GetTick>
 8004652:	4602      	mov	r2, r0
 8004654:	693b      	ldr	r3, [r7, #16]
 8004656:	1ad3      	subs	r3, r2, r3
 8004658:	f241 3288 	movw	r2, #5000	; 0x1388
 800465c:	4293      	cmp	r3, r2
 800465e:	d901      	bls.n	8004664 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8004660:	2303      	movs	r3, #3
 8004662:	e036      	b.n	80046d2 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004664:	4b1d      	ldr	r3, [pc, #116]	; (80046dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004666:	6a1b      	ldr	r3, [r3, #32]
 8004668:	f003 0302 	and.w	r3, r3, #2
 800466c:	2b00      	cmp	r3, #0
 800466e:	d0ee      	beq.n	800464e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004670:	4b1a      	ldr	r3, [pc, #104]	; (80046dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004672:	6a1b      	ldr	r3, [r3, #32]
 8004674:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	685b      	ldr	r3, [r3, #4]
 800467c:	4917      	ldr	r1, [pc, #92]	; (80046dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800467e:	4313      	orrs	r3, r2
 8004680:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004682:	7dfb      	ldrb	r3, [r7, #23]
 8004684:	2b01      	cmp	r3, #1
 8004686:	d105      	bne.n	8004694 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004688:	4b14      	ldr	r3, [pc, #80]	; (80046dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800468a:	69db      	ldr	r3, [r3, #28]
 800468c:	4a13      	ldr	r2, [pc, #76]	; (80046dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800468e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004692:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	f003 0302 	and.w	r3, r3, #2
 800469c:	2b00      	cmp	r3, #0
 800469e:	d008      	beq.n	80046b2 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80046a0:	4b0e      	ldr	r3, [pc, #56]	; (80046dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80046a2:	685b      	ldr	r3, [r3, #4]
 80046a4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	689b      	ldr	r3, [r3, #8]
 80046ac:	490b      	ldr	r1, [pc, #44]	; (80046dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80046ae:	4313      	orrs	r3, r2
 80046b0:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	f003 0310 	and.w	r3, r3, #16
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d008      	beq.n	80046d0 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80046be:	4b07      	ldr	r3, [pc, #28]	; (80046dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80046c0:	685b      	ldr	r3, [r3, #4]
 80046c2:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	68db      	ldr	r3, [r3, #12]
 80046ca:	4904      	ldr	r1, [pc, #16]	; (80046dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80046cc:	4313      	orrs	r3, r2
 80046ce:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80046d0:	2300      	movs	r3, #0
}
 80046d2:	4618      	mov	r0, r3
 80046d4:	3718      	adds	r7, #24
 80046d6:	46bd      	mov	sp, r7
 80046d8:	bd80      	pop	{r7, pc}
 80046da:	bf00      	nop
 80046dc:	40021000 	.word	0x40021000
 80046e0:	40007000 	.word	0x40007000
 80046e4:	42420440 	.word	0x42420440

080046e8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80046e8:	b580      	push	{r7, lr}
 80046ea:	b082      	sub	sp, #8
 80046ec:	af00      	add	r7, sp, #0
 80046ee:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d101      	bne.n	80046fa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80046f6:	2301      	movs	r3, #1
 80046f8:	e076      	b.n	80047e8 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d108      	bne.n	8004714 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	685b      	ldr	r3, [r3, #4]
 8004706:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800470a:	d009      	beq.n	8004720 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	2200      	movs	r2, #0
 8004710:	61da      	str	r2, [r3, #28]
 8004712:	e005      	b.n	8004720 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	2200      	movs	r2, #0
 8004718:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	2200      	movs	r2, #0
 800471e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	2200      	movs	r2, #0
 8004724:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800472c:	b2db      	uxtb	r3, r3
 800472e:	2b00      	cmp	r3, #0
 8004730:	d106      	bne.n	8004740 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	2200      	movs	r2, #0
 8004736:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800473a:	6878      	ldr	r0, [r7, #4]
 800473c:	f7fc ff16 	bl	800156c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	2202      	movs	r2, #2
 8004744:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	681a      	ldr	r2, [r3, #0]
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004756:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	685b      	ldr	r3, [r3, #4]
 800475c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	689b      	ldr	r3, [r3, #8]
 8004764:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004768:	431a      	orrs	r2, r3
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	68db      	ldr	r3, [r3, #12]
 800476e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004772:	431a      	orrs	r2, r3
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	691b      	ldr	r3, [r3, #16]
 8004778:	f003 0302 	and.w	r3, r3, #2
 800477c:	431a      	orrs	r2, r3
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	695b      	ldr	r3, [r3, #20]
 8004782:	f003 0301 	and.w	r3, r3, #1
 8004786:	431a      	orrs	r2, r3
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	699b      	ldr	r3, [r3, #24]
 800478c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004790:	431a      	orrs	r2, r3
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	69db      	ldr	r3, [r3, #28]
 8004796:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800479a:	431a      	orrs	r2, r3
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	6a1b      	ldr	r3, [r3, #32]
 80047a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047a4:	ea42 0103 	orr.w	r1, r2, r3
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047ac:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	430a      	orrs	r2, r1
 80047b6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	699b      	ldr	r3, [r3, #24]
 80047bc:	0c1a      	lsrs	r2, r3, #16
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	f002 0204 	and.w	r2, r2, #4
 80047c6:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	69da      	ldr	r2, [r3, #28]
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80047d6:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	2200      	movs	r2, #0
 80047dc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	2201      	movs	r2, #1
 80047e2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80047e6:	2300      	movs	r3, #0
}
 80047e8:	4618      	mov	r0, r3
 80047ea:	3708      	adds	r7, #8
 80047ec:	46bd      	mov	sp, r7
 80047ee:	bd80      	pop	{r7, pc}

080047f0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80047f0:	b580      	push	{r7, lr}
 80047f2:	b082      	sub	sp, #8
 80047f4:	af00      	add	r7, sp, #0
 80047f6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d101      	bne.n	8004802 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80047fe:	2301      	movs	r3, #1
 8004800:	e041      	b.n	8004886 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004808:	b2db      	uxtb	r3, r3
 800480a:	2b00      	cmp	r3, #0
 800480c:	d106      	bne.n	800481c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	2200      	movs	r2, #0
 8004812:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004816:	6878      	ldr	r0, [r7, #4]
 8004818:	f7fc fef2 	bl	8001600 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	2202      	movs	r2, #2
 8004820:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681a      	ldr	r2, [r3, #0]
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	3304      	adds	r3, #4
 800482c:	4619      	mov	r1, r3
 800482e:	4610      	mov	r0, r2
 8004830:	f000 fc08 	bl	8005044 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	2201      	movs	r2, #1
 8004838:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	2201      	movs	r2, #1
 8004840:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	2201      	movs	r2, #1
 8004848:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	2201      	movs	r2, #1
 8004850:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	2201      	movs	r2, #1
 8004858:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	2201      	movs	r2, #1
 8004860:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	2201      	movs	r2, #1
 8004868:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	2201      	movs	r2, #1
 8004870:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	2201      	movs	r2, #1
 8004878:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	2201      	movs	r2, #1
 8004880:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004884:	2300      	movs	r3, #0
}
 8004886:	4618      	mov	r0, r3
 8004888:	3708      	adds	r7, #8
 800488a:	46bd      	mov	sp, r7
 800488c:	bd80      	pop	{r7, pc}

0800488e <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800488e:	b580      	push	{r7, lr}
 8004890:	b082      	sub	sp, #8
 8004892:	af00      	add	r7, sp, #0
 8004894:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	2b00      	cmp	r3, #0
 800489a:	d101      	bne.n	80048a0 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800489c:	2301      	movs	r3, #1
 800489e:	e041      	b.n	8004924 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048a6:	b2db      	uxtb	r3, r3
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d106      	bne.n	80048ba <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	2200      	movs	r2, #0
 80048b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80048b4:	6878      	ldr	r0, [r7, #4]
 80048b6:	f000 f839 	bl	800492c <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	2202      	movs	r2, #2
 80048be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681a      	ldr	r2, [r3, #0]
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	3304      	adds	r3, #4
 80048ca:	4619      	mov	r1, r3
 80048cc:	4610      	mov	r0, r2
 80048ce:	f000 fbb9 	bl	8005044 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	2201      	movs	r2, #1
 80048d6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	2201      	movs	r2, #1
 80048de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	2201      	movs	r2, #1
 80048e6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	2201      	movs	r2, #1
 80048ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	2201      	movs	r2, #1
 80048f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	2201      	movs	r2, #1
 80048fe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	2201      	movs	r2, #1
 8004906:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	2201      	movs	r2, #1
 800490e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	2201      	movs	r2, #1
 8004916:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	2201      	movs	r2, #1
 800491e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004922:	2300      	movs	r3, #0
}
 8004924:	4618      	mov	r0, r3
 8004926:	3708      	adds	r7, #8
 8004928:	46bd      	mov	sp, r7
 800492a:	bd80      	pop	{r7, pc}

0800492c <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 800492c:	b480      	push	{r7}
 800492e:	b083      	sub	sp, #12
 8004930:	af00      	add	r7, sp, #0
 8004932:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8004934:	bf00      	nop
 8004936:	370c      	adds	r7, #12
 8004938:	46bd      	mov	sp, r7
 800493a:	bc80      	pop	{r7}
 800493c:	4770      	bx	lr
	...

08004940 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004940:	b580      	push	{r7, lr}
 8004942:	b084      	sub	sp, #16
 8004944:	af00      	add	r7, sp, #0
 8004946:	6078      	str	r0, [r7, #4]
 8004948:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800494a:	683b      	ldr	r3, [r7, #0]
 800494c:	2b00      	cmp	r3, #0
 800494e:	d104      	bne.n	800495a <HAL_TIM_IC_Start_IT+0x1a>
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004956:	b2db      	uxtb	r3, r3
 8004958:	e013      	b.n	8004982 <HAL_TIM_IC_Start_IT+0x42>
 800495a:	683b      	ldr	r3, [r7, #0]
 800495c:	2b04      	cmp	r3, #4
 800495e:	d104      	bne.n	800496a <HAL_TIM_IC_Start_IT+0x2a>
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004966:	b2db      	uxtb	r3, r3
 8004968:	e00b      	b.n	8004982 <HAL_TIM_IC_Start_IT+0x42>
 800496a:	683b      	ldr	r3, [r7, #0]
 800496c:	2b08      	cmp	r3, #8
 800496e:	d104      	bne.n	800497a <HAL_TIM_IC_Start_IT+0x3a>
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004976:	b2db      	uxtb	r3, r3
 8004978:	e003      	b.n	8004982 <HAL_TIM_IC_Start_IT+0x42>
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004980:	b2db      	uxtb	r3, r3
 8004982:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8004984:	683b      	ldr	r3, [r7, #0]
 8004986:	2b00      	cmp	r3, #0
 8004988:	d104      	bne.n	8004994 <HAL_TIM_IC_Start_IT+0x54>
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004990:	b2db      	uxtb	r3, r3
 8004992:	e013      	b.n	80049bc <HAL_TIM_IC_Start_IT+0x7c>
 8004994:	683b      	ldr	r3, [r7, #0]
 8004996:	2b04      	cmp	r3, #4
 8004998:	d104      	bne.n	80049a4 <HAL_TIM_IC_Start_IT+0x64>
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80049a0:	b2db      	uxtb	r3, r3
 80049a2:	e00b      	b.n	80049bc <HAL_TIM_IC_Start_IT+0x7c>
 80049a4:	683b      	ldr	r3, [r7, #0]
 80049a6:	2b08      	cmp	r3, #8
 80049a8:	d104      	bne.n	80049b4 <HAL_TIM_IC_Start_IT+0x74>
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80049b0:	b2db      	uxtb	r3, r3
 80049b2:	e003      	b.n	80049bc <HAL_TIM_IC_Start_IT+0x7c>
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80049ba:	b2db      	uxtb	r3, r3
 80049bc:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 80049be:	7bfb      	ldrb	r3, [r7, #15]
 80049c0:	2b01      	cmp	r3, #1
 80049c2:	d102      	bne.n	80049ca <HAL_TIM_IC_Start_IT+0x8a>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 80049c4:	7bbb      	ldrb	r3, [r7, #14]
 80049c6:	2b01      	cmp	r3, #1
 80049c8:	d001      	beq.n	80049ce <HAL_TIM_IC_Start_IT+0x8e>
  {
    return HAL_ERROR;
 80049ca:	2301      	movs	r3, #1
 80049cc:	e0b3      	b.n	8004b36 <HAL_TIM_IC_Start_IT+0x1f6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80049ce:	683b      	ldr	r3, [r7, #0]
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d104      	bne.n	80049de <HAL_TIM_IC_Start_IT+0x9e>
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	2202      	movs	r2, #2
 80049d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80049dc:	e013      	b.n	8004a06 <HAL_TIM_IC_Start_IT+0xc6>
 80049de:	683b      	ldr	r3, [r7, #0]
 80049e0:	2b04      	cmp	r3, #4
 80049e2:	d104      	bne.n	80049ee <HAL_TIM_IC_Start_IT+0xae>
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	2202      	movs	r2, #2
 80049e8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80049ec:	e00b      	b.n	8004a06 <HAL_TIM_IC_Start_IT+0xc6>
 80049ee:	683b      	ldr	r3, [r7, #0]
 80049f0:	2b08      	cmp	r3, #8
 80049f2:	d104      	bne.n	80049fe <HAL_TIM_IC_Start_IT+0xbe>
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	2202      	movs	r2, #2
 80049f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80049fc:	e003      	b.n	8004a06 <HAL_TIM_IC_Start_IT+0xc6>
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	2202      	movs	r2, #2
 8004a02:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004a06:	683b      	ldr	r3, [r7, #0]
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d104      	bne.n	8004a16 <HAL_TIM_IC_Start_IT+0xd6>
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	2202      	movs	r2, #2
 8004a10:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004a14:	e013      	b.n	8004a3e <HAL_TIM_IC_Start_IT+0xfe>
 8004a16:	683b      	ldr	r3, [r7, #0]
 8004a18:	2b04      	cmp	r3, #4
 8004a1a:	d104      	bne.n	8004a26 <HAL_TIM_IC_Start_IT+0xe6>
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	2202      	movs	r2, #2
 8004a20:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004a24:	e00b      	b.n	8004a3e <HAL_TIM_IC_Start_IT+0xfe>
 8004a26:	683b      	ldr	r3, [r7, #0]
 8004a28:	2b08      	cmp	r3, #8
 8004a2a:	d104      	bne.n	8004a36 <HAL_TIM_IC_Start_IT+0xf6>
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	2202      	movs	r2, #2
 8004a30:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004a34:	e003      	b.n	8004a3e <HAL_TIM_IC_Start_IT+0xfe>
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	2202      	movs	r2, #2
 8004a3a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 8004a3e:	683b      	ldr	r3, [r7, #0]
 8004a40:	2b0c      	cmp	r3, #12
 8004a42:	d841      	bhi.n	8004ac8 <HAL_TIM_IC_Start_IT+0x188>
 8004a44:	a201      	add	r2, pc, #4	; (adr r2, 8004a4c <HAL_TIM_IC_Start_IT+0x10c>)
 8004a46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a4a:	bf00      	nop
 8004a4c:	08004a81 	.word	0x08004a81
 8004a50:	08004ac9 	.word	0x08004ac9
 8004a54:	08004ac9 	.word	0x08004ac9
 8004a58:	08004ac9 	.word	0x08004ac9
 8004a5c:	08004a93 	.word	0x08004a93
 8004a60:	08004ac9 	.word	0x08004ac9
 8004a64:	08004ac9 	.word	0x08004ac9
 8004a68:	08004ac9 	.word	0x08004ac9
 8004a6c:	08004aa5 	.word	0x08004aa5
 8004a70:	08004ac9 	.word	0x08004ac9
 8004a74:	08004ac9 	.word	0x08004ac9
 8004a78:	08004ac9 	.word	0x08004ac9
 8004a7c:	08004ab7 	.word	0x08004ab7
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	68da      	ldr	r2, [r3, #12]
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	f042 0202 	orr.w	r2, r2, #2
 8004a8e:	60da      	str	r2, [r3, #12]
      break;
 8004a90:	e01b      	b.n	8004aca <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	68da      	ldr	r2, [r3, #12]
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	f042 0204 	orr.w	r2, r2, #4
 8004aa0:	60da      	str	r2, [r3, #12]
      break;
 8004aa2:	e012      	b.n	8004aca <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	68da      	ldr	r2, [r3, #12]
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	f042 0208 	orr.w	r2, r2, #8
 8004ab2:	60da      	str	r2, [r3, #12]
      break;
 8004ab4:	e009      	b.n	8004aca <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	68da      	ldr	r2, [r3, #12]
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	f042 0210 	orr.w	r2, r2, #16
 8004ac4:	60da      	str	r2, [r3, #12]
      break;
 8004ac6:	e000      	b.n	8004aca <HAL_TIM_IC_Start_IT+0x18a>
    }

    default:
      break;
 8004ac8:	bf00      	nop
  }
  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	2201      	movs	r2, #1
 8004ad0:	6839      	ldr	r1, [r7, #0]
 8004ad2:	4618      	mov	r0, r3
 8004ad4:	f000 fcbb 	bl	800544e <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	4a18      	ldr	r2, [pc, #96]	; (8004b40 <HAL_TIM_IC_Start_IT+0x200>)
 8004ade:	4293      	cmp	r3, r2
 8004ae0:	d00e      	beq.n	8004b00 <HAL_TIM_IC_Start_IT+0x1c0>
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004aea:	d009      	beq.n	8004b00 <HAL_TIM_IC_Start_IT+0x1c0>
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	4a14      	ldr	r2, [pc, #80]	; (8004b44 <HAL_TIM_IC_Start_IT+0x204>)
 8004af2:	4293      	cmp	r3, r2
 8004af4:	d004      	beq.n	8004b00 <HAL_TIM_IC_Start_IT+0x1c0>
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	4a13      	ldr	r2, [pc, #76]	; (8004b48 <HAL_TIM_IC_Start_IT+0x208>)
 8004afc:	4293      	cmp	r3, r2
 8004afe:	d111      	bne.n	8004b24 <HAL_TIM_IC_Start_IT+0x1e4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	689b      	ldr	r3, [r3, #8]
 8004b06:	f003 0307 	and.w	r3, r3, #7
 8004b0a:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b0c:	68bb      	ldr	r3, [r7, #8]
 8004b0e:	2b06      	cmp	r3, #6
 8004b10:	d010      	beq.n	8004b34 <HAL_TIM_IC_Start_IT+0x1f4>
    {
      __HAL_TIM_ENABLE(htim);
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	681a      	ldr	r2, [r3, #0]
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	f042 0201 	orr.w	r2, r2, #1
 8004b20:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b22:	e007      	b.n	8004b34 <HAL_TIM_IC_Start_IT+0x1f4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	681a      	ldr	r2, [r3, #0]
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	f042 0201 	orr.w	r2, r2, #1
 8004b32:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004b34:	2300      	movs	r3, #0
}
 8004b36:	4618      	mov	r0, r3
 8004b38:	3710      	adds	r7, #16
 8004b3a:	46bd      	mov	sp, r7
 8004b3c:	bd80      	pop	{r7, pc}
 8004b3e:	bf00      	nop
 8004b40:	40012c00 	.word	0x40012c00
 8004b44:	40000400 	.word	0x40000400
 8004b48:	40000800 	.word	0x40000800

08004b4c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004b4c:	b580      	push	{r7, lr}
 8004b4e:	b082      	sub	sp, #8
 8004b50:	af00      	add	r7, sp, #0
 8004b52:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	691b      	ldr	r3, [r3, #16]
 8004b5a:	f003 0302 	and.w	r3, r3, #2
 8004b5e:	2b02      	cmp	r3, #2
 8004b60:	d122      	bne.n	8004ba8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	68db      	ldr	r3, [r3, #12]
 8004b68:	f003 0302 	and.w	r3, r3, #2
 8004b6c:	2b02      	cmp	r3, #2
 8004b6e:	d11b      	bne.n	8004ba8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	f06f 0202 	mvn.w	r2, #2
 8004b78:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	2201      	movs	r2, #1
 8004b7e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	699b      	ldr	r3, [r3, #24]
 8004b86:	f003 0303 	and.w	r3, r3, #3
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d003      	beq.n	8004b96 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004b8e:	6878      	ldr	r0, [r7, #4]
 8004b90:	f7fc fb16 	bl	80011c0 <HAL_TIM_IC_CaptureCallback>
 8004b94:	e005      	b.n	8004ba2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b96:	6878      	ldr	r0, [r7, #4]
 8004b98:	f000 fa38 	bl	800500c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b9c:	6878      	ldr	r0, [r7, #4]
 8004b9e:	f000 fa3e 	bl	800501e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	2200      	movs	r2, #0
 8004ba6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	691b      	ldr	r3, [r3, #16]
 8004bae:	f003 0304 	and.w	r3, r3, #4
 8004bb2:	2b04      	cmp	r3, #4
 8004bb4:	d122      	bne.n	8004bfc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	68db      	ldr	r3, [r3, #12]
 8004bbc:	f003 0304 	and.w	r3, r3, #4
 8004bc0:	2b04      	cmp	r3, #4
 8004bc2:	d11b      	bne.n	8004bfc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	f06f 0204 	mvn.w	r2, #4
 8004bcc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	2202      	movs	r2, #2
 8004bd2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	699b      	ldr	r3, [r3, #24]
 8004bda:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d003      	beq.n	8004bea <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004be2:	6878      	ldr	r0, [r7, #4]
 8004be4:	f7fc faec 	bl	80011c0 <HAL_TIM_IC_CaptureCallback>
 8004be8:	e005      	b.n	8004bf6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004bea:	6878      	ldr	r0, [r7, #4]
 8004bec:	f000 fa0e 	bl	800500c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004bf0:	6878      	ldr	r0, [r7, #4]
 8004bf2:	f000 fa14 	bl	800501e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	2200      	movs	r2, #0
 8004bfa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	691b      	ldr	r3, [r3, #16]
 8004c02:	f003 0308 	and.w	r3, r3, #8
 8004c06:	2b08      	cmp	r3, #8
 8004c08:	d122      	bne.n	8004c50 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	68db      	ldr	r3, [r3, #12]
 8004c10:	f003 0308 	and.w	r3, r3, #8
 8004c14:	2b08      	cmp	r3, #8
 8004c16:	d11b      	bne.n	8004c50 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	f06f 0208 	mvn.w	r2, #8
 8004c20:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	2204      	movs	r2, #4
 8004c26:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	69db      	ldr	r3, [r3, #28]
 8004c2e:	f003 0303 	and.w	r3, r3, #3
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d003      	beq.n	8004c3e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c36:	6878      	ldr	r0, [r7, #4]
 8004c38:	f7fc fac2 	bl	80011c0 <HAL_TIM_IC_CaptureCallback>
 8004c3c:	e005      	b.n	8004c4a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c3e:	6878      	ldr	r0, [r7, #4]
 8004c40:	f000 f9e4 	bl	800500c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c44:	6878      	ldr	r0, [r7, #4]
 8004c46:	f000 f9ea 	bl	800501e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	2200      	movs	r2, #0
 8004c4e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	691b      	ldr	r3, [r3, #16]
 8004c56:	f003 0310 	and.w	r3, r3, #16
 8004c5a:	2b10      	cmp	r3, #16
 8004c5c:	d122      	bne.n	8004ca4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	68db      	ldr	r3, [r3, #12]
 8004c64:	f003 0310 	and.w	r3, r3, #16
 8004c68:	2b10      	cmp	r3, #16
 8004c6a:	d11b      	bne.n	8004ca4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	f06f 0210 	mvn.w	r2, #16
 8004c74:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	2208      	movs	r2, #8
 8004c7a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	69db      	ldr	r3, [r3, #28]
 8004c82:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d003      	beq.n	8004c92 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c8a:	6878      	ldr	r0, [r7, #4]
 8004c8c:	f7fc fa98 	bl	80011c0 <HAL_TIM_IC_CaptureCallback>
 8004c90:	e005      	b.n	8004c9e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c92:	6878      	ldr	r0, [r7, #4]
 8004c94:	f000 f9ba 	bl	800500c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c98:	6878      	ldr	r0, [r7, #4]
 8004c9a:	f000 f9c0 	bl	800501e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	2200      	movs	r2, #0
 8004ca2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	691b      	ldr	r3, [r3, #16]
 8004caa:	f003 0301 	and.w	r3, r3, #1
 8004cae:	2b01      	cmp	r3, #1
 8004cb0:	d10e      	bne.n	8004cd0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	68db      	ldr	r3, [r3, #12]
 8004cb8:	f003 0301 	and.w	r3, r3, #1
 8004cbc:	2b01      	cmp	r3, #1
 8004cbe:	d107      	bne.n	8004cd0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	f06f 0201 	mvn.w	r2, #1
 8004cc8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004cca:	6878      	ldr	r0, [r7, #4]
 8004ccc:	f7fc fa4c 	bl	8001168 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	691b      	ldr	r3, [r3, #16]
 8004cd6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004cda:	2b80      	cmp	r3, #128	; 0x80
 8004cdc:	d10e      	bne.n	8004cfc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	68db      	ldr	r3, [r3, #12]
 8004ce4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ce8:	2b80      	cmp	r3, #128	; 0x80
 8004cea:	d107      	bne.n	8004cfc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004cf4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004cf6:	6878      	ldr	r0, [r7, #4]
 8004cf8:	f000 fc35 	bl	8005566 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	691b      	ldr	r3, [r3, #16]
 8004d02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d06:	2b40      	cmp	r3, #64	; 0x40
 8004d08:	d10e      	bne.n	8004d28 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	68db      	ldr	r3, [r3, #12]
 8004d10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d14:	2b40      	cmp	r3, #64	; 0x40
 8004d16:	d107      	bne.n	8004d28 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004d20:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004d22:	6878      	ldr	r0, [r7, #4]
 8004d24:	f000 f984 	bl	8005030 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	691b      	ldr	r3, [r3, #16]
 8004d2e:	f003 0320 	and.w	r3, r3, #32
 8004d32:	2b20      	cmp	r3, #32
 8004d34:	d10e      	bne.n	8004d54 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	68db      	ldr	r3, [r3, #12]
 8004d3c:	f003 0320 	and.w	r3, r3, #32
 8004d40:	2b20      	cmp	r3, #32
 8004d42:	d107      	bne.n	8004d54 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	f06f 0220 	mvn.w	r2, #32
 8004d4c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004d4e:	6878      	ldr	r0, [r7, #4]
 8004d50:	f000 fc00 	bl	8005554 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004d54:	bf00      	nop
 8004d56:	3708      	adds	r7, #8
 8004d58:	46bd      	mov	sp, r7
 8004d5a:	bd80      	pop	{r7, pc}

08004d5c <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8004d5c:	b580      	push	{r7, lr}
 8004d5e:	b084      	sub	sp, #16
 8004d60:	af00      	add	r7, sp, #0
 8004d62:	60f8      	str	r0, [r7, #12]
 8004d64:	60b9      	str	r1, [r7, #8]
 8004d66:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d6e:	2b01      	cmp	r3, #1
 8004d70:	d101      	bne.n	8004d76 <HAL_TIM_IC_ConfigChannel+0x1a>
 8004d72:	2302      	movs	r3, #2
 8004d74:	e082      	b.n	8004e7c <HAL_TIM_IC_ConfigChannel+0x120>
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	2201      	movs	r2, #1
 8004d7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d11b      	bne.n	8004dbc <HAL_TIM_IC_ConfigChannel+0x60>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	6818      	ldr	r0, [r3, #0]
 8004d88:	68bb      	ldr	r3, [r7, #8]
 8004d8a:	6819      	ldr	r1, [r3, #0]
 8004d8c:	68bb      	ldr	r3, [r7, #8]
 8004d8e:	685a      	ldr	r2, [r3, #4]
 8004d90:	68bb      	ldr	r3, [r7, #8]
 8004d92:	68db      	ldr	r3, [r3, #12]
 8004d94:	f000 f9b8 	bl	8005108 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	699a      	ldr	r2, [r3, #24]
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	f022 020c 	bic.w	r2, r2, #12
 8004da6:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	6999      	ldr	r1, [r3, #24]
 8004dae:	68bb      	ldr	r3, [r7, #8]
 8004db0:	689a      	ldr	r2, [r3, #8]
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	430a      	orrs	r2, r1
 8004db8:	619a      	str	r2, [r3, #24]
 8004dba:	e05a      	b.n	8004e72 <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_2)
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	2b04      	cmp	r3, #4
 8004dc0:	d11c      	bne.n	8004dfc <HAL_TIM_IC_ConfigChannel+0xa0>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	6818      	ldr	r0, [r3, #0]
 8004dc6:	68bb      	ldr	r3, [r7, #8]
 8004dc8:	6819      	ldr	r1, [r3, #0]
 8004dca:	68bb      	ldr	r3, [r7, #8]
 8004dcc:	685a      	ldr	r2, [r3, #4]
 8004dce:	68bb      	ldr	r3, [r7, #8]
 8004dd0:	68db      	ldr	r3, [r3, #12]
 8004dd2:	f000 fa21 	bl	8005218 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	699a      	ldr	r2, [r3, #24]
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8004de4:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	6999      	ldr	r1, [r3, #24]
 8004dec:	68bb      	ldr	r3, [r7, #8]
 8004dee:	689b      	ldr	r3, [r3, #8]
 8004df0:	021a      	lsls	r2, r3, #8
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	430a      	orrs	r2, r1
 8004df8:	619a      	str	r2, [r3, #24]
 8004dfa:	e03a      	b.n	8004e72 <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_3)
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	2b08      	cmp	r3, #8
 8004e00:	d11b      	bne.n	8004e3a <HAL_TIM_IC_ConfigChannel+0xde>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	6818      	ldr	r0, [r3, #0]
 8004e06:	68bb      	ldr	r3, [r7, #8]
 8004e08:	6819      	ldr	r1, [r3, #0]
 8004e0a:	68bb      	ldr	r3, [r7, #8]
 8004e0c:	685a      	ldr	r2, [r3, #4]
 8004e0e:	68bb      	ldr	r3, [r7, #8]
 8004e10:	68db      	ldr	r3, [r3, #12]
 8004e12:	f000 fa6c 	bl	80052ee <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	69da      	ldr	r2, [r3, #28]
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	f022 020c 	bic.w	r2, r2, #12
 8004e24:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	69d9      	ldr	r1, [r3, #28]
 8004e2c:	68bb      	ldr	r3, [r7, #8]
 8004e2e:	689a      	ldr	r2, [r3, #8]
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	430a      	orrs	r2, r1
 8004e36:	61da      	str	r2, [r3, #28]
 8004e38:	e01b      	b.n	8004e72 <HAL_TIM_IC_ConfigChannel+0x116>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	6818      	ldr	r0, [r3, #0]
 8004e3e:	68bb      	ldr	r3, [r7, #8]
 8004e40:	6819      	ldr	r1, [r3, #0]
 8004e42:	68bb      	ldr	r3, [r7, #8]
 8004e44:	685a      	ldr	r2, [r3, #4]
 8004e46:	68bb      	ldr	r3, [r7, #8]
 8004e48:	68db      	ldr	r3, [r3, #12]
 8004e4a:	f000 fa8b 	bl	8005364 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	69da      	ldr	r2, [r3, #28]
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8004e5c:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	69d9      	ldr	r1, [r3, #28]
 8004e64:	68bb      	ldr	r3, [r7, #8]
 8004e66:	689b      	ldr	r3, [r3, #8]
 8004e68:	021a      	lsls	r2, r3, #8
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	430a      	orrs	r2, r1
 8004e70:	61da      	str	r2, [r3, #28]
  }

  __HAL_UNLOCK(htim);
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	2200      	movs	r2, #0
 8004e76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004e7a:	2300      	movs	r3, #0
}
 8004e7c:	4618      	mov	r0, r3
 8004e7e:	3710      	adds	r7, #16
 8004e80:	46bd      	mov	sp, r7
 8004e82:	bd80      	pop	{r7, pc}

08004e84 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004e84:	b580      	push	{r7, lr}
 8004e86:	b084      	sub	sp, #16
 8004e88:	af00      	add	r7, sp, #0
 8004e8a:	6078      	str	r0, [r7, #4]
 8004e8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004e94:	2b01      	cmp	r3, #1
 8004e96:	d101      	bne.n	8004e9c <HAL_TIM_ConfigClockSource+0x18>
 8004e98:	2302      	movs	r3, #2
 8004e9a:	e0b3      	b.n	8005004 <HAL_TIM_ConfigClockSource+0x180>
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	2201      	movs	r2, #1
 8004ea0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	2202      	movs	r2, #2
 8004ea8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	689b      	ldr	r3, [r3, #8]
 8004eb2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004eba:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004ec2:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	68fa      	ldr	r2, [r7, #12]
 8004eca:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004ecc:	683b      	ldr	r3, [r7, #0]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004ed4:	d03e      	beq.n	8004f54 <HAL_TIM_ConfigClockSource+0xd0>
 8004ed6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004eda:	f200 8087 	bhi.w	8004fec <HAL_TIM_ConfigClockSource+0x168>
 8004ede:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ee2:	f000 8085 	beq.w	8004ff0 <HAL_TIM_ConfigClockSource+0x16c>
 8004ee6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004eea:	d87f      	bhi.n	8004fec <HAL_TIM_ConfigClockSource+0x168>
 8004eec:	2b70      	cmp	r3, #112	; 0x70
 8004eee:	d01a      	beq.n	8004f26 <HAL_TIM_ConfigClockSource+0xa2>
 8004ef0:	2b70      	cmp	r3, #112	; 0x70
 8004ef2:	d87b      	bhi.n	8004fec <HAL_TIM_ConfigClockSource+0x168>
 8004ef4:	2b60      	cmp	r3, #96	; 0x60
 8004ef6:	d050      	beq.n	8004f9a <HAL_TIM_ConfigClockSource+0x116>
 8004ef8:	2b60      	cmp	r3, #96	; 0x60
 8004efa:	d877      	bhi.n	8004fec <HAL_TIM_ConfigClockSource+0x168>
 8004efc:	2b50      	cmp	r3, #80	; 0x50
 8004efe:	d03c      	beq.n	8004f7a <HAL_TIM_ConfigClockSource+0xf6>
 8004f00:	2b50      	cmp	r3, #80	; 0x50
 8004f02:	d873      	bhi.n	8004fec <HAL_TIM_ConfigClockSource+0x168>
 8004f04:	2b40      	cmp	r3, #64	; 0x40
 8004f06:	d058      	beq.n	8004fba <HAL_TIM_ConfigClockSource+0x136>
 8004f08:	2b40      	cmp	r3, #64	; 0x40
 8004f0a:	d86f      	bhi.n	8004fec <HAL_TIM_ConfigClockSource+0x168>
 8004f0c:	2b30      	cmp	r3, #48	; 0x30
 8004f0e:	d064      	beq.n	8004fda <HAL_TIM_ConfigClockSource+0x156>
 8004f10:	2b30      	cmp	r3, #48	; 0x30
 8004f12:	d86b      	bhi.n	8004fec <HAL_TIM_ConfigClockSource+0x168>
 8004f14:	2b20      	cmp	r3, #32
 8004f16:	d060      	beq.n	8004fda <HAL_TIM_ConfigClockSource+0x156>
 8004f18:	2b20      	cmp	r3, #32
 8004f1a:	d867      	bhi.n	8004fec <HAL_TIM_ConfigClockSource+0x168>
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d05c      	beq.n	8004fda <HAL_TIM_ConfigClockSource+0x156>
 8004f20:	2b10      	cmp	r3, #16
 8004f22:	d05a      	beq.n	8004fda <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8004f24:	e062      	b.n	8004fec <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	6818      	ldr	r0, [r3, #0]
 8004f2a:	683b      	ldr	r3, [r7, #0]
 8004f2c:	6899      	ldr	r1, [r3, #8]
 8004f2e:	683b      	ldr	r3, [r7, #0]
 8004f30:	685a      	ldr	r2, [r3, #4]
 8004f32:	683b      	ldr	r3, [r7, #0]
 8004f34:	68db      	ldr	r3, [r3, #12]
 8004f36:	f000 fa6b 	bl	8005410 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	689b      	ldr	r3, [r3, #8]
 8004f40:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004f48:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	68fa      	ldr	r2, [r7, #12]
 8004f50:	609a      	str	r2, [r3, #8]
      break;
 8004f52:	e04e      	b.n	8004ff2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	6818      	ldr	r0, [r3, #0]
 8004f58:	683b      	ldr	r3, [r7, #0]
 8004f5a:	6899      	ldr	r1, [r3, #8]
 8004f5c:	683b      	ldr	r3, [r7, #0]
 8004f5e:	685a      	ldr	r2, [r3, #4]
 8004f60:	683b      	ldr	r3, [r7, #0]
 8004f62:	68db      	ldr	r3, [r3, #12]
 8004f64:	f000 fa54 	bl	8005410 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	689a      	ldr	r2, [r3, #8]
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004f76:	609a      	str	r2, [r3, #8]
      break;
 8004f78:	e03b      	b.n	8004ff2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	6818      	ldr	r0, [r3, #0]
 8004f7e:	683b      	ldr	r3, [r7, #0]
 8004f80:	6859      	ldr	r1, [r3, #4]
 8004f82:	683b      	ldr	r3, [r7, #0]
 8004f84:	68db      	ldr	r3, [r3, #12]
 8004f86:	461a      	mov	r2, r3
 8004f88:	f000 f918 	bl	80051bc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	2150      	movs	r1, #80	; 0x50
 8004f92:	4618      	mov	r0, r3
 8004f94:	f000 fa22 	bl	80053dc <TIM_ITRx_SetConfig>
      break;
 8004f98:	e02b      	b.n	8004ff2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	6818      	ldr	r0, [r3, #0]
 8004f9e:	683b      	ldr	r3, [r7, #0]
 8004fa0:	6859      	ldr	r1, [r3, #4]
 8004fa2:	683b      	ldr	r3, [r7, #0]
 8004fa4:	68db      	ldr	r3, [r3, #12]
 8004fa6:	461a      	mov	r2, r3
 8004fa8:	f000 f972 	bl	8005290 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	2160      	movs	r1, #96	; 0x60
 8004fb2:	4618      	mov	r0, r3
 8004fb4:	f000 fa12 	bl	80053dc <TIM_ITRx_SetConfig>
      break;
 8004fb8:	e01b      	b.n	8004ff2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	6818      	ldr	r0, [r3, #0]
 8004fbe:	683b      	ldr	r3, [r7, #0]
 8004fc0:	6859      	ldr	r1, [r3, #4]
 8004fc2:	683b      	ldr	r3, [r7, #0]
 8004fc4:	68db      	ldr	r3, [r3, #12]
 8004fc6:	461a      	mov	r2, r3
 8004fc8:	f000 f8f8 	bl	80051bc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	2140      	movs	r1, #64	; 0x40
 8004fd2:	4618      	mov	r0, r3
 8004fd4:	f000 fa02 	bl	80053dc <TIM_ITRx_SetConfig>
      break;
 8004fd8:	e00b      	b.n	8004ff2 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681a      	ldr	r2, [r3, #0]
 8004fde:	683b      	ldr	r3, [r7, #0]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	4619      	mov	r1, r3
 8004fe4:	4610      	mov	r0, r2
 8004fe6:	f000 f9f9 	bl	80053dc <TIM_ITRx_SetConfig>
        break;
 8004fea:	e002      	b.n	8004ff2 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8004fec:	bf00      	nop
 8004fee:	e000      	b.n	8004ff2 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8004ff0:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	2201      	movs	r2, #1
 8004ff6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	2200      	movs	r2, #0
 8004ffe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005002:	2300      	movs	r3, #0
}
 8005004:	4618      	mov	r0, r3
 8005006:	3710      	adds	r7, #16
 8005008:	46bd      	mov	sp, r7
 800500a:	bd80      	pop	{r7, pc}

0800500c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800500c:	b480      	push	{r7}
 800500e:	b083      	sub	sp, #12
 8005010:	af00      	add	r7, sp, #0
 8005012:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005014:	bf00      	nop
 8005016:	370c      	adds	r7, #12
 8005018:	46bd      	mov	sp, r7
 800501a:	bc80      	pop	{r7}
 800501c:	4770      	bx	lr

0800501e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800501e:	b480      	push	{r7}
 8005020:	b083      	sub	sp, #12
 8005022:	af00      	add	r7, sp, #0
 8005024:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005026:	bf00      	nop
 8005028:	370c      	adds	r7, #12
 800502a:	46bd      	mov	sp, r7
 800502c:	bc80      	pop	{r7}
 800502e:	4770      	bx	lr

08005030 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005030:	b480      	push	{r7}
 8005032:	b083      	sub	sp, #12
 8005034:	af00      	add	r7, sp, #0
 8005036:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005038:	bf00      	nop
 800503a:	370c      	adds	r7, #12
 800503c:	46bd      	mov	sp, r7
 800503e:	bc80      	pop	{r7}
 8005040:	4770      	bx	lr
	...

08005044 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005044:	b480      	push	{r7}
 8005046:	b085      	sub	sp, #20
 8005048:	af00      	add	r7, sp, #0
 800504a:	6078      	str	r0, [r7, #4]
 800504c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	4a29      	ldr	r2, [pc, #164]	; (80050fc <TIM_Base_SetConfig+0xb8>)
 8005058:	4293      	cmp	r3, r2
 800505a:	d00b      	beq.n	8005074 <TIM_Base_SetConfig+0x30>
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005062:	d007      	beq.n	8005074 <TIM_Base_SetConfig+0x30>
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	4a26      	ldr	r2, [pc, #152]	; (8005100 <TIM_Base_SetConfig+0xbc>)
 8005068:	4293      	cmp	r3, r2
 800506a:	d003      	beq.n	8005074 <TIM_Base_SetConfig+0x30>
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	4a25      	ldr	r2, [pc, #148]	; (8005104 <TIM_Base_SetConfig+0xc0>)
 8005070:	4293      	cmp	r3, r2
 8005072:	d108      	bne.n	8005086 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800507a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800507c:	683b      	ldr	r3, [r7, #0]
 800507e:	685b      	ldr	r3, [r3, #4]
 8005080:	68fa      	ldr	r2, [r7, #12]
 8005082:	4313      	orrs	r3, r2
 8005084:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	4a1c      	ldr	r2, [pc, #112]	; (80050fc <TIM_Base_SetConfig+0xb8>)
 800508a:	4293      	cmp	r3, r2
 800508c:	d00b      	beq.n	80050a6 <TIM_Base_SetConfig+0x62>
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005094:	d007      	beq.n	80050a6 <TIM_Base_SetConfig+0x62>
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	4a19      	ldr	r2, [pc, #100]	; (8005100 <TIM_Base_SetConfig+0xbc>)
 800509a:	4293      	cmp	r3, r2
 800509c:	d003      	beq.n	80050a6 <TIM_Base_SetConfig+0x62>
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	4a18      	ldr	r2, [pc, #96]	; (8005104 <TIM_Base_SetConfig+0xc0>)
 80050a2:	4293      	cmp	r3, r2
 80050a4:	d108      	bne.n	80050b8 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80050ac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80050ae:	683b      	ldr	r3, [r7, #0]
 80050b0:	68db      	ldr	r3, [r3, #12]
 80050b2:	68fa      	ldr	r2, [r7, #12]
 80050b4:	4313      	orrs	r3, r2
 80050b6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80050be:	683b      	ldr	r3, [r7, #0]
 80050c0:	695b      	ldr	r3, [r3, #20]
 80050c2:	4313      	orrs	r3, r2
 80050c4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	68fa      	ldr	r2, [r7, #12]
 80050ca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80050cc:	683b      	ldr	r3, [r7, #0]
 80050ce:	689a      	ldr	r2, [r3, #8]
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80050d4:	683b      	ldr	r3, [r7, #0]
 80050d6:	681a      	ldr	r2, [r3, #0]
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	4a07      	ldr	r2, [pc, #28]	; (80050fc <TIM_Base_SetConfig+0xb8>)
 80050e0:	4293      	cmp	r3, r2
 80050e2:	d103      	bne.n	80050ec <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80050e4:	683b      	ldr	r3, [r7, #0]
 80050e6:	691a      	ldr	r2, [r3, #16]
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	2201      	movs	r2, #1
 80050f0:	615a      	str	r2, [r3, #20]
}
 80050f2:	bf00      	nop
 80050f4:	3714      	adds	r7, #20
 80050f6:	46bd      	mov	sp, r7
 80050f8:	bc80      	pop	{r7}
 80050fa:	4770      	bx	lr
 80050fc:	40012c00 	.word	0x40012c00
 8005100:	40000400 	.word	0x40000400
 8005104:	40000800 	.word	0x40000800

08005108 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8005108:	b480      	push	{r7}
 800510a:	b087      	sub	sp, #28
 800510c:	af00      	add	r7, sp, #0
 800510e:	60f8      	str	r0, [r7, #12]
 8005110:	60b9      	str	r1, [r7, #8]
 8005112:	607a      	str	r2, [r7, #4]
 8005114:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	6a1b      	ldr	r3, [r3, #32]
 800511a:	f023 0201 	bic.w	r2, r3, #1
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	699b      	ldr	r3, [r3, #24]
 8005126:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	6a1b      	ldr	r3, [r3, #32]
 800512c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	4a1f      	ldr	r2, [pc, #124]	; (80051b0 <TIM_TI1_SetConfig+0xa8>)
 8005132:	4293      	cmp	r3, r2
 8005134:	d00b      	beq.n	800514e <TIM_TI1_SetConfig+0x46>
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800513c:	d007      	beq.n	800514e <TIM_TI1_SetConfig+0x46>
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	4a1c      	ldr	r2, [pc, #112]	; (80051b4 <TIM_TI1_SetConfig+0xac>)
 8005142:	4293      	cmp	r3, r2
 8005144:	d003      	beq.n	800514e <TIM_TI1_SetConfig+0x46>
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	4a1b      	ldr	r2, [pc, #108]	; (80051b8 <TIM_TI1_SetConfig+0xb0>)
 800514a:	4293      	cmp	r3, r2
 800514c:	d101      	bne.n	8005152 <TIM_TI1_SetConfig+0x4a>
 800514e:	2301      	movs	r3, #1
 8005150:	e000      	b.n	8005154 <TIM_TI1_SetConfig+0x4c>
 8005152:	2300      	movs	r3, #0
 8005154:	2b00      	cmp	r3, #0
 8005156:	d008      	beq.n	800516a <TIM_TI1_SetConfig+0x62>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8005158:	697b      	ldr	r3, [r7, #20]
 800515a:	f023 0303 	bic.w	r3, r3, #3
 800515e:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8005160:	697a      	ldr	r2, [r7, #20]
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	4313      	orrs	r3, r2
 8005166:	617b      	str	r3, [r7, #20]
 8005168:	e003      	b.n	8005172 <TIM_TI1_SetConfig+0x6a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800516a:	697b      	ldr	r3, [r7, #20]
 800516c:	f043 0301 	orr.w	r3, r3, #1
 8005170:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005172:	697b      	ldr	r3, [r7, #20]
 8005174:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005178:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800517a:	683b      	ldr	r3, [r7, #0]
 800517c:	011b      	lsls	r3, r3, #4
 800517e:	b2db      	uxtb	r3, r3
 8005180:	697a      	ldr	r2, [r7, #20]
 8005182:	4313      	orrs	r3, r2
 8005184:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005186:	693b      	ldr	r3, [r7, #16]
 8005188:	f023 030a 	bic.w	r3, r3, #10
 800518c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800518e:	68bb      	ldr	r3, [r7, #8]
 8005190:	f003 030a 	and.w	r3, r3, #10
 8005194:	693a      	ldr	r2, [r7, #16]
 8005196:	4313      	orrs	r3, r2
 8005198:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	697a      	ldr	r2, [r7, #20]
 800519e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	693a      	ldr	r2, [r7, #16]
 80051a4:	621a      	str	r2, [r3, #32]
}
 80051a6:	bf00      	nop
 80051a8:	371c      	adds	r7, #28
 80051aa:	46bd      	mov	sp, r7
 80051ac:	bc80      	pop	{r7}
 80051ae:	4770      	bx	lr
 80051b0:	40012c00 	.word	0x40012c00
 80051b4:	40000400 	.word	0x40000400
 80051b8:	40000800 	.word	0x40000800

080051bc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80051bc:	b480      	push	{r7}
 80051be:	b087      	sub	sp, #28
 80051c0:	af00      	add	r7, sp, #0
 80051c2:	60f8      	str	r0, [r7, #12]
 80051c4:	60b9      	str	r1, [r7, #8]
 80051c6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	6a1b      	ldr	r3, [r3, #32]
 80051cc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	6a1b      	ldr	r3, [r3, #32]
 80051d2:	f023 0201 	bic.w	r2, r3, #1
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	699b      	ldr	r3, [r3, #24]
 80051de:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80051e0:	693b      	ldr	r3, [r7, #16]
 80051e2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80051e6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	011b      	lsls	r3, r3, #4
 80051ec:	693a      	ldr	r2, [r7, #16]
 80051ee:	4313      	orrs	r3, r2
 80051f0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80051f2:	697b      	ldr	r3, [r7, #20]
 80051f4:	f023 030a 	bic.w	r3, r3, #10
 80051f8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80051fa:	697a      	ldr	r2, [r7, #20]
 80051fc:	68bb      	ldr	r3, [r7, #8]
 80051fe:	4313      	orrs	r3, r2
 8005200:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	693a      	ldr	r2, [r7, #16]
 8005206:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	697a      	ldr	r2, [r7, #20]
 800520c:	621a      	str	r2, [r3, #32]
}
 800520e:	bf00      	nop
 8005210:	371c      	adds	r7, #28
 8005212:	46bd      	mov	sp, r7
 8005214:	bc80      	pop	{r7}
 8005216:	4770      	bx	lr

08005218 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005218:	b480      	push	{r7}
 800521a:	b087      	sub	sp, #28
 800521c:	af00      	add	r7, sp, #0
 800521e:	60f8      	str	r0, [r7, #12]
 8005220:	60b9      	str	r1, [r7, #8]
 8005222:	607a      	str	r2, [r7, #4]
 8005224:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	6a1b      	ldr	r3, [r3, #32]
 800522a:	f023 0210 	bic.w	r2, r3, #16
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	699b      	ldr	r3, [r3, #24]
 8005236:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	6a1b      	ldr	r3, [r3, #32]
 800523c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800523e:	697b      	ldr	r3, [r7, #20]
 8005240:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005244:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	021b      	lsls	r3, r3, #8
 800524a:	697a      	ldr	r2, [r7, #20]
 800524c:	4313      	orrs	r3, r2
 800524e:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005250:	697b      	ldr	r3, [r7, #20]
 8005252:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005256:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8005258:	683b      	ldr	r3, [r7, #0]
 800525a:	031b      	lsls	r3, r3, #12
 800525c:	b29b      	uxth	r3, r3
 800525e:	697a      	ldr	r2, [r7, #20]
 8005260:	4313      	orrs	r3, r2
 8005262:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005264:	693b      	ldr	r3, [r7, #16]
 8005266:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800526a:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800526c:	68bb      	ldr	r3, [r7, #8]
 800526e:	011b      	lsls	r3, r3, #4
 8005270:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8005274:	693a      	ldr	r2, [r7, #16]
 8005276:	4313      	orrs	r3, r2
 8005278:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	697a      	ldr	r2, [r7, #20]
 800527e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	693a      	ldr	r2, [r7, #16]
 8005284:	621a      	str	r2, [r3, #32]
}
 8005286:	bf00      	nop
 8005288:	371c      	adds	r7, #28
 800528a:	46bd      	mov	sp, r7
 800528c:	bc80      	pop	{r7}
 800528e:	4770      	bx	lr

08005290 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005290:	b480      	push	{r7}
 8005292:	b087      	sub	sp, #28
 8005294:	af00      	add	r7, sp, #0
 8005296:	60f8      	str	r0, [r7, #12]
 8005298:	60b9      	str	r1, [r7, #8]
 800529a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	6a1b      	ldr	r3, [r3, #32]
 80052a0:	f023 0210 	bic.w	r2, r3, #16
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	699b      	ldr	r3, [r3, #24]
 80052ac:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	6a1b      	ldr	r3, [r3, #32]
 80052b2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80052b4:	697b      	ldr	r3, [r7, #20]
 80052b6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80052ba:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	031b      	lsls	r3, r3, #12
 80052c0:	697a      	ldr	r2, [r7, #20]
 80052c2:	4313      	orrs	r3, r2
 80052c4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80052c6:	693b      	ldr	r3, [r7, #16]
 80052c8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80052cc:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80052ce:	68bb      	ldr	r3, [r7, #8]
 80052d0:	011b      	lsls	r3, r3, #4
 80052d2:	693a      	ldr	r2, [r7, #16]
 80052d4:	4313      	orrs	r3, r2
 80052d6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	697a      	ldr	r2, [r7, #20]
 80052dc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	693a      	ldr	r2, [r7, #16]
 80052e2:	621a      	str	r2, [r3, #32]
}
 80052e4:	bf00      	nop
 80052e6:	371c      	adds	r7, #28
 80052e8:	46bd      	mov	sp, r7
 80052ea:	bc80      	pop	{r7}
 80052ec:	4770      	bx	lr

080052ee <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80052ee:	b480      	push	{r7}
 80052f0:	b087      	sub	sp, #28
 80052f2:	af00      	add	r7, sp, #0
 80052f4:	60f8      	str	r0, [r7, #12]
 80052f6:	60b9      	str	r1, [r7, #8]
 80052f8:	607a      	str	r2, [r7, #4]
 80052fa:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	6a1b      	ldr	r3, [r3, #32]
 8005300:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	69db      	ldr	r3, [r3, #28]
 800530c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	6a1b      	ldr	r3, [r3, #32]
 8005312:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8005314:	697b      	ldr	r3, [r7, #20]
 8005316:	f023 0303 	bic.w	r3, r3, #3
 800531a:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800531c:	697a      	ldr	r2, [r7, #20]
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	4313      	orrs	r3, r2
 8005322:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8005324:	697b      	ldr	r3, [r7, #20]
 8005326:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800532a:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800532c:	683b      	ldr	r3, [r7, #0]
 800532e:	011b      	lsls	r3, r3, #4
 8005330:	b2db      	uxtb	r3, r3
 8005332:	697a      	ldr	r2, [r7, #20]
 8005334:	4313      	orrs	r3, r2
 8005336:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P);
 8005338:	693b      	ldr	r3, [r7, #16]
 800533a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800533e:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & TIM_CCER_CC3P);
 8005340:	68bb      	ldr	r3, [r7, #8]
 8005342:	021b      	lsls	r3, r3, #8
 8005344:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005348:	693a      	ldr	r2, [r7, #16]
 800534a:	4313      	orrs	r3, r2
 800534c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	697a      	ldr	r2, [r7, #20]
 8005352:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	693a      	ldr	r2, [r7, #16]
 8005358:	621a      	str	r2, [r3, #32]
}
 800535a:	bf00      	nop
 800535c:	371c      	adds	r7, #28
 800535e:	46bd      	mov	sp, r7
 8005360:	bc80      	pop	{r7}
 8005362:	4770      	bx	lr

08005364 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005364:	b480      	push	{r7}
 8005366:	b087      	sub	sp, #28
 8005368:	af00      	add	r7, sp, #0
 800536a:	60f8      	str	r0, [r7, #12]
 800536c:	60b9      	str	r1, [r7, #8]
 800536e:	607a      	str	r2, [r7, #4]
 8005370:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	6a1b      	ldr	r3, [r3, #32]
 8005376:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	69db      	ldr	r3, [r3, #28]
 8005382:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	6a1b      	ldr	r3, [r3, #32]
 8005388:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800538a:	697b      	ldr	r3, [r7, #20]
 800538c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005390:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	021b      	lsls	r3, r3, #8
 8005396:	697a      	ldr	r2, [r7, #20]
 8005398:	4313      	orrs	r3, r2
 800539a:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800539c:	697b      	ldr	r3, [r7, #20]
 800539e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80053a2:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80053a4:	683b      	ldr	r3, [r7, #0]
 80053a6:	031b      	lsls	r3, r3, #12
 80053a8:	b29b      	uxth	r3, r3
 80053aa:	697a      	ldr	r2, [r7, #20]
 80053ac:	4313      	orrs	r3, r2
 80053ae:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P);
 80053b0:	693b      	ldr	r3, [r7, #16]
 80053b2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80053b6:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 80053b8:	68bb      	ldr	r3, [r7, #8]
 80053ba:	031b      	lsls	r3, r3, #12
 80053bc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80053c0:	693a      	ldr	r2, [r7, #16]
 80053c2:	4313      	orrs	r3, r2
 80053c4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	697a      	ldr	r2, [r7, #20]
 80053ca:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	693a      	ldr	r2, [r7, #16]
 80053d0:	621a      	str	r2, [r3, #32]
}
 80053d2:	bf00      	nop
 80053d4:	371c      	adds	r7, #28
 80053d6:	46bd      	mov	sp, r7
 80053d8:	bc80      	pop	{r7}
 80053da:	4770      	bx	lr

080053dc <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80053dc:	b480      	push	{r7}
 80053de:	b085      	sub	sp, #20
 80053e0:	af00      	add	r7, sp, #0
 80053e2:	6078      	str	r0, [r7, #4]
 80053e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	689b      	ldr	r3, [r3, #8]
 80053ea:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053f2:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80053f4:	683a      	ldr	r2, [r7, #0]
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	4313      	orrs	r3, r2
 80053fa:	f043 0307 	orr.w	r3, r3, #7
 80053fe:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	68fa      	ldr	r2, [r7, #12]
 8005404:	609a      	str	r2, [r3, #8]
}
 8005406:	bf00      	nop
 8005408:	3714      	adds	r7, #20
 800540a:	46bd      	mov	sp, r7
 800540c:	bc80      	pop	{r7}
 800540e:	4770      	bx	lr

08005410 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005410:	b480      	push	{r7}
 8005412:	b087      	sub	sp, #28
 8005414:	af00      	add	r7, sp, #0
 8005416:	60f8      	str	r0, [r7, #12]
 8005418:	60b9      	str	r1, [r7, #8]
 800541a:	607a      	str	r2, [r7, #4]
 800541c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	689b      	ldr	r3, [r3, #8]
 8005422:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005424:	697b      	ldr	r3, [r7, #20]
 8005426:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800542a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800542c:	683b      	ldr	r3, [r7, #0]
 800542e:	021a      	lsls	r2, r3, #8
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	431a      	orrs	r2, r3
 8005434:	68bb      	ldr	r3, [r7, #8]
 8005436:	4313      	orrs	r3, r2
 8005438:	697a      	ldr	r2, [r7, #20]
 800543a:	4313      	orrs	r3, r2
 800543c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	697a      	ldr	r2, [r7, #20]
 8005442:	609a      	str	r2, [r3, #8]
}
 8005444:	bf00      	nop
 8005446:	371c      	adds	r7, #28
 8005448:	46bd      	mov	sp, r7
 800544a:	bc80      	pop	{r7}
 800544c:	4770      	bx	lr

0800544e <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800544e:	b480      	push	{r7}
 8005450:	b087      	sub	sp, #28
 8005452:	af00      	add	r7, sp, #0
 8005454:	60f8      	str	r0, [r7, #12]
 8005456:	60b9      	str	r1, [r7, #8]
 8005458:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800545a:	68bb      	ldr	r3, [r7, #8]
 800545c:	f003 031f 	and.w	r3, r3, #31
 8005460:	2201      	movs	r2, #1
 8005462:	fa02 f303 	lsl.w	r3, r2, r3
 8005466:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	6a1a      	ldr	r2, [r3, #32]
 800546c:	697b      	ldr	r3, [r7, #20]
 800546e:	43db      	mvns	r3, r3
 8005470:	401a      	ands	r2, r3
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	6a1a      	ldr	r2, [r3, #32]
 800547a:	68bb      	ldr	r3, [r7, #8]
 800547c:	f003 031f 	and.w	r3, r3, #31
 8005480:	6879      	ldr	r1, [r7, #4]
 8005482:	fa01 f303 	lsl.w	r3, r1, r3
 8005486:	431a      	orrs	r2, r3
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	621a      	str	r2, [r3, #32]
}
 800548c:	bf00      	nop
 800548e:	371c      	adds	r7, #28
 8005490:	46bd      	mov	sp, r7
 8005492:	bc80      	pop	{r7}
 8005494:	4770      	bx	lr
	...

08005498 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005498:	b480      	push	{r7}
 800549a:	b085      	sub	sp, #20
 800549c:	af00      	add	r7, sp, #0
 800549e:	6078      	str	r0, [r7, #4]
 80054a0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80054a8:	2b01      	cmp	r3, #1
 80054aa:	d101      	bne.n	80054b0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80054ac:	2302      	movs	r3, #2
 80054ae:	e046      	b.n	800553e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	2201      	movs	r2, #1
 80054b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	2202      	movs	r2, #2
 80054bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	685b      	ldr	r3, [r3, #4]
 80054c6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	689b      	ldr	r3, [r3, #8]
 80054ce:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80054d6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80054d8:	683b      	ldr	r3, [r7, #0]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	68fa      	ldr	r2, [r7, #12]
 80054de:	4313      	orrs	r3, r2
 80054e0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	68fa      	ldr	r2, [r7, #12]
 80054e8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	4a16      	ldr	r2, [pc, #88]	; (8005548 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80054f0:	4293      	cmp	r3, r2
 80054f2:	d00e      	beq.n	8005512 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80054fc:	d009      	beq.n	8005512 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	4a12      	ldr	r2, [pc, #72]	; (800554c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8005504:	4293      	cmp	r3, r2
 8005506:	d004      	beq.n	8005512 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	4a10      	ldr	r2, [pc, #64]	; (8005550 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800550e:	4293      	cmp	r3, r2
 8005510:	d10c      	bne.n	800552c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005512:	68bb      	ldr	r3, [r7, #8]
 8005514:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005518:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800551a:	683b      	ldr	r3, [r7, #0]
 800551c:	685b      	ldr	r3, [r3, #4]
 800551e:	68ba      	ldr	r2, [r7, #8]
 8005520:	4313      	orrs	r3, r2
 8005522:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	68ba      	ldr	r2, [r7, #8]
 800552a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	2201      	movs	r2, #1
 8005530:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	2200      	movs	r2, #0
 8005538:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800553c:	2300      	movs	r3, #0
}
 800553e:	4618      	mov	r0, r3
 8005540:	3714      	adds	r7, #20
 8005542:	46bd      	mov	sp, r7
 8005544:	bc80      	pop	{r7}
 8005546:	4770      	bx	lr
 8005548:	40012c00 	.word	0x40012c00
 800554c:	40000400 	.word	0x40000400
 8005550:	40000800 	.word	0x40000800

08005554 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005554:	b480      	push	{r7}
 8005556:	b083      	sub	sp, #12
 8005558:	af00      	add	r7, sp, #0
 800555a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800555c:	bf00      	nop
 800555e:	370c      	adds	r7, #12
 8005560:	46bd      	mov	sp, r7
 8005562:	bc80      	pop	{r7}
 8005564:	4770      	bx	lr

08005566 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005566:	b480      	push	{r7}
 8005568:	b083      	sub	sp, #12
 800556a:	af00      	add	r7, sp, #0
 800556c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800556e:	bf00      	nop
 8005570:	370c      	adds	r7, #12
 8005572:	46bd      	mov	sp, r7
 8005574:	bc80      	pop	{r7}
 8005576:	4770      	bx	lr

08005578 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8005578:	b084      	sub	sp, #16
 800557a:	b480      	push	{r7}
 800557c:	b083      	sub	sp, #12
 800557e:	af00      	add	r7, sp, #0
 8005580:	6078      	str	r0, [r7, #4]
 8005582:	f107 0014 	add.w	r0, r7, #20
 8005586:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800558a:	2300      	movs	r3, #0
}
 800558c:	4618      	mov	r0, r3
 800558e:	370c      	adds	r7, #12
 8005590:	46bd      	mov	sp, r7
 8005592:	bc80      	pop	{r7}
 8005594:	b004      	add	sp, #16
 8005596:	4770      	bx	lr

08005598 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8005598:	b480      	push	{r7}
 800559a:	b085      	sub	sp, #20
 800559c:	af00      	add	r7, sp, #0
 800559e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	2200      	movs	r2, #0
 80055a4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80055a8:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 80055ac:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	b29a      	uxth	r2, r3
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80055b8:	2300      	movs	r3, #0
}
 80055ba:	4618      	mov	r0, r3
 80055bc:	3714      	adds	r7, #20
 80055be:	46bd      	mov	sp, r7
 80055c0:	bc80      	pop	{r7}
 80055c2:	4770      	bx	lr

080055c4 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80055c4:	b480      	push	{r7}
 80055c6:	b085      	sub	sp, #20
 80055c8:	af00      	add	r7, sp, #0
 80055ca:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80055cc:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 80055d0:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80055d8:	b29a      	uxth	r2, r3
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	b29b      	uxth	r3, r3
 80055de:	43db      	mvns	r3, r3
 80055e0:	b29b      	uxth	r3, r3
 80055e2:	4013      	ands	r3, r2
 80055e4:	b29a      	uxth	r2, r3
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80055ec:	2300      	movs	r3, #0
}
 80055ee:	4618      	mov	r0, r3
 80055f0:	3714      	adds	r7, #20
 80055f2:	46bd      	mov	sp, r7
 80055f4:	bc80      	pop	{r7}
 80055f6:	4770      	bx	lr

080055f8 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 80055f8:	b480      	push	{r7}
 80055fa:	b083      	sub	sp, #12
 80055fc:	af00      	add	r7, sp, #0
 80055fe:	6078      	str	r0, [r7, #4]
 8005600:	460b      	mov	r3, r1
 8005602:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8005604:	2300      	movs	r3, #0
}
 8005606:	4618      	mov	r0, r3
 8005608:	370c      	adds	r7, #12
 800560a:	46bd      	mov	sp, r7
 800560c:	bc80      	pop	{r7}
 800560e:	4770      	bx	lr

08005610 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8005610:	b084      	sub	sp, #16
 8005612:	b480      	push	{r7}
 8005614:	b083      	sub	sp, #12
 8005616:	af00      	add	r7, sp, #0
 8005618:	6078      	str	r0, [r7, #4]
 800561a:	f107 0014 	add.w	r0, r7, #20
 800561e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	2201      	movs	r2, #1
 8005626:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	2200      	movs	r2, #0
 800562e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	2200      	movs	r2, #0
 8005636:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	2200      	movs	r2, #0
 800563e:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8005642:	2300      	movs	r3, #0
}
 8005644:	4618      	mov	r0, r3
 8005646:	370c      	adds	r7, #12
 8005648:	46bd      	mov	sp, r7
 800564a:	bc80      	pop	{r7}
 800564c:	b004      	add	sp, #16
 800564e:	4770      	bx	lr

08005650 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005650:	b480      	push	{r7}
 8005652:	b09b      	sub	sp, #108	; 0x6c
 8005654:	af00      	add	r7, sp, #0
 8005656:	6078      	str	r0, [r7, #4]
 8005658:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800565a:	2300      	movs	r3, #0
 800565c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8005660:	687a      	ldr	r2, [r7, #4]
 8005662:	683b      	ldr	r3, [r7, #0]
 8005664:	781b      	ldrb	r3, [r3, #0]
 8005666:	009b      	lsls	r3, r3, #2
 8005668:	4413      	add	r3, r2
 800566a:	881b      	ldrh	r3, [r3, #0]
 800566c:	b29b      	uxth	r3, r3
 800566e:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8005672:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005676:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 800567a:	683b      	ldr	r3, [r7, #0]
 800567c:	78db      	ldrb	r3, [r3, #3]
 800567e:	2b03      	cmp	r3, #3
 8005680:	d81f      	bhi.n	80056c2 <USB_ActivateEndpoint+0x72>
 8005682:	a201      	add	r2, pc, #4	; (adr r2, 8005688 <USB_ActivateEndpoint+0x38>)
 8005684:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005688:	08005699 	.word	0x08005699
 800568c:	080056b5 	.word	0x080056b5
 8005690:	080056cb 	.word	0x080056cb
 8005694:	080056a7 	.word	0x080056a7
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8005698:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800569c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80056a0:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 80056a4:	e012      	b.n	80056cc <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 80056a6:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80056aa:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 80056ae:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 80056b2:	e00b      	b.n	80056cc <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80056b4:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80056b8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80056bc:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 80056c0:	e004      	b.n	80056cc <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 80056c2:	2301      	movs	r3, #1
 80056c4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 80056c8:	e000      	b.n	80056cc <USB_ActivateEndpoint+0x7c>
      break;
 80056ca:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 80056cc:	687a      	ldr	r2, [r7, #4]
 80056ce:	683b      	ldr	r3, [r7, #0]
 80056d0:	781b      	ldrb	r3, [r3, #0]
 80056d2:	009b      	lsls	r3, r3, #2
 80056d4:	441a      	add	r2, r3
 80056d6:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80056da:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80056de:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80056e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80056e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80056ea:	b29b      	uxth	r3, r3
 80056ec:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80056ee:	687a      	ldr	r2, [r7, #4]
 80056f0:	683b      	ldr	r3, [r7, #0]
 80056f2:	781b      	ldrb	r3, [r3, #0]
 80056f4:	009b      	lsls	r3, r3, #2
 80056f6:	4413      	add	r3, r2
 80056f8:	881b      	ldrh	r3, [r3, #0]
 80056fa:	b29b      	uxth	r3, r3
 80056fc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005700:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005704:	b29a      	uxth	r2, r3
 8005706:	683b      	ldr	r3, [r7, #0]
 8005708:	781b      	ldrb	r3, [r3, #0]
 800570a:	b29b      	uxth	r3, r3
 800570c:	4313      	orrs	r3, r2
 800570e:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8005712:	687a      	ldr	r2, [r7, #4]
 8005714:	683b      	ldr	r3, [r7, #0]
 8005716:	781b      	ldrb	r3, [r3, #0]
 8005718:	009b      	lsls	r3, r3, #2
 800571a:	441a      	add	r2, r3
 800571c:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8005720:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005724:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005728:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800572c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005730:	b29b      	uxth	r3, r3
 8005732:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8005734:	683b      	ldr	r3, [r7, #0]
 8005736:	7b1b      	ldrb	r3, [r3, #12]
 8005738:	2b00      	cmp	r3, #0
 800573a:	f040 8149 	bne.w	80059d0 <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 800573e:	683b      	ldr	r3, [r7, #0]
 8005740:	785b      	ldrb	r3, [r3, #1]
 8005742:	2b00      	cmp	r3, #0
 8005744:	f000 8084 	beq.w	8005850 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	617b      	str	r3, [r7, #20]
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005752:	b29b      	uxth	r3, r3
 8005754:	461a      	mov	r2, r3
 8005756:	697b      	ldr	r3, [r7, #20]
 8005758:	4413      	add	r3, r2
 800575a:	617b      	str	r3, [r7, #20]
 800575c:	683b      	ldr	r3, [r7, #0]
 800575e:	781b      	ldrb	r3, [r3, #0]
 8005760:	011a      	lsls	r2, r3, #4
 8005762:	697b      	ldr	r3, [r7, #20]
 8005764:	4413      	add	r3, r2
 8005766:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800576a:	613b      	str	r3, [r7, #16]
 800576c:	683b      	ldr	r3, [r7, #0]
 800576e:	88db      	ldrh	r3, [r3, #6]
 8005770:	085b      	lsrs	r3, r3, #1
 8005772:	b29b      	uxth	r3, r3
 8005774:	005b      	lsls	r3, r3, #1
 8005776:	b29a      	uxth	r2, r3
 8005778:	693b      	ldr	r3, [r7, #16]
 800577a:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800577c:	687a      	ldr	r2, [r7, #4]
 800577e:	683b      	ldr	r3, [r7, #0]
 8005780:	781b      	ldrb	r3, [r3, #0]
 8005782:	009b      	lsls	r3, r3, #2
 8005784:	4413      	add	r3, r2
 8005786:	881b      	ldrh	r3, [r3, #0]
 8005788:	81fb      	strh	r3, [r7, #14]
 800578a:	89fb      	ldrh	r3, [r7, #14]
 800578c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005790:	2b00      	cmp	r3, #0
 8005792:	d01b      	beq.n	80057cc <USB_ActivateEndpoint+0x17c>
 8005794:	687a      	ldr	r2, [r7, #4]
 8005796:	683b      	ldr	r3, [r7, #0]
 8005798:	781b      	ldrb	r3, [r3, #0]
 800579a:	009b      	lsls	r3, r3, #2
 800579c:	4413      	add	r3, r2
 800579e:	881b      	ldrh	r3, [r3, #0]
 80057a0:	b29b      	uxth	r3, r3
 80057a2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80057a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80057aa:	81bb      	strh	r3, [r7, #12]
 80057ac:	687a      	ldr	r2, [r7, #4]
 80057ae:	683b      	ldr	r3, [r7, #0]
 80057b0:	781b      	ldrb	r3, [r3, #0]
 80057b2:	009b      	lsls	r3, r3, #2
 80057b4:	441a      	add	r2, r3
 80057b6:	89bb      	ldrh	r3, [r7, #12]
 80057b8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80057bc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80057c0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80057c4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80057c8:	b29b      	uxth	r3, r3
 80057ca:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80057cc:	683b      	ldr	r3, [r7, #0]
 80057ce:	78db      	ldrb	r3, [r3, #3]
 80057d0:	2b01      	cmp	r3, #1
 80057d2:	d020      	beq.n	8005816 <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80057d4:	687a      	ldr	r2, [r7, #4]
 80057d6:	683b      	ldr	r3, [r7, #0]
 80057d8:	781b      	ldrb	r3, [r3, #0]
 80057da:	009b      	lsls	r3, r3, #2
 80057dc:	4413      	add	r3, r2
 80057de:	881b      	ldrh	r3, [r3, #0]
 80057e0:	b29b      	uxth	r3, r3
 80057e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80057e6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80057ea:	813b      	strh	r3, [r7, #8]
 80057ec:	893b      	ldrh	r3, [r7, #8]
 80057ee:	f083 0320 	eor.w	r3, r3, #32
 80057f2:	813b      	strh	r3, [r7, #8]
 80057f4:	687a      	ldr	r2, [r7, #4]
 80057f6:	683b      	ldr	r3, [r7, #0]
 80057f8:	781b      	ldrb	r3, [r3, #0]
 80057fa:	009b      	lsls	r3, r3, #2
 80057fc:	441a      	add	r2, r3
 80057fe:	893b      	ldrh	r3, [r7, #8]
 8005800:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005804:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005808:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800580c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005810:	b29b      	uxth	r3, r3
 8005812:	8013      	strh	r3, [r2, #0]
 8005814:	e27f      	b.n	8005d16 <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005816:	687a      	ldr	r2, [r7, #4]
 8005818:	683b      	ldr	r3, [r7, #0]
 800581a:	781b      	ldrb	r3, [r3, #0]
 800581c:	009b      	lsls	r3, r3, #2
 800581e:	4413      	add	r3, r2
 8005820:	881b      	ldrh	r3, [r3, #0]
 8005822:	b29b      	uxth	r3, r3
 8005824:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005828:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800582c:	817b      	strh	r3, [r7, #10]
 800582e:	687a      	ldr	r2, [r7, #4]
 8005830:	683b      	ldr	r3, [r7, #0]
 8005832:	781b      	ldrb	r3, [r3, #0]
 8005834:	009b      	lsls	r3, r3, #2
 8005836:	441a      	add	r2, r3
 8005838:	897b      	ldrh	r3, [r7, #10]
 800583a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800583e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005842:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005846:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800584a:	b29b      	uxth	r3, r3
 800584c:	8013      	strh	r3, [r2, #0]
 800584e:	e262      	b.n	8005d16 <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800585a:	b29b      	uxth	r3, r3
 800585c:	461a      	mov	r2, r3
 800585e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005860:	4413      	add	r3, r2
 8005862:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005864:	683b      	ldr	r3, [r7, #0]
 8005866:	781b      	ldrb	r3, [r3, #0]
 8005868:	011a      	lsls	r2, r3, #4
 800586a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800586c:	4413      	add	r3, r2
 800586e:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8005872:	62bb      	str	r3, [r7, #40]	; 0x28
 8005874:	683b      	ldr	r3, [r7, #0]
 8005876:	88db      	ldrh	r3, [r3, #6]
 8005878:	085b      	lsrs	r3, r3, #1
 800587a:	b29b      	uxth	r3, r3
 800587c:	005b      	lsls	r3, r3, #1
 800587e:	b29a      	uxth	r2, r3
 8005880:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005882:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	627b      	str	r3, [r7, #36]	; 0x24
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800588e:	b29b      	uxth	r3, r3
 8005890:	461a      	mov	r2, r3
 8005892:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005894:	4413      	add	r3, r2
 8005896:	627b      	str	r3, [r7, #36]	; 0x24
 8005898:	683b      	ldr	r3, [r7, #0]
 800589a:	781b      	ldrb	r3, [r3, #0]
 800589c:	011a      	lsls	r2, r3, #4
 800589e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058a0:	4413      	add	r3, r2
 80058a2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80058a6:	623b      	str	r3, [r7, #32]
 80058a8:	683b      	ldr	r3, [r7, #0]
 80058aa:	691b      	ldr	r3, [r3, #16]
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d112      	bne.n	80058d6 <USB_ActivateEndpoint+0x286>
 80058b0:	6a3b      	ldr	r3, [r7, #32]
 80058b2:	881b      	ldrh	r3, [r3, #0]
 80058b4:	b29b      	uxth	r3, r3
 80058b6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80058ba:	b29a      	uxth	r2, r3
 80058bc:	6a3b      	ldr	r3, [r7, #32]
 80058be:	801a      	strh	r2, [r3, #0]
 80058c0:	6a3b      	ldr	r3, [r7, #32]
 80058c2:	881b      	ldrh	r3, [r3, #0]
 80058c4:	b29b      	uxth	r3, r3
 80058c6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80058ca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80058ce:	b29a      	uxth	r2, r3
 80058d0:	6a3b      	ldr	r3, [r7, #32]
 80058d2:	801a      	strh	r2, [r3, #0]
 80058d4:	e02f      	b.n	8005936 <USB_ActivateEndpoint+0x2e6>
 80058d6:	683b      	ldr	r3, [r7, #0]
 80058d8:	691b      	ldr	r3, [r3, #16]
 80058da:	2b3e      	cmp	r3, #62	; 0x3e
 80058dc:	d813      	bhi.n	8005906 <USB_ActivateEndpoint+0x2b6>
 80058de:	683b      	ldr	r3, [r7, #0]
 80058e0:	691b      	ldr	r3, [r3, #16]
 80058e2:	085b      	lsrs	r3, r3, #1
 80058e4:	663b      	str	r3, [r7, #96]	; 0x60
 80058e6:	683b      	ldr	r3, [r7, #0]
 80058e8:	691b      	ldr	r3, [r3, #16]
 80058ea:	f003 0301 	and.w	r3, r3, #1
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d002      	beq.n	80058f8 <USB_ActivateEndpoint+0x2a8>
 80058f2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80058f4:	3301      	adds	r3, #1
 80058f6:	663b      	str	r3, [r7, #96]	; 0x60
 80058f8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80058fa:	b29b      	uxth	r3, r3
 80058fc:	029b      	lsls	r3, r3, #10
 80058fe:	b29a      	uxth	r2, r3
 8005900:	6a3b      	ldr	r3, [r7, #32]
 8005902:	801a      	strh	r2, [r3, #0]
 8005904:	e017      	b.n	8005936 <USB_ActivateEndpoint+0x2e6>
 8005906:	683b      	ldr	r3, [r7, #0]
 8005908:	691b      	ldr	r3, [r3, #16]
 800590a:	095b      	lsrs	r3, r3, #5
 800590c:	663b      	str	r3, [r7, #96]	; 0x60
 800590e:	683b      	ldr	r3, [r7, #0]
 8005910:	691b      	ldr	r3, [r3, #16]
 8005912:	f003 031f 	and.w	r3, r3, #31
 8005916:	2b00      	cmp	r3, #0
 8005918:	d102      	bne.n	8005920 <USB_ActivateEndpoint+0x2d0>
 800591a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800591c:	3b01      	subs	r3, #1
 800591e:	663b      	str	r3, [r7, #96]	; 0x60
 8005920:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005922:	b29b      	uxth	r3, r3
 8005924:	029b      	lsls	r3, r3, #10
 8005926:	b29b      	uxth	r3, r3
 8005928:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800592c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005930:	b29a      	uxth	r2, r3
 8005932:	6a3b      	ldr	r3, [r7, #32]
 8005934:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005936:	687a      	ldr	r2, [r7, #4]
 8005938:	683b      	ldr	r3, [r7, #0]
 800593a:	781b      	ldrb	r3, [r3, #0]
 800593c:	009b      	lsls	r3, r3, #2
 800593e:	4413      	add	r3, r2
 8005940:	881b      	ldrh	r3, [r3, #0]
 8005942:	83fb      	strh	r3, [r7, #30]
 8005944:	8bfb      	ldrh	r3, [r7, #30]
 8005946:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800594a:	2b00      	cmp	r3, #0
 800594c:	d01b      	beq.n	8005986 <USB_ActivateEndpoint+0x336>
 800594e:	687a      	ldr	r2, [r7, #4]
 8005950:	683b      	ldr	r3, [r7, #0]
 8005952:	781b      	ldrb	r3, [r3, #0]
 8005954:	009b      	lsls	r3, r3, #2
 8005956:	4413      	add	r3, r2
 8005958:	881b      	ldrh	r3, [r3, #0]
 800595a:	b29b      	uxth	r3, r3
 800595c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005960:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005964:	83bb      	strh	r3, [r7, #28]
 8005966:	687a      	ldr	r2, [r7, #4]
 8005968:	683b      	ldr	r3, [r7, #0]
 800596a:	781b      	ldrb	r3, [r3, #0]
 800596c:	009b      	lsls	r3, r3, #2
 800596e:	441a      	add	r2, r3
 8005970:	8bbb      	ldrh	r3, [r7, #28]
 8005972:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005976:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800597a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800597e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005982:	b29b      	uxth	r3, r3
 8005984:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005986:	687a      	ldr	r2, [r7, #4]
 8005988:	683b      	ldr	r3, [r7, #0]
 800598a:	781b      	ldrb	r3, [r3, #0]
 800598c:	009b      	lsls	r3, r3, #2
 800598e:	4413      	add	r3, r2
 8005990:	881b      	ldrh	r3, [r3, #0]
 8005992:	b29b      	uxth	r3, r3
 8005994:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005998:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800599c:	837b      	strh	r3, [r7, #26]
 800599e:	8b7b      	ldrh	r3, [r7, #26]
 80059a0:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80059a4:	837b      	strh	r3, [r7, #26]
 80059a6:	8b7b      	ldrh	r3, [r7, #26]
 80059a8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80059ac:	837b      	strh	r3, [r7, #26]
 80059ae:	687a      	ldr	r2, [r7, #4]
 80059b0:	683b      	ldr	r3, [r7, #0]
 80059b2:	781b      	ldrb	r3, [r3, #0]
 80059b4:	009b      	lsls	r3, r3, #2
 80059b6:	441a      	add	r2, r3
 80059b8:	8b7b      	ldrh	r3, [r7, #26]
 80059ba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80059be:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80059c2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80059c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80059ca:	b29b      	uxth	r3, r3
 80059cc:	8013      	strh	r3, [r2, #0]
 80059ce:	e1a2      	b.n	8005d16 <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 80059d0:	687a      	ldr	r2, [r7, #4]
 80059d2:	683b      	ldr	r3, [r7, #0]
 80059d4:	781b      	ldrb	r3, [r3, #0]
 80059d6:	009b      	lsls	r3, r3, #2
 80059d8:	4413      	add	r3, r2
 80059da:	881b      	ldrh	r3, [r3, #0]
 80059dc:	b29b      	uxth	r3, r3
 80059de:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80059e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80059e6:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 80059ea:	687a      	ldr	r2, [r7, #4]
 80059ec:	683b      	ldr	r3, [r7, #0]
 80059ee:	781b      	ldrb	r3, [r3, #0]
 80059f0:	009b      	lsls	r3, r3, #2
 80059f2:	441a      	add	r2, r3
 80059f4:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 80059f8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80059fc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005a00:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8005a04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005a08:	b29b      	uxth	r3, r3
 8005a0a:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	65bb      	str	r3, [r7, #88]	; 0x58
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005a16:	b29b      	uxth	r3, r3
 8005a18:	461a      	mov	r2, r3
 8005a1a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005a1c:	4413      	add	r3, r2
 8005a1e:	65bb      	str	r3, [r7, #88]	; 0x58
 8005a20:	683b      	ldr	r3, [r7, #0]
 8005a22:	781b      	ldrb	r3, [r3, #0]
 8005a24:	011a      	lsls	r2, r3, #4
 8005a26:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005a28:	4413      	add	r3, r2
 8005a2a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005a2e:	657b      	str	r3, [r7, #84]	; 0x54
 8005a30:	683b      	ldr	r3, [r7, #0]
 8005a32:	891b      	ldrh	r3, [r3, #8]
 8005a34:	085b      	lsrs	r3, r3, #1
 8005a36:	b29b      	uxth	r3, r3
 8005a38:	005b      	lsls	r3, r3, #1
 8005a3a:	b29a      	uxth	r2, r3
 8005a3c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005a3e:	801a      	strh	r2, [r3, #0]
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	653b      	str	r3, [r7, #80]	; 0x50
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005a4a:	b29b      	uxth	r3, r3
 8005a4c:	461a      	mov	r2, r3
 8005a4e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005a50:	4413      	add	r3, r2
 8005a52:	653b      	str	r3, [r7, #80]	; 0x50
 8005a54:	683b      	ldr	r3, [r7, #0]
 8005a56:	781b      	ldrb	r3, [r3, #0]
 8005a58:	011a      	lsls	r2, r3, #4
 8005a5a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005a5c:	4413      	add	r3, r2
 8005a5e:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8005a62:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005a64:	683b      	ldr	r3, [r7, #0]
 8005a66:	895b      	ldrh	r3, [r3, #10]
 8005a68:	085b      	lsrs	r3, r3, #1
 8005a6a:	b29b      	uxth	r3, r3
 8005a6c:	005b      	lsls	r3, r3, #1
 8005a6e:	b29a      	uxth	r2, r3
 8005a70:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005a72:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8005a74:	683b      	ldr	r3, [r7, #0]
 8005a76:	785b      	ldrb	r3, [r3, #1]
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	f040 8091 	bne.w	8005ba0 <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005a7e:	687a      	ldr	r2, [r7, #4]
 8005a80:	683b      	ldr	r3, [r7, #0]
 8005a82:	781b      	ldrb	r3, [r3, #0]
 8005a84:	009b      	lsls	r3, r3, #2
 8005a86:	4413      	add	r3, r2
 8005a88:	881b      	ldrh	r3, [r3, #0]
 8005a8a:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8005a8c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8005a8e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d01b      	beq.n	8005ace <USB_ActivateEndpoint+0x47e>
 8005a96:	687a      	ldr	r2, [r7, #4]
 8005a98:	683b      	ldr	r3, [r7, #0]
 8005a9a:	781b      	ldrb	r3, [r3, #0]
 8005a9c:	009b      	lsls	r3, r3, #2
 8005a9e:	4413      	add	r3, r2
 8005aa0:	881b      	ldrh	r3, [r3, #0]
 8005aa2:	b29b      	uxth	r3, r3
 8005aa4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005aa8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005aac:	877b      	strh	r3, [r7, #58]	; 0x3a
 8005aae:	687a      	ldr	r2, [r7, #4]
 8005ab0:	683b      	ldr	r3, [r7, #0]
 8005ab2:	781b      	ldrb	r3, [r3, #0]
 8005ab4:	009b      	lsls	r3, r3, #2
 8005ab6:	441a      	add	r2, r3
 8005ab8:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8005aba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005abe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005ac2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005ac6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005aca:	b29b      	uxth	r3, r3
 8005acc:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005ace:	687a      	ldr	r2, [r7, #4]
 8005ad0:	683b      	ldr	r3, [r7, #0]
 8005ad2:	781b      	ldrb	r3, [r3, #0]
 8005ad4:	009b      	lsls	r3, r3, #2
 8005ad6:	4413      	add	r3, r2
 8005ad8:	881b      	ldrh	r3, [r3, #0]
 8005ada:	873b      	strh	r3, [r7, #56]	; 0x38
 8005adc:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005ade:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d01b      	beq.n	8005b1e <USB_ActivateEndpoint+0x4ce>
 8005ae6:	687a      	ldr	r2, [r7, #4]
 8005ae8:	683b      	ldr	r3, [r7, #0]
 8005aea:	781b      	ldrb	r3, [r3, #0]
 8005aec:	009b      	lsls	r3, r3, #2
 8005aee:	4413      	add	r3, r2
 8005af0:	881b      	ldrh	r3, [r3, #0]
 8005af2:	b29b      	uxth	r3, r3
 8005af4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005af8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005afc:	86fb      	strh	r3, [r7, #54]	; 0x36
 8005afe:	687a      	ldr	r2, [r7, #4]
 8005b00:	683b      	ldr	r3, [r7, #0]
 8005b02:	781b      	ldrb	r3, [r3, #0]
 8005b04:	009b      	lsls	r3, r3, #2
 8005b06:	441a      	add	r2, r3
 8005b08:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005b0a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005b0e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005b12:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005b16:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005b1a:	b29b      	uxth	r3, r3
 8005b1c:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005b1e:	687a      	ldr	r2, [r7, #4]
 8005b20:	683b      	ldr	r3, [r7, #0]
 8005b22:	781b      	ldrb	r3, [r3, #0]
 8005b24:	009b      	lsls	r3, r3, #2
 8005b26:	4413      	add	r3, r2
 8005b28:	881b      	ldrh	r3, [r3, #0]
 8005b2a:	b29b      	uxth	r3, r3
 8005b2c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005b30:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b34:	86bb      	strh	r3, [r7, #52]	; 0x34
 8005b36:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8005b38:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005b3c:	86bb      	strh	r3, [r7, #52]	; 0x34
 8005b3e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8005b40:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005b44:	86bb      	strh	r3, [r7, #52]	; 0x34
 8005b46:	687a      	ldr	r2, [r7, #4]
 8005b48:	683b      	ldr	r3, [r7, #0]
 8005b4a:	781b      	ldrb	r3, [r3, #0]
 8005b4c:	009b      	lsls	r3, r3, #2
 8005b4e:	441a      	add	r2, r3
 8005b50:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8005b52:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005b56:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005b5a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005b5e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005b62:	b29b      	uxth	r3, r3
 8005b64:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005b66:	687a      	ldr	r2, [r7, #4]
 8005b68:	683b      	ldr	r3, [r7, #0]
 8005b6a:	781b      	ldrb	r3, [r3, #0]
 8005b6c:	009b      	lsls	r3, r3, #2
 8005b6e:	4413      	add	r3, r2
 8005b70:	881b      	ldrh	r3, [r3, #0]
 8005b72:	b29b      	uxth	r3, r3
 8005b74:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005b78:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005b7c:	867b      	strh	r3, [r7, #50]	; 0x32
 8005b7e:	687a      	ldr	r2, [r7, #4]
 8005b80:	683b      	ldr	r3, [r7, #0]
 8005b82:	781b      	ldrb	r3, [r3, #0]
 8005b84:	009b      	lsls	r3, r3, #2
 8005b86:	441a      	add	r2, r3
 8005b88:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8005b8a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005b8e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005b92:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005b96:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005b9a:	b29b      	uxth	r3, r3
 8005b9c:	8013      	strh	r3, [r2, #0]
 8005b9e:	e0ba      	b.n	8005d16 <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005ba0:	687a      	ldr	r2, [r7, #4]
 8005ba2:	683b      	ldr	r3, [r7, #0]
 8005ba4:	781b      	ldrb	r3, [r3, #0]
 8005ba6:	009b      	lsls	r3, r3, #2
 8005ba8:	4413      	add	r3, r2
 8005baa:	881b      	ldrh	r3, [r3, #0]
 8005bac:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8005bb0:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8005bb4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d01d      	beq.n	8005bf8 <USB_ActivateEndpoint+0x5a8>
 8005bbc:	687a      	ldr	r2, [r7, #4]
 8005bbe:	683b      	ldr	r3, [r7, #0]
 8005bc0:	781b      	ldrb	r3, [r3, #0]
 8005bc2:	009b      	lsls	r3, r3, #2
 8005bc4:	4413      	add	r3, r2
 8005bc6:	881b      	ldrh	r3, [r3, #0]
 8005bc8:	b29b      	uxth	r3, r3
 8005bca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005bce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005bd2:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8005bd6:	687a      	ldr	r2, [r7, #4]
 8005bd8:	683b      	ldr	r3, [r7, #0]
 8005bda:	781b      	ldrb	r3, [r3, #0]
 8005bdc:	009b      	lsls	r3, r3, #2
 8005bde:	441a      	add	r2, r3
 8005be0:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8005be4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005be8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005bec:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005bf0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005bf4:	b29b      	uxth	r3, r3
 8005bf6:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005bf8:	687a      	ldr	r2, [r7, #4]
 8005bfa:	683b      	ldr	r3, [r7, #0]
 8005bfc:	781b      	ldrb	r3, [r3, #0]
 8005bfe:	009b      	lsls	r3, r3, #2
 8005c00:	4413      	add	r3, r2
 8005c02:	881b      	ldrh	r3, [r3, #0]
 8005c04:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8005c08:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8005c0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d01d      	beq.n	8005c50 <USB_ActivateEndpoint+0x600>
 8005c14:	687a      	ldr	r2, [r7, #4]
 8005c16:	683b      	ldr	r3, [r7, #0]
 8005c18:	781b      	ldrb	r3, [r3, #0]
 8005c1a:	009b      	lsls	r3, r3, #2
 8005c1c:	4413      	add	r3, r2
 8005c1e:	881b      	ldrh	r3, [r3, #0]
 8005c20:	b29b      	uxth	r3, r3
 8005c22:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005c26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c2a:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8005c2e:	687a      	ldr	r2, [r7, #4]
 8005c30:	683b      	ldr	r3, [r7, #0]
 8005c32:	781b      	ldrb	r3, [r3, #0]
 8005c34:	009b      	lsls	r3, r3, #2
 8005c36:	441a      	add	r2, r3
 8005c38:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8005c3c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005c40:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005c44:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005c48:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005c4c:	b29b      	uxth	r3, r3
 8005c4e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005c50:	683b      	ldr	r3, [r7, #0]
 8005c52:	78db      	ldrb	r3, [r3, #3]
 8005c54:	2b01      	cmp	r3, #1
 8005c56:	d024      	beq.n	8005ca2 <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005c58:	687a      	ldr	r2, [r7, #4]
 8005c5a:	683b      	ldr	r3, [r7, #0]
 8005c5c:	781b      	ldrb	r3, [r3, #0]
 8005c5e:	009b      	lsls	r3, r3, #2
 8005c60:	4413      	add	r3, r2
 8005c62:	881b      	ldrh	r3, [r3, #0]
 8005c64:	b29b      	uxth	r3, r3
 8005c66:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005c6a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005c6e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8005c72:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8005c76:	f083 0320 	eor.w	r3, r3, #32
 8005c7a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8005c7e:	687a      	ldr	r2, [r7, #4]
 8005c80:	683b      	ldr	r3, [r7, #0]
 8005c82:	781b      	ldrb	r3, [r3, #0]
 8005c84:	009b      	lsls	r3, r3, #2
 8005c86:	441a      	add	r2, r3
 8005c88:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8005c8c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005c90:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005c94:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005c98:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c9c:	b29b      	uxth	r3, r3
 8005c9e:	8013      	strh	r3, [r2, #0]
 8005ca0:	e01d      	b.n	8005cde <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005ca2:	687a      	ldr	r2, [r7, #4]
 8005ca4:	683b      	ldr	r3, [r7, #0]
 8005ca6:	781b      	ldrb	r3, [r3, #0]
 8005ca8:	009b      	lsls	r3, r3, #2
 8005caa:	4413      	add	r3, r2
 8005cac:	881b      	ldrh	r3, [r3, #0]
 8005cae:	b29b      	uxth	r3, r3
 8005cb0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005cb4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005cb8:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8005cbc:	687a      	ldr	r2, [r7, #4]
 8005cbe:	683b      	ldr	r3, [r7, #0]
 8005cc0:	781b      	ldrb	r3, [r3, #0]
 8005cc2:	009b      	lsls	r3, r3, #2
 8005cc4:	441a      	add	r2, r3
 8005cc6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8005cca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005cce:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005cd2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005cd6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005cda:	b29b      	uxth	r3, r3
 8005cdc:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005cde:	687a      	ldr	r2, [r7, #4]
 8005ce0:	683b      	ldr	r3, [r7, #0]
 8005ce2:	781b      	ldrb	r3, [r3, #0]
 8005ce4:	009b      	lsls	r3, r3, #2
 8005ce6:	4413      	add	r3, r2
 8005ce8:	881b      	ldrh	r3, [r3, #0]
 8005cea:	b29b      	uxth	r3, r3
 8005cec:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005cf0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005cf4:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8005cf6:	687a      	ldr	r2, [r7, #4]
 8005cf8:	683b      	ldr	r3, [r7, #0]
 8005cfa:	781b      	ldrb	r3, [r3, #0]
 8005cfc:	009b      	lsls	r3, r3, #2
 8005cfe:	441a      	add	r2, r3
 8005d00:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8005d02:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005d06:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005d0a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005d0e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005d12:	b29b      	uxth	r3, r3
 8005d14:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8005d16:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8005d1a:	4618      	mov	r0, r3
 8005d1c:	376c      	adds	r7, #108	; 0x6c
 8005d1e:	46bd      	mov	sp, r7
 8005d20:	bc80      	pop	{r7}
 8005d22:	4770      	bx	lr

08005d24 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005d24:	b480      	push	{r7}
 8005d26:	b08d      	sub	sp, #52	; 0x34
 8005d28:	af00      	add	r7, sp, #0
 8005d2a:	6078      	str	r0, [r7, #4]
 8005d2c:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8005d2e:	683b      	ldr	r3, [r7, #0]
 8005d30:	7b1b      	ldrb	r3, [r3, #12]
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	f040 808e 	bne.w	8005e54 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8005d38:	683b      	ldr	r3, [r7, #0]
 8005d3a:	785b      	ldrb	r3, [r3, #1]
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d044      	beq.n	8005dca <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005d40:	687a      	ldr	r2, [r7, #4]
 8005d42:	683b      	ldr	r3, [r7, #0]
 8005d44:	781b      	ldrb	r3, [r3, #0]
 8005d46:	009b      	lsls	r3, r3, #2
 8005d48:	4413      	add	r3, r2
 8005d4a:	881b      	ldrh	r3, [r3, #0]
 8005d4c:	81bb      	strh	r3, [r7, #12]
 8005d4e:	89bb      	ldrh	r3, [r7, #12]
 8005d50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d01b      	beq.n	8005d90 <USB_DeactivateEndpoint+0x6c>
 8005d58:	687a      	ldr	r2, [r7, #4]
 8005d5a:	683b      	ldr	r3, [r7, #0]
 8005d5c:	781b      	ldrb	r3, [r3, #0]
 8005d5e:	009b      	lsls	r3, r3, #2
 8005d60:	4413      	add	r3, r2
 8005d62:	881b      	ldrh	r3, [r3, #0]
 8005d64:	b29b      	uxth	r3, r3
 8005d66:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005d6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d6e:	817b      	strh	r3, [r7, #10]
 8005d70:	687a      	ldr	r2, [r7, #4]
 8005d72:	683b      	ldr	r3, [r7, #0]
 8005d74:	781b      	ldrb	r3, [r3, #0]
 8005d76:	009b      	lsls	r3, r3, #2
 8005d78:	441a      	add	r2, r3
 8005d7a:	897b      	ldrh	r3, [r7, #10]
 8005d7c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005d80:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005d84:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005d88:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005d8c:	b29b      	uxth	r3, r3
 8005d8e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005d90:	687a      	ldr	r2, [r7, #4]
 8005d92:	683b      	ldr	r3, [r7, #0]
 8005d94:	781b      	ldrb	r3, [r3, #0]
 8005d96:	009b      	lsls	r3, r3, #2
 8005d98:	4413      	add	r3, r2
 8005d9a:	881b      	ldrh	r3, [r3, #0]
 8005d9c:	b29b      	uxth	r3, r3
 8005d9e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005da2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005da6:	813b      	strh	r3, [r7, #8]
 8005da8:	687a      	ldr	r2, [r7, #4]
 8005daa:	683b      	ldr	r3, [r7, #0]
 8005dac:	781b      	ldrb	r3, [r3, #0]
 8005dae:	009b      	lsls	r3, r3, #2
 8005db0:	441a      	add	r2, r3
 8005db2:	893b      	ldrh	r3, [r7, #8]
 8005db4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005db8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005dbc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005dc0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005dc4:	b29b      	uxth	r3, r3
 8005dc6:	8013      	strh	r3, [r2, #0]
 8005dc8:	e192      	b.n	80060f0 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005dca:	687a      	ldr	r2, [r7, #4]
 8005dcc:	683b      	ldr	r3, [r7, #0]
 8005dce:	781b      	ldrb	r3, [r3, #0]
 8005dd0:	009b      	lsls	r3, r3, #2
 8005dd2:	4413      	add	r3, r2
 8005dd4:	881b      	ldrh	r3, [r3, #0]
 8005dd6:	827b      	strh	r3, [r7, #18]
 8005dd8:	8a7b      	ldrh	r3, [r7, #18]
 8005dda:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d01b      	beq.n	8005e1a <USB_DeactivateEndpoint+0xf6>
 8005de2:	687a      	ldr	r2, [r7, #4]
 8005de4:	683b      	ldr	r3, [r7, #0]
 8005de6:	781b      	ldrb	r3, [r3, #0]
 8005de8:	009b      	lsls	r3, r3, #2
 8005dea:	4413      	add	r3, r2
 8005dec:	881b      	ldrh	r3, [r3, #0]
 8005dee:	b29b      	uxth	r3, r3
 8005df0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005df4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005df8:	823b      	strh	r3, [r7, #16]
 8005dfa:	687a      	ldr	r2, [r7, #4]
 8005dfc:	683b      	ldr	r3, [r7, #0]
 8005dfe:	781b      	ldrb	r3, [r3, #0]
 8005e00:	009b      	lsls	r3, r3, #2
 8005e02:	441a      	add	r2, r3
 8005e04:	8a3b      	ldrh	r3, [r7, #16]
 8005e06:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005e0a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005e0e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005e12:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e16:	b29b      	uxth	r3, r3
 8005e18:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005e1a:	687a      	ldr	r2, [r7, #4]
 8005e1c:	683b      	ldr	r3, [r7, #0]
 8005e1e:	781b      	ldrb	r3, [r3, #0]
 8005e20:	009b      	lsls	r3, r3, #2
 8005e22:	4413      	add	r3, r2
 8005e24:	881b      	ldrh	r3, [r3, #0]
 8005e26:	b29b      	uxth	r3, r3
 8005e28:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005e2c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e30:	81fb      	strh	r3, [r7, #14]
 8005e32:	687a      	ldr	r2, [r7, #4]
 8005e34:	683b      	ldr	r3, [r7, #0]
 8005e36:	781b      	ldrb	r3, [r3, #0]
 8005e38:	009b      	lsls	r3, r3, #2
 8005e3a:	441a      	add	r2, r3
 8005e3c:	89fb      	ldrh	r3, [r7, #14]
 8005e3e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005e42:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005e46:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005e4a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e4e:	b29b      	uxth	r3, r3
 8005e50:	8013      	strh	r3, [r2, #0]
 8005e52:	e14d      	b.n	80060f0 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8005e54:	683b      	ldr	r3, [r7, #0]
 8005e56:	785b      	ldrb	r3, [r3, #1]
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	f040 80a5 	bne.w	8005fa8 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005e5e:	687a      	ldr	r2, [r7, #4]
 8005e60:	683b      	ldr	r3, [r7, #0]
 8005e62:	781b      	ldrb	r3, [r3, #0]
 8005e64:	009b      	lsls	r3, r3, #2
 8005e66:	4413      	add	r3, r2
 8005e68:	881b      	ldrh	r3, [r3, #0]
 8005e6a:	843b      	strh	r3, [r7, #32]
 8005e6c:	8c3b      	ldrh	r3, [r7, #32]
 8005e6e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d01b      	beq.n	8005eae <USB_DeactivateEndpoint+0x18a>
 8005e76:	687a      	ldr	r2, [r7, #4]
 8005e78:	683b      	ldr	r3, [r7, #0]
 8005e7a:	781b      	ldrb	r3, [r3, #0]
 8005e7c:	009b      	lsls	r3, r3, #2
 8005e7e:	4413      	add	r3, r2
 8005e80:	881b      	ldrh	r3, [r3, #0]
 8005e82:	b29b      	uxth	r3, r3
 8005e84:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005e88:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e8c:	83fb      	strh	r3, [r7, #30]
 8005e8e:	687a      	ldr	r2, [r7, #4]
 8005e90:	683b      	ldr	r3, [r7, #0]
 8005e92:	781b      	ldrb	r3, [r3, #0]
 8005e94:	009b      	lsls	r3, r3, #2
 8005e96:	441a      	add	r2, r3
 8005e98:	8bfb      	ldrh	r3, [r7, #30]
 8005e9a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005e9e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005ea2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005ea6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005eaa:	b29b      	uxth	r3, r3
 8005eac:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005eae:	687a      	ldr	r2, [r7, #4]
 8005eb0:	683b      	ldr	r3, [r7, #0]
 8005eb2:	781b      	ldrb	r3, [r3, #0]
 8005eb4:	009b      	lsls	r3, r3, #2
 8005eb6:	4413      	add	r3, r2
 8005eb8:	881b      	ldrh	r3, [r3, #0]
 8005eba:	83bb      	strh	r3, [r7, #28]
 8005ebc:	8bbb      	ldrh	r3, [r7, #28]
 8005ebe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d01b      	beq.n	8005efe <USB_DeactivateEndpoint+0x1da>
 8005ec6:	687a      	ldr	r2, [r7, #4]
 8005ec8:	683b      	ldr	r3, [r7, #0]
 8005eca:	781b      	ldrb	r3, [r3, #0]
 8005ecc:	009b      	lsls	r3, r3, #2
 8005ece:	4413      	add	r3, r2
 8005ed0:	881b      	ldrh	r3, [r3, #0]
 8005ed2:	b29b      	uxth	r3, r3
 8005ed4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005ed8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005edc:	837b      	strh	r3, [r7, #26]
 8005ede:	687a      	ldr	r2, [r7, #4]
 8005ee0:	683b      	ldr	r3, [r7, #0]
 8005ee2:	781b      	ldrb	r3, [r3, #0]
 8005ee4:	009b      	lsls	r3, r3, #2
 8005ee6:	441a      	add	r2, r3
 8005ee8:	8b7b      	ldrh	r3, [r7, #26]
 8005eea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005eee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005ef2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005ef6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005efa:	b29b      	uxth	r3, r3
 8005efc:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8005efe:	687a      	ldr	r2, [r7, #4]
 8005f00:	683b      	ldr	r3, [r7, #0]
 8005f02:	781b      	ldrb	r3, [r3, #0]
 8005f04:	009b      	lsls	r3, r3, #2
 8005f06:	4413      	add	r3, r2
 8005f08:	881b      	ldrh	r3, [r3, #0]
 8005f0a:	b29b      	uxth	r3, r3
 8005f0c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005f10:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f14:	833b      	strh	r3, [r7, #24]
 8005f16:	687a      	ldr	r2, [r7, #4]
 8005f18:	683b      	ldr	r3, [r7, #0]
 8005f1a:	781b      	ldrb	r3, [r3, #0]
 8005f1c:	009b      	lsls	r3, r3, #2
 8005f1e:	441a      	add	r2, r3
 8005f20:	8b3b      	ldrh	r3, [r7, #24]
 8005f22:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005f26:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005f2a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005f2e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005f32:	b29b      	uxth	r3, r3
 8005f34:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005f36:	687a      	ldr	r2, [r7, #4]
 8005f38:	683b      	ldr	r3, [r7, #0]
 8005f3a:	781b      	ldrb	r3, [r3, #0]
 8005f3c:	009b      	lsls	r3, r3, #2
 8005f3e:	4413      	add	r3, r2
 8005f40:	881b      	ldrh	r3, [r3, #0]
 8005f42:	b29b      	uxth	r3, r3
 8005f44:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005f48:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f4c:	82fb      	strh	r3, [r7, #22]
 8005f4e:	687a      	ldr	r2, [r7, #4]
 8005f50:	683b      	ldr	r3, [r7, #0]
 8005f52:	781b      	ldrb	r3, [r3, #0]
 8005f54:	009b      	lsls	r3, r3, #2
 8005f56:	441a      	add	r2, r3
 8005f58:	8afb      	ldrh	r3, [r7, #22]
 8005f5a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005f5e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005f62:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005f66:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f6a:	b29b      	uxth	r3, r3
 8005f6c:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005f6e:	687a      	ldr	r2, [r7, #4]
 8005f70:	683b      	ldr	r3, [r7, #0]
 8005f72:	781b      	ldrb	r3, [r3, #0]
 8005f74:	009b      	lsls	r3, r3, #2
 8005f76:	4413      	add	r3, r2
 8005f78:	881b      	ldrh	r3, [r3, #0]
 8005f7a:	b29b      	uxth	r3, r3
 8005f7c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005f80:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005f84:	82bb      	strh	r3, [r7, #20]
 8005f86:	687a      	ldr	r2, [r7, #4]
 8005f88:	683b      	ldr	r3, [r7, #0]
 8005f8a:	781b      	ldrb	r3, [r3, #0]
 8005f8c:	009b      	lsls	r3, r3, #2
 8005f8e:	441a      	add	r2, r3
 8005f90:	8abb      	ldrh	r3, [r7, #20]
 8005f92:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005f96:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005f9a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005f9e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005fa2:	b29b      	uxth	r3, r3
 8005fa4:	8013      	strh	r3, [r2, #0]
 8005fa6:	e0a3      	b.n	80060f0 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005fa8:	687a      	ldr	r2, [r7, #4]
 8005faa:	683b      	ldr	r3, [r7, #0]
 8005fac:	781b      	ldrb	r3, [r3, #0]
 8005fae:	009b      	lsls	r3, r3, #2
 8005fb0:	4413      	add	r3, r2
 8005fb2:	881b      	ldrh	r3, [r3, #0]
 8005fb4:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8005fb6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005fb8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d01b      	beq.n	8005ff8 <USB_DeactivateEndpoint+0x2d4>
 8005fc0:	687a      	ldr	r2, [r7, #4]
 8005fc2:	683b      	ldr	r3, [r7, #0]
 8005fc4:	781b      	ldrb	r3, [r3, #0]
 8005fc6:	009b      	lsls	r3, r3, #2
 8005fc8:	4413      	add	r3, r2
 8005fca:	881b      	ldrh	r3, [r3, #0]
 8005fcc:	b29b      	uxth	r3, r3
 8005fce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005fd2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005fd6:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8005fd8:	687a      	ldr	r2, [r7, #4]
 8005fda:	683b      	ldr	r3, [r7, #0]
 8005fdc:	781b      	ldrb	r3, [r3, #0]
 8005fde:	009b      	lsls	r3, r3, #2
 8005fe0:	441a      	add	r2, r3
 8005fe2:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8005fe4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005fe8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005fec:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005ff0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ff4:	b29b      	uxth	r3, r3
 8005ff6:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005ff8:	687a      	ldr	r2, [r7, #4]
 8005ffa:	683b      	ldr	r3, [r7, #0]
 8005ffc:	781b      	ldrb	r3, [r3, #0]
 8005ffe:	009b      	lsls	r3, r3, #2
 8006000:	4413      	add	r3, r2
 8006002:	881b      	ldrh	r3, [r3, #0]
 8006004:	857b      	strh	r3, [r7, #42]	; 0x2a
 8006006:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8006008:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800600c:	2b00      	cmp	r3, #0
 800600e:	d01b      	beq.n	8006048 <USB_DeactivateEndpoint+0x324>
 8006010:	687a      	ldr	r2, [r7, #4]
 8006012:	683b      	ldr	r3, [r7, #0]
 8006014:	781b      	ldrb	r3, [r3, #0]
 8006016:	009b      	lsls	r3, r3, #2
 8006018:	4413      	add	r3, r2
 800601a:	881b      	ldrh	r3, [r3, #0]
 800601c:	b29b      	uxth	r3, r3
 800601e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006022:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006026:	853b      	strh	r3, [r7, #40]	; 0x28
 8006028:	687a      	ldr	r2, [r7, #4]
 800602a:	683b      	ldr	r3, [r7, #0]
 800602c:	781b      	ldrb	r3, [r3, #0]
 800602e:	009b      	lsls	r3, r3, #2
 8006030:	441a      	add	r2, r3
 8006032:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8006034:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006038:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800603c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006040:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006044:	b29b      	uxth	r3, r3
 8006046:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8006048:	687a      	ldr	r2, [r7, #4]
 800604a:	683b      	ldr	r3, [r7, #0]
 800604c:	781b      	ldrb	r3, [r3, #0]
 800604e:	009b      	lsls	r3, r3, #2
 8006050:	4413      	add	r3, r2
 8006052:	881b      	ldrh	r3, [r3, #0]
 8006054:	b29b      	uxth	r3, r3
 8006056:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800605a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800605e:	84fb      	strh	r3, [r7, #38]	; 0x26
 8006060:	687a      	ldr	r2, [r7, #4]
 8006062:	683b      	ldr	r3, [r7, #0]
 8006064:	781b      	ldrb	r3, [r3, #0]
 8006066:	009b      	lsls	r3, r3, #2
 8006068:	441a      	add	r2, r3
 800606a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800606c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006070:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006074:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006078:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800607c:	b29b      	uxth	r3, r3
 800607e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006080:	687a      	ldr	r2, [r7, #4]
 8006082:	683b      	ldr	r3, [r7, #0]
 8006084:	781b      	ldrb	r3, [r3, #0]
 8006086:	009b      	lsls	r3, r3, #2
 8006088:	4413      	add	r3, r2
 800608a:	881b      	ldrh	r3, [r3, #0]
 800608c:	b29b      	uxth	r3, r3
 800608e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006092:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006096:	84bb      	strh	r3, [r7, #36]	; 0x24
 8006098:	687a      	ldr	r2, [r7, #4]
 800609a:	683b      	ldr	r3, [r7, #0]
 800609c:	781b      	ldrb	r3, [r3, #0]
 800609e:	009b      	lsls	r3, r3, #2
 80060a0:	441a      	add	r2, r3
 80060a2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80060a4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80060a8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80060ac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80060b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80060b4:	b29b      	uxth	r3, r3
 80060b6:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80060b8:	687a      	ldr	r2, [r7, #4]
 80060ba:	683b      	ldr	r3, [r7, #0]
 80060bc:	781b      	ldrb	r3, [r3, #0]
 80060be:	009b      	lsls	r3, r3, #2
 80060c0:	4413      	add	r3, r2
 80060c2:	881b      	ldrh	r3, [r3, #0]
 80060c4:	b29b      	uxth	r3, r3
 80060c6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80060ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80060ce:	847b      	strh	r3, [r7, #34]	; 0x22
 80060d0:	687a      	ldr	r2, [r7, #4]
 80060d2:	683b      	ldr	r3, [r7, #0]
 80060d4:	781b      	ldrb	r3, [r3, #0]
 80060d6:	009b      	lsls	r3, r3, #2
 80060d8:	441a      	add	r2, r3
 80060da:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80060dc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80060e0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80060e4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80060e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80060ec:	b29b      	uxth	r3, r3
 80060ee:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 80060f0:	2300      	movs	r3, #0
}
 80060f2:	4618      	mov	r0, r3
 80060f4:	3734      	adds	r7, #52	; 0x34
 80060f6:	46bd      	mov	sp, r7
 80060f8:	bc80      	pop	{r7}
 80060fa:	4770      	bx	lr

080060fc <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80060fc:	b580      	push	{r7, lr}
 80060fe:	b0cc      	sub	sp, #304	; 0x130
 8006100:	af00      	add	r7, sp, #0
 8006102:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006106:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800610a:	6018      	str	r0, [r3, #0]
 800610c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006110:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006114:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006116:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800611a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	785b      	ldrb	r3, [r3, #1]
 8006122:	2b01      	cmp	r3, #1
 8006124:	f041 817d 	bne.w	8007422 <USB_EPStartXfer+0x1326>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8006128:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800612c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	699a      	ldr	r2, [r3, #24]
 8006134:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006138:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	691b      	ldr	r3, [r3, #16]
 8006140:	429a      	cmp	r2, r3
 8006142:	d908      	bls.n	8006156 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8006144:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006148:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	691b      	ldr	r3, [r3, #16]
 8006150:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8006154:	e007      	b.n	8006166 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8006156:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800615a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	699b      	ldr	r3, [r3, #24]
 8006162:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8006166:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800616a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	7b1b      	ldrb	r3, [r3, #12]
 8006172:	2b00      	cmp	r3, #0
 8006174:	d152      	bne.n	800621c <USB_EPStartXfer+0x120>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8006176:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800617a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	6959      	ldr	r1, [r3, #20]
 8006182:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006186:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	88da      	ldrh	r2, [r3, #6]
 800618e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006192:	b29b      	uxth	r3, r3
 8006194:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8006198:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 800619c:	6800      	ldr	r0, [r0, #0]
 800619e:	f001 ff23 	bl	8007fe8 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80061a2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80061a6:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80061aa:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80061ae:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 80061b2:	6812      	ldr	r2, [r2, #0]
 80061b4:	601a      	str	r2, [r3, #0]
 80061b6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80061ba:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80061c4:	b29b      	uxth	r3, r3
 80061c6:	4619      	mov	r1, r3
 80061c8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80061cc:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80061d0:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80061d4:	f5a2 7290 	sub.w	r2, r2, #288	; 0x120
 80061d8:	6812      	ldr	r2, [r2, #0]
 80061da:	440a      	add	r2, r1
 80061dc:	601a      	str	r2, [r3, #0]
 80061de:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80061e2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	781b      	ldrb	r3, [r3, #0]
 80061ea:	011a      	lsls	r2, r3, #4
 80061ec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80061f0:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	4413      	add	r3, r2
 80061f8:	f203 4204 	addw	r2, r3, #1028	; 0x404
 80061fc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006200:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8006204:	601a      	str	r2, [r3, #0]
 8006206:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800620a:	b29a      	uxth	r2, r3
 800620c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006210:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	801a      	strh	r2, [r3, #0]
 8006218:	f001 b8b5 	b.w	8007386 <USB_EPStartXfer+0x128a>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800621c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006220:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	78db      	ldrb	r3, [r3, #3]
 8006228:	2b02      	cmp	r3, #2
 800622a:	f040 84c6 	bne.w	8006bba <USB_EPStartXfer+0xabe>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800622e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006232:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	6a1a      	ldr	r2, [r3, #32]
 800623a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800623e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	691b      	ldr	r3, [r3, #16]
 8006246:	429a      	cmp	r2, r3
 8006248:	f240 8443 	bls.w	8006ad2 <USB_EPStartXfer+0x9d6>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 800624c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006250:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006254:	681a      	ldr	r2, [r3, #0]
 8006256:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800625a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	781b      	ldrb	r3, [r3, #0]
 8006262:	009b      	lsls	r3, r3, #2
 8006264:	4413      	add	r3, r2
 8006266:	881b      	ldrh	r3, [r3, #0]
 8006268:	b29b      	uxth	r3, r3
 800626a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800626e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006272:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8006276:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800627a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800627e:	681a      	ldr	r2, [r3, #0]
 8006280:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006284:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	781b      	ldrb	r3, [r3, #0]
 800628c:	009b      	lsls	r3, r3, #2
 800628e:	441a      	add	r2, r3
 8006290:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8006294:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006298:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800629c:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80062a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80062a4:	b29b      	uxth	r3, r3
 80062a6:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 80062a8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80062ac:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	6a1a      	ldr	r2, [r3, #32]
 80062b4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80062b8:	1ad2      	subs	r2, r2, r3
 80062ba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80062be:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80062c6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80062ca:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80062ce:	681a      	ldr	r2, [r3, #0]
 80062d0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80062d4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	781b      	ldrb	r3, [r3, #0]
 80062dc:	009b      	lsls	r3, r3, #2
 80062de:	4413      	add	r3, r2
 80062e0:	881b      	ldrh	r3, [r3, #0]
 80062e2:	b29b      	uxth	r3, r3
 80062e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	f000 823e 	beq.w	800676a <USB_EPStartXfer+0x66e>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80062ee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80062f2:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80062f6:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80062fa:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 80062fe:	6812      	ldr	r2, [r2, #0]
 8006300:	601a      	str	r2, [r3, #0]
 8006302:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006306:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	785b      	ldrb	r3, [r3, #1]
 800630e:	2b00      	cmp	r3, #0
 8006310:	f040 809a 	bne.w	8006448 <USB_EPStartXfer+0x34c>
 8006314:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006318:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800631c:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006320:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8006324:	6812      	ldr	r2, [r2, #0]
 8006326:	601a      	str	r2, [r3, #0]
 8006328:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800632c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006336:	b29b      	uxth	r3, r3
 8006338:	4619      	mov	r1, r3
 800633a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800633e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006342:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006346:	f5a2 7284 	sub.w	r2, r2, #264	; 0x108
 800634a:	6812      	ldr	r2, [r2, #0]
 800634c:	440a      	add	r2, r1
 800634e:	601a      	str	r2, [r3, #0]
 8006350:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006354:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	781b      	ldrb	r3, [r3, #0]
 800635c:	011a      	lsls	r2, r3, #4
 800635e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006362:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	4413      	add	r3, r2
 800636a:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 800636e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006372:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8006376:	601a      	str	r2, [r3, #0]
 8006378:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800637c:	2b00      	cmp	r3, #0
 800637e:	d122      	bne.n	80063c6 <USB_EPStartXfer+0x2ca>
 8006380:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006384:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	881b      	ldrh	r3, [r3, #0]
 800638c:	b29b      	uxth	r3, r3
 800638e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006392:	b29a      	uxth	r2, r3
 8006394:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006398:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	801a      	strh	r2, [r3, #0]
 80063a0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80063a4:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	881b      	ldrh	r3, [r3, #0]
 80063ac:	b29b      	uxth	r3, r3
 80063ae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80063b2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80063b6:	b29a      	uxth	r2, r3
 80063b8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80063bc:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	801a      	strh	r2, [r3, #0]
 80063c4:	e079      	b.n	80064ba <USB_EPStartXfer+0x3be>
 80063c6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80063ca:	2b3e      	cmp	r3, #62	; 0x3e
 80063cc:	d81b      	bhi.n	8006406 <USB_EPStartXfer+0x30a>
 80063ce:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80063d2:	085b      	lsrs	r3, r3, #1
 80063d4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80063d8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80063dc:	f003 0301 	and.w	r3, r3, #1
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d004      	beq.n	80063ee <USB_EPStartXfer+0x2f2>
 80063e4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80063e8:	3301      	adds	r3, #1
 80063ea:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80063ee:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80063f2:	b29b      	uxth	r3, r3
 80063f4:	029b      	lsls	r3, r3, #10
 80063f6:	b29a      	uxth	r2, r3
 80063f8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80063fc:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	801a      	strh	r2, [r3, #0]
 8006404:	e059      	b.n	80064ba <USB_EPStartXfer+0x3be>
 8006406:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800640a:	095b      	lsrs	r3, r3, #5
 800640c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8006410:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006414:	f003 031f 	and.w	r3, r3, #31
 8006418:	2b00      	cmp	r3, #0
 800641a:	d104      	bne.n	8006426 <USB_EPStartXfer+0x32a>
 800641c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006420:	3b01      	subs	r3, #1
 8006422:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8006426:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800642a:	b29b      	uxth	r3, r3
 800642c:	029b      	lsls	r3, r3, #10
 800642e:	b29b      	uxth	r3, r3
 8006430:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006434:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006438:	b29a      	uxth	r2, r3
 800643a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800643e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	801a      	strh	r2, [r3, #0]
 8006446:	e038      	b.n	80064ba <USB_EPStartXfer+0x3be>
 8006448:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800644c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	785b      	ldrb	r3, [r3, #1]
 8006454:	2b01      	cmp	r3, #1
 8006456:	d130      	bne.n	80064ba <USB_EPStartXfer+0x3be>
 8006458:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800645c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006466:	b29b      	uxth	r3, r3
 8006468:	4619      	mov	r1, r3
 800646a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800646e:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8006472:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006476:	f5a2 7280 	sub.w	r2, r2, #256	; 0x100
 800647a:	6812      	ldr	r2, [r2, #0]
 800647c:	440a      	add	r2, r1
 800647e:	601a      	str	r2, [r3, #0]
 8006480:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006484:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	781b      	ldrb	r3, [r3, #0]
 800648c:	011a      	lsls	r2, r3, #4
 800648e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006492:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	4413      	add	r3, r2
 800649a:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 800649e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80064a2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80064a6:	601a      	str	r2, [r3, #0]
 80064a8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80064ac:	b29a      	uxth	r2, r3
 80064ae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80064b2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80064ba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80064be:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	895b      	ldrh	r3, [r3, #10]
 80064c6:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80064ca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80064ce:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	6959      	ldr	r1, [r3, #20]
 80064d6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80064da:	b29b      	uxth	r3, r3
 80064dc:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80064e0:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80064e4:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 80064e8:	6800      	ldr	r0, [r0, #0]
 80064ea:	f001 fd7d 	bl	8007fe8 <USB_WritePMA>
            ep->xfer_buff += len;
 80064ee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80064f2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	695a      	ldr	r2, [r3, #20]
 80064fa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80064fe:	441a      	add	r2, r3
 8006500:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006504:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800650c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006510:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	6a1a      	ldr	r2, [r3, #32]
 8006518:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800651c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	691b      	ldr	r3, [r3, #16]
 8006524:	429a      	cmp	r2, r3
 8006526:	d90f      	bls.n	8006548 <USB_EPStartXfer+0x44c>
            {
              ep->xfer_len_db -= len;
 8006528:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800652c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	6a1a      	ldr	r2, [r3, #32]
 8006534:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006538:	1ad2      	subs	r2, r2, r3
 800653a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800653e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	621a      	str	r2, [r3, #32]
 8006546:	e00e      	b.n	8006566 <USB_EPStartXfer+0x46a>
            }
            else
            {
              len = ep->xfer_len_db;
 8006548:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800654c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	6a1b      	ldr	r3, [r3, #32]
 8006554:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 8006558:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800655c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	2200      	movs	r2, #0
 8006564:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006566:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800656a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	785b      	ldrb	r3, [r3, #1]
 8006572:	2b00      	cmp	r3, #0
 8006574:	f040 809a 	bne.w	80066ac <USB_EPStartXfer+0x5b0>
 8006578:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800657c:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8006580:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006584:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8006588:	6812      	ldr	r2, [r2, #0]
 800658a:	601a      	str	r2, [r3, #0]
 800658c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006590:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800659a:	b29b      	uxth	r3, r3
 800659c:	4619      	mov	r1, r3
 800659e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80065a2:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80065a6:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80065aa:	f5a2 728c 	sub.w	r2, r2, #280	; 0x118
 80065ae:	6812      	ldr	r2, [r2, #0]
 80065b0:	440a      	add	r2, r1
 80065b2:	601a      	str	r2, [r3, #0]
 80065b4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80065b8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	781b      	ldrb	r3, [r3, #0]
 80065c0:	011a      	lsls	r2, r3, #4
 80065c2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80065c6:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	4413      	add	r3, r2
 80065ce:	f203 4204 	addw	r2, r3, #1028	; 0x404
 80065d2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80065d6:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80065da:	601a      	str	r2, [r3, #0]
 80065dc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d122      	bne.n	800662a <USB_EPStartXfer+0x52e>
 80065e4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80065e8:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	881b      	ldrh	r3, [r3, #0]
 80065f0:	b29b      	uxth	r3, r3
 80065f2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80065f6:	b29a      	uxth	r2, r3
 80065f8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80065fc:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	801a      	strh	r2, [r3, #0]
 8006604:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006608:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	881b      	ldrh	r3, [r3, #0]
 8006610:	b29b      	uxth	r3, r3
 8006612:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006616:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800661a:	b29a      	uxth	r2, r3
 800661c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006620:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	801a      	strh	r2, [r3, #0]
 8006628:	e083      	b.n	8006732 <USB_EPStartXfer+0x636>
 800662a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800662e:	2b3e      	cmp	r3, #62	; 0x3e
 8006630:	d81b      	bhi.n	800666a <USB_EPStartXfer+0x56e>
 8006632:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006636:	085b      	lsrs	r3, r3, #1
 8006638:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800663c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006640:	f003 0301 	and.w	r3, r3, #1
 8006644:	2b00      	cmp	r3, #0
 8006646:	d004      	beq.n	8006652 <USB_EPStartXfer+0x556>
 8006648:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800664c:	3301      	adds	r3, #1
 800664e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8006652:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8006656:	b29b      	uxth	r3, r3
 8006658:	029b      	lsls	r3, r3, #10
 800665a:	b29a      	uxth	r2, r3
 800665c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006660:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	801a      	strh	r2, [r3, #0]
 8006668:	e063      	b.n	8006732 <USB_EPStartXfer+0x636>
 800666a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800666e:	095b      	lsrs	r3, r3, #5
 8006670:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8006674:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006678:	f003 031f 	and.w	r3, r3, #31
 800667c:	2b00      	cmp	r3, #0
 800667e:	d104      	bne.n	800668a <USB_EPStartXfer+0x58e>
 8006680:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8006684:	3b01      	subs	r3, #1
 8006686:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800668a:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800668e:	b29b      	uxth	r3, r3
 8006690:	029b      	lsls	r3, r3, #10
 8006692:	b29b      	uxth	r3, r3
 8006694:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006698:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800669c:	b29a      	uxth	r2, r3
 800669e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80066a2:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	801a      	strh	r2, [r3, #0]
 80066aa:	e042      	b.n	8006732 <USB_EPStartXfer+0x636>
 80066ac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80066b0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	785b      	ldrb	r3, [r3, #1]
 80066b8:	2b01      	cmp	r3, #1
 80066ba:	d13a      	bne.n	8006732 <USB_EPStartXfer+0x636>
 80066bc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80066c0:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80066c4:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80066c8:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 80066cc:	6812      	ldr	r2, [r2, #0]
 80066ce:	601a      	str	r2, [r3, #0]
 80066d0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80066d4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80066de:	b29b      	uxth	r3, r3
 80066e0:	4619      	mov	r1, r3
 80066e2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80066e6:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80066ea:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80066ee:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 80066f2:	6812      	ldr	r2, [r2, #0]
 80066f4:	440a      	add	r2, r1
 80066f6:	601a      	str	r2, [r3, #0]
 80066f8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80066fc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	781b      	ldrb	r3, [r3, #0]
 8006704:	011a      	lsls	r2, r3, #4
 8006706:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800670a:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	4413      	add	r3, r2
 8006712:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8006716:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800671a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800671e:	601a      	str	r2, [r3, #0]
 8006720:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006724:	b29a      	uxth	r2, r3
 8006726:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800672a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8006732:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006736:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	891b      	ldrh	r3, [r3, #8]
 800673e:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006742:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006746:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	6959      	ldr	r1, [r3, #20]
 800674e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006752:	b29b      	uxth	r3, r3
 8006754:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8006758:	f507 7098 	add.w	r0, r7, #304	; 0x130
 800675c:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8006760:	6800      	ldr	r0, [r0, #0]
 8006762:	f001 fc41 	bl	8007fe8 <USB_WritePMA>
 8006766:	f000 be0e 	b.w	8007386 <USB_EPStartXfer+0x128a>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800676a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800676e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	785b      	ldrb	r3, [r3, #1]
 8006776:	2b00      	cmp	r3, #0
 8006778:	d16d      	bne.n	8006856 <USB_EPStartXfer+0x75a>
 800677a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800677e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	64bb      	str	r3, [r7, #72]	; 0x48
 8006786:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800678a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006794:	b29b      	uxth	r3, r3
 8006796:	461a      	mov	r2, r3
 8006798:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800679a:	4413      	add	r3, r2
 800679c:	64bb      	str	r3, [r7, #72]	; 0x48
 800679e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80067a2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	781b      	ldrb	r3, [r3, #0]
 80067aa:	011a      	lsls	r2, r3, #4
 80067ac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80067ae:	4413      	add	r3, r2
 80067b0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80067b4:	647b      	str	r3, [r7, #68]	; 0x44
 80067b6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d112      	bne.n	80067e4 <USB_EPStartXfer+0x6e8>
 80067be:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80067c0:	881b      	ldrh	r3, [r3, #0]
 80067c2:	b29b      	uxth	r3, r3
 80067c4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80067c8:	b29a      	uxth	r2, r3
 80067ca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80067cc:	801a      	strh	r2, [r3, #0]
 80067ce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80067d0:	881b      	ldrh	r3, [r3, #0]
 80067d2:	b29b      	uxth	r3, r3
 80067d4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80067d8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80067dc:	b29a      	uxth	r2, r3
 80067de:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80067e0:	801a      	strh	r2, [r3, #0]
 80067e2:	e063      	b.n	80068ac <USB_EPStartXfer+0x7b0>
 80067e4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80067e8:	2b3e      	cmp	r3, #62	; 0x3e
 80067ea:	d817      	bhi.n	800681c <USB_EPStartXfer+0x720>
 80067ec:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80067f0:	085b      	lsrs	r3, r3, #1
 80067f2:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80067f6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80067fa:	f003 0301 	and.w	r3, r3, #1
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d004      	beq.n	800680c <USB_EPStartXfer+0x710>
 8006802:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8006806:	3301      	adds	r3, #1
 8006808:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800680c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8006810:	b29b      	uxth	r3, r3
 8006812:	029b      	lsls	r3, r3, #10
 8006814:	b29a      	uxth	r2, r3
 8006816:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006818:	801a      	strh	r2, [r3, #0]
 800681a:	e047      	b.n	80068ac <USB_EPStartXfer+0x7b0>
 800681c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006820:	095b      	lsrs	r3, r3, #5
 8006822:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8006826:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800682a:	f003 031f 	and.w	r3, r3, #31
 800682e:	2b00      	cmp	r3, #0
 8006830:	d104      	bne.n	800683c <USB_EPStartXfer+0x740>
 8006832:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8006836:	3b01      	subs	r3, #1
 8006838:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800683c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8006840:	b29b      	uxth	r3, r3
 8006842:	029b      	lsls	r3, r3, #10
 8006844:	b29b      	uxth	r3, r3
 8006846:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800684a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800684e:	b29a      	uxth	r2, r3
 8006850:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006852:	801a      	strh	r2, [r3, #0]
 8006854:	e02a      	b.n	80068ac <USB_EPStartXfer+0x7b0>
 8006856:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800685a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	785b      	ldrb	r3, [r3, #1]
 8006862:	2b01      	cmp	r3, #1
 8006864:	d122      	bne.n	80068ac <USB_EPStartXfer+0x7b0>
 8006866:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800686a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	653b      	str	r3, [r7, #80]	; 0x50
 8006872:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006876:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006880:	b29b      	uxth	r3, r3
 8006882:	461a      	mov	r2, r3
 8006884:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006886:	4413      	add	r3, r2
 8006888:	653b      	str	r3, [r7, #80]	; 0x50
 800688a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800688e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	781b      	ldrb	r3, [r3, #0]
 8006896:	011a      	lsls	r2, r3, #4
 8006898:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800689a:	4413      	add	r3, r2
 800689c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80068a0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80068a2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80068a6:	b29a      	uxth	r2, r3
 80068a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80068aa:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80068ac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80068b0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	891b      	ldrh	r3, [r3, #8]
 80068b8:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80068bc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80068c0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	6959      	ldr	r1, [r3, #20]
 80068c8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80068cc:	b29b      	uxth	r3, r3
 80068ce:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80068d2:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80068d6:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 80068da:	6800      	ldr	r0, [r0, #0]
 80068dc:	f001 fb84 	bl	8007fe8 <USB_WritePMA>
            ep->xfer_buff += len;
 80068e0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80068e4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	695a      	ldr	r2, [r3, #20]
 80068ec:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80068f0:	441a      	add	r2, r3
 80068f2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80068f6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80068fe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006902:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	6a1a      	ldr	r2, [r3, #32]
 800690a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800690e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	691b      	ldr	r3, [r3, #16]
 8006916:	429a      	cmp	r2, r3
 8006918:	d90f      	bls.n	800693a <USB_EPStartXfer+0x83e>
            {
              ep->xfer_len_db -= len;
 800691a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800691e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	6a1a      	ldr	r2, [r3, #32]
 8006926:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800692a:	1ad2      	subs	r2, r2, r3
 800692c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006930:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	621a      	str	r2, [r3, #32]
 8006938:	e00e      	b.n	8006958 <USB_EPStartXfer+0x85c>
            }
            else
            {
              len = ep->xfer_len_db;
 800693a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800693e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	6a1b      	ldr	r3, [r3, #32]
 8006946:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 800694a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800694e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	2200      	movs	r2, #0
 8006956:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006958:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800695c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	643b      	str	r3, [r7, #64]	; 0x40
 8006964:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006968:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	785b      	ldrb	r3, [r3, #1]
 8006970:	2b00      	cmp	r3, #0
 8006972:	d16d      	bne.n	8006a50 <USB_EPStartXfer+0x954>
 8006974:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006978:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	63bb      	str	r3, [r7, #56]	; 0x38
 8006980:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006984:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800698e:	b29b      	uxth	r3, r3
 8006990:	461a      	mov	r2, r3
 8006992:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006994:	4413      	add	r3, r2
 8006996:	63bb      	str	r3, [r7, #56]	; 0x38
 8006998:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800699c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	781b      	ldrb	r3, [r3, #0]
 80069a4:	011a      	lsls	r2, r3, #4
 80069a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069a8:	4413      	add	r3, r2
 80069aa:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80069ae:	637b      	str	r3, [r7, #52]	; 0x34
 80069b0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d112      	bne.n	80069de <USB_EPStartXfer+0x8e2>
 80069b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80069ba:	881b      	ldrh	r3, [r3, #0]
 80069bc:	b29b      	uxth	r3, r3
 80069be:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80069c2:	b29a      	uxth	r2, r3
 80069c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80069c6:	801a      	strh	r2, [r3, #0]
 80069c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80069ca:	881b      	ldrh	r3, [r3, #0]
 80069cc:	b29b      	uxth	r3, r3
 80069ce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80069d2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80069d6:	b29a      	uxth	r2, r3
 80069d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80069da:	801a      	strh	r2, [r3, #0]
 80069dc:	e05d      	b.n	8006a9a <USB_EPStartXfer+0x99e>
 80069de:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80069e2:	2b3e      	cmp	r3, #62	; 0x3e
 80069e4:	d817      	bhi.n	8006a16 <USB_EPStartXfer+0x91a>
 80069e6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80069ea:	085b      	lsrs	r3, r3, #1
 80069ec:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80069f0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80069f4:	f003 0301 	and.w	r3, r3, #1
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d004      	beq.n	8006a06 <USB_EPStartXfer+0x90a>
 80069fc:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006a00:	3301      	adds	r3, #1
 8006a02:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8006a06:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006a0a:	b29b      	uxth	r3, r3
 8006a0c:	029b      	lsls	r3, r3, #10
 8006a0e:	b29a      	uxth	r2, r3
 8006a10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a12:	801a      	strh	r2, [r3, #0]
 8006a14:	e041      	b.n	8006a9a <USB_EPStartXfer+0x99e>
 8006a16:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006a1a:	095b      	lsrs	r3, r3, #5
 8006a1c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8006a20:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006a24:	f003 031f 	and.w	r3, r3, #31
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d104      	bne.n	8006a36 <USB_EPStartXfer+0x93a>
 8006a2c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006a30:	3b01      	subs	r3, #1
 8006a32:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8006a36:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006a3a:	b29b      	uxth	r3, r3
 8006a3c:	029b      	lsls	r3, r3, #10
 8006a3e:	b29b      	uxth	r3, r3
 8006a40:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006a44:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006a48:	b29a      	uxth	r2, r3
 8006a4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a4c:	801a      	strh	r2, [r3, #0]
 8006a4e:	e024      	b.n	8006a9a <USB_EPStartXfer+0x99e>
 8006a50:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a54:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	785b      	ldrb	r3, [r3, #1]
 8006a5c:	2b01      	cmp	r3, #1
 8006a5e:	d11c      	bne.n	8006a9a <USB_EPStartXfer+0x99e>
 8006a60:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a64:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006a6e:	b29b      	uxth	r3, r3
 8006a70:	461a      	mov	r2, r3
 8006a72:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006a74:	4413      	add	r3, r2
 8006a76:	643b      	str	r3, [r7, #64]	; 0x40
 8006a78:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a7c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	781b      	ldrb	r3, [r3, #0]
 8006a84:	011a      	lsls	r2, r3, #4
 8006a86:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006a88:	4413      	add	r3, r2
 8006a8a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006a8e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006a90:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006a94:	b29a      	uxth	r2, r3
 8006a96:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006a98:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8006a9a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a9e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	895b      	ldrh	r3, [r3, #10]
 8006aa6:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006aaa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006aae:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	6959      	ldr	r1, [r3, #20]
 8006ab6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006aba:	b29b      	uxth	r3, r3
 8006abc:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8006ac0:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8006ac4:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8006ac8:	6800      	ldr	r0, [r0, #0]
 8006aca:	f001 fa8d 	bl	8007fe8 <USB_WritePMA>
 8006ace:	f000 bc5a 	b.w	8007386 <USB_EPStartXfer+0x128a>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8006ad2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ad6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	6a1b      	ldr	r3, [r3, #32]
 8006ade:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 8006ae2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ae6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006aea:	681a      	ldr	r2, [r3, #0]
 8006aec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006af0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	781b      	ldrb	r3, [r3, #0]
 8006af8:	009b      	lsls	r3, r3, #2
 8006afa:	4413      	add	r3, r2
 8006afc:	881b      	ldrh	r3, [r3, #0]
 8006afe:	b29b      	uxth	r3, r3
 8006b00:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8006b04:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b08:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8006b0c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b10:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006b14:	681a      	ldr	r2, [r3, #0]
 8006b16:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b1a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	781b      	ldrb	r3, [r3, #0]
 8006b22:	009b      	lsls	r3, r3, #2
 8006b24:	441a      	add	r2, r3
 8006b26:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8006b2a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006b2e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006b32:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006b36:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006b3a:	b29b      	uxth	r3, r3
 8006b3c:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8006b3e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b42:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006b4a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b4e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006b58:	b29b      	uxth	r3, r3
 8006b5a:	461a      	mov	r2, r3
 8006b5c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006b5e:	4413      	add	r3, r2
 8006b60:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006b62:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b66:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	781b      	ldrb	r3, [r3, #0]
 8006b6e:	011a      	lsls	r2, r3, #4
 8006b70:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006b72:	4413      	add	r3, r2
 8006b74:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006b78:	65bb      	str	r3, [r7, #88]	; 0x58
 8006b7a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006b7e:	b29a      	uxth	r2, r3
 8006b80:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006b82:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8006b84:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b88:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	891b      	ldrh	r3, [r3, #8]
 8006b90:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006b94:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b98:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	6959      	ldr	r1, [r3, #20]
 8006ba0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006ba4:	b29b      	uxth	r3, r3
 8006ba6:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8006baa:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8006bae:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8006bb2:	6800      	ldr	r0, [r0, #0]
 8006bb4:	f001 fa18 	bl	8007fe8 <USB_WritePMA>
 8006bb8:	e3e5      	b.n	8007386 <USB_EPStartXfer+0x128a>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* enable double buffer */
        PCD_SET_EP_DBUF(USBx, ep->num);
 8006bba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006bbe:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006bc2:	681a      	ldr	r2, [r3, #0]
 8006bc4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006bc8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	781b      	ldrb	r3, [r3, #0]
 8006bd0:	009b      	lsls	r3, r3, #2
 8006bd2:	4413      	add	r3, r2
 8006bd4:	881b      	ldrh	r3, [r3, #0]
 8006bd6:	b29b      	uxth	r3, r3
 8006bd8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006bdc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006be0:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
 8006be4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006be8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006bec:	681a      	ldr	r2, [r3, #0]
 8006bee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006bf2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	781b      	ldrb	r3, [r3, #0]
 8006bfa:	009b      	lsls	r3, r3, #2
 8006bfc:	441a      	add	r2, r3
 8006bfe:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 8006c02:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006c06:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006c0a:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8006c0e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006c12:	b29b      	uxth	r3, r3
 8006c14:	8013      	strh	r3, [r2, #0]

        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8006c16:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c1a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	6a1a      	ldr	r2, [r3, #32]
 8006c22:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006c26:	1ad2      	subs	r2, r2, r3
 8006c28:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c2c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8006c34:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c38:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006c3c:	681a      	ldr	r2, [r3, #0]
 8006c3e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c42:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	781b      	ldrb	r3, [r3, #0]
 8006c4a:	009b      	lsls	r3, r3, #2
 8006c4c:	4413      	add	r3, r2
 8006c4e:	881b      	ldrh	r3, [r3, #0]
 8006c50:	b29b      	uxth	r3, r3
 8006c52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	f000 81bc 	beq.w	8006fd4 <USB_EPStartXfer+0xed8>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006c5c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c60:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006c6a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c6e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	785b      	ldrb	r3, [r3, #1]
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d16d      	bne.n	8006d56 <USB_EPStartXfer+0xc5a>
 8006c7a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c7e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	67bb      	str	r3, [r7, #120]	; 0x78
 8006c86:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c8a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006c94:	b29b      	uxth	r3, r3
 8006c96:	461a      	mov	r2, r3
 8006c98:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006c9a:	4413      	add	r3, r2
 8006c9c:	67bb      	str	r3, [r7, #120]	; 0x78
 8006c9e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ca2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	781b      	ldrb	r3, [r3, #0]
 8006caa:	011a      	lsls	r2, r3, #4
 8006cac:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006cae:	4413      	add	r3, r2
 8006cb0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006cb4:	677b      	str	r3, [r7, #116]	; 0x74
 8006cb6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d112      	bne.n	8006ce4 <USB_EPStartXfer+0xbe8>
 8006cbe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006cc0:	881b      	ldrh	r3, [r3, #0]
 8006cc2:	b29b      	uxth	r3, r3
 8006cc4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006cc8:	b29a      	uxth	r2, r3
 8006cca:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006ccc:	801a      	strh	r2, [r3, #0]
 8006cce:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006cd0:	881b      	ldrh	r3, [r3, #0]
 8006cd2:	b29b      	uxth	r3, r3
 8006cd4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006cd8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006cdc:	b29a      	uxth	r2, r3
 8006cde:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006ce0:	801a      	strh	r2, [r3, #0]
 8006ce2:	e060      	b.n	8006da6 <USB_EPStartXfer+0xcaa>
 8006ce4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006ce8:	2b3e      	cmp	r3, #62	; 0x3e
 8006cea:	d817      	bhi.n	8006d1c <USB_EPStartXfer+0xc20>
 8006cec:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006cf0:	085b      	lsrs	r3, r3, #1
 8006cf2:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8006cf6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006cfa:	f003 0301 	and.w	r3, r3, #1
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d004      	beq.n	8006d0c <USB_EPStartXfer+0xc10>
 8006d02:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8006d06:	3301      	adds	r3, #1
 8006d08:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8006d0c:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8006d10:	b29b      	uxth	r3, r3
 8006d12:	029b      	lsls	r3, r3, #10
 8006d14:	b29a      	uxth	r2, r3
 8006d16:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006d18:	801a      	strh	r2, [r3, #0]
 8006d1a:	e044      	b.n	8006da6 <USB_EPStartXfer+0xcaa>
 8006d1c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006d20:	095b      	lsrs	r3, r3, #5
 8006d22:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8006d26:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006d2a:	f003 031f 	and.w	r3, r3, #31
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d104      	bne.n	8006d3c <USB_EPStartXfer+0xc40>
 8006d32:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8006d36:	3b01      	subs	r3, #1
 8006d38:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8006d3c:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8006d40:	b29b      	uxth	r3, r3
 8006d42:	029b      	lsls	r3, r3, #10
 8006d44:	b29b      	uxth	r3, r3
 8006d46:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006d4a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006d4e:	b29a      	uxth	r2, r3
 8006d50:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006d52:	801a      	strh	r2, [r3, #0]
 8006d54:	e027      	b.n	8006da6 <USB_EPStartXfer+0xcaa>
 8006d56:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006d5a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	785b      	ldrb	r3, [r3, #1]
 8006d62:	2b01      	cmp	r3, #1
 8006d64:	d11f      	bne.n	8006da6 <USB_EPStartXfer+0xcaa>
 8006d66:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006d6a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006d74:	b29b      	uxth	r3, r3
 8006d76:	461a      	mov	r2, r3
 8006d78:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006d7c:	4413      	add	r3, r2
 8006d7e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006d82:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006d86:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	781b      	ldrb	r3, [r3, #0]
 8006d8e:	011a      	lsls	r2, r3, #4
 8006d90:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006d94:	4413      	add	r3, r2
 8006d96:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006d9a:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006d9c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006da0:	b29a      	uxth	r2, r3
 8006da2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006da4:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8006da6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006daa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	895b      	ldrh	r3, [r3, #10]
 8006db2:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006db6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006dba:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	6959      	ldr	r1, [r3, #20]
 8006dc2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006dc6:	b29b      	uxth	r3, r3
 8006dc8:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8006dcc:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8006dd0:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8006dd4:	6800      	ldr	r0, [r0, #0]
 8006dd6:	f001 f907 	bl	8007fe8 <USB_WritePMA>
          ep->xfer_buff += len;
 8006dda:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006dde:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	695a      	ldr	r2, [r3, #20]
 8006de6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006dea:	441a      	add	r2, r3
 8006dec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006df0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 8006df8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006dfc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	6a1a      	ldr	r2, [r3, #32]
 8006e04:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e08:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	691b      	ldr	r3, [r3, #16]
 8006e10:	429a      	cmp	r2, r3
 8006e12:	d90f      	bls.n	8006e34 <USB_EPStartXfer+0xd38>
          {
            ep->xfer_len_db -= len;
 8006e14:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e18:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	6a1a      	ldr	r2, [r3, #32]
 8006e20:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006e24:	1ad2      	subs	r2, r2, r3
 8006e26:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e2a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	621a      	str	r2, [r3, #32]
 8006e32:	e00e      	b.n	8006e52 <USB_EPStartXfer+0xd56>
          }
          else
          {
            len = ep->xfer_len_db;
 8006e34:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e38:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	6a1b      	ldr	r3, [r3, #32]
 8006e40:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 8006e44:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e48:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	2200      	movs	r2, #0
 8006e50:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 8006e52:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	f000 8295 	beq.w	8007386 <USB_EPStartXfer+0x128a>
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006e5c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e60:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	785b      	ldrb	r3, [r3, #1]
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d16d      	bne.n	8006f48 <USB_EPStartXfer+0xe4c>
 8006e6c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e70:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	66bb      	str	r3, [r7, #104]	; 0x68
 8006e78:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e7c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006e86:	b29b      	uxth	r3, r3
 8006e88:	461a      	mov	r2, r3
 8006e8a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006e8c:	4413      	add	r3, r2
 8006e8e:	66bb      	str	r3, [r7, #104]	; 0x68
 8006e90:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e94:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	781b      	ldrb	r3, [r3, #0]
 8006e9c:	011a      	lsls	r2, r3, #4
 8006e9e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006ea0:	4413      	add	r3, r2
 8006ea2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006ea6:	667b      	str	r3, [r7, #100]	; 0x64
 8006ea8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d112      	bne.n	8006ed6 <USB_EPStartXfer+0xdda>
 8006eb0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006eb2:	881b      	ldrh	r3, [r3, #0]
 8006eb4:	b29b      	uxth	r3, r3
 8006eb6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006eba:	b29a      	uxth	r2, r3
 8006ebc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006ebe:	801a      	strh	r2, [r3, #0]
 8006ec0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006ec2:	881b      	ldrh	r3, [r3, #0]
 8006ec4:	b29b      	uxth	r3, r3
 8006ec6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006eca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006ece:	b29a      	uxth	r2, r3
 8006ed0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006ed2:	801a      	strh	r2, [r3, #0]
 8006ed4:	e063      	b.n	8006f9e <USB_EPStartXfer+0xea2>
 8006ed6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006eda:	2b3e      	cmp	r3, #62	; 0x3e
 8006edc:	d817      	bhi.n	8006f0e <USB_EPStartXfer+0xe12>
 8006ede:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006ee2:	085b      	lsrs	r3, r3, #1
 8006ee4:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8006ee8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006eec:	f003 0301 	and.w	r3, r3, #1
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d004      	beq.n	8006efe <USB_EPStartXfer+0xe02>
 8006ef4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006ef8:	3301      	adds	r3, #1
 8006efa:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8006efe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006f02:	b29b      	uxth	r3, r3
 8006f04:	029b      	lsls	r3, r3, #10
 8006f06:	b29a      	uxth	r2, r3
 8006f08:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006f0a:	801a      	strh	r2, [r3, #0]
 8006f0c:	e047      	b.n	8006f9e <USB_EPStartXfer+0xea2>
 8006f0e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006f12:	095b      	lsrs	r3, r3, #5
 8006f14:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8006f18:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006f1c:	f003 031f 	and.w	r3, r3, #31
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d104      	bne.n	8006f2e <USB_EPStartXfer+0xe32>
 8006f24:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006f28:	3b01      	subs	r3, #1
 8006f2a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8006f2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006f32:	b29b      	uxth	r3, r3
 8006f34:	029b      	lsls	r3, r3, #10
 8006f36:	b29b      	uxth	r3, r3
 8006f38:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006f3c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006f40:	b29a      	uxth	r2, r3
 8006f42:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006f44:	801a      	strh	r2, [r3, #0]
 8006f46:	e02a      	b.n	8006f9e <USB_EPStartXfer+0xea2>
 8006f48:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f4c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	785b      	ldrb	r3, [r3, #1]
 8006f54:	2b01      	cmp	r3, #1
 8006f56:	d122      	bne.n	8006f9e <USB_EPStartXfer+0xea2>
 8006f58:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f5c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	673b      	str	r3, [r7, #112]	; 0x70
 8006f64:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f68:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006f72:	b29b      	uxth	r3, r3
 8006f74:	461a      	mov	r2, r3
 8006f76:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006f78:	4413      	add	r3, r2
 8006f7a:	673b      	str	r3, [r7, #112]	; 0x70
 8006f7c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f80:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	781b      	ldrb	r3, [r3, #0]
 8006f88:	011a      	lsls	r2, r3, #4
 8006f8a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006f8c:	4413      	add	r3, r2
 8006f8e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006f92:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006f94:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006f98:	b29a      	uxth	r2, r3
 8006f9a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006f9c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8006f9e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006fa2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	891b      	ldrh	r3, [r3, #8]
 8006faa:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006fae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006fb2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	6959      	ldr	r1, [r3, #20]
 8006fba:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006fbe:	b29b      	uxth	r3, r3
 8006fc0:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8006fc4:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8006fc8:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8006fcc:	6800      	ldr	r0, [r0, #0]
 8006fce:	f001 f80b 	bl	8007fe8 <USB_WritePMA>
 8006fd2:	e1d8      	b.n	8007386 <USB_EPStartXfer+0x128a>
          }
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006fd4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006fd8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	785b      	ldrb	r3, [r3, #1]
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d178      	bne.n	80070d6 <USB_EPStartXfer+0xfda>
 8006fe4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006fe8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006ff2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ff6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007000:	b29b      	uxth	r3, r3
 8007002:	461a      	mov	r2, r3
 8007004:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007008:	4413      	add	r3, r2
 800700a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800700e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007012:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	781b      	ldrb	r3, [r3, #0]
 800701a:	011a      	lsls	r2, r3, #4
 800701c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007020:	4413      	add	r3, r2
 8007022:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007026:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800702a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800702e:	2b00      	cmp	r3, #0
 8007030:	d116      	bne.n	8007060 <USB_EPStartXfer+0xf64>
 8007032:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007036:	881b      	ldrh	r3, [r3, #0]
 8007038:	b29b      	uxth	r3, r3
 800703a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800703e:	b29a      	uxth	r2, r3
 8007040:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007044:	801a      	strh	r2, [r3, #0]
 8007046:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800704a:	881b      	ldrh	r3, [r3, #0]
 800704c:	b29b      	uxth	r3, r3
 800704e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007052:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007056:	b29a      	uxth	r2, r3
 8007058:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800705c:	801a      	strh	r2, [r3, #0]
 800705e:	e06b      	b.n	8007138 <USB_EPStartXfer+0x103c>
 8007060:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007064:	2b3e      	cmp	r3, #62	; 0x3e
 8007066:	d818      	bhi.n	800709a <USB_EPStartXfer+0xf9e>
 8007068:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800706c:	085b      	lsrs	r3, r3, #1
 800706e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8007072:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007076:	f003 0301 	and.w	r3, r3, #1
 800707a:	2b00      	cmp	r3, #0
 800707c:	d004      	beq.n	8007088 <USB_EPStartXfer+0xf8c>
 800707e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8007082:	3301      	adds	r3, #1
 8007084:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8007088:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800708c:	b29b      	uxth	r3, r3
 800708e:	029b      	lsls	r3, r3, #10
 8007090:	b29a      	uxth	r2, r3
 8007092:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007096:	801a      	strh	r2, [r3, #0]
 8007098:	e04e      	b.n	8007138 <USB_EPStartXfer+0x103c>
 800709a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800709e:	095b      	lsrs	r3, r3, #5
 80070a0:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 80070a4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80070a8:	f003 031f 	and.w	r3, r3, #31
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d104      	bne.n	80070ba <USB_EPStartXfer+0xfbe>
 80070b0:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80070b4:	3b01      	subs	r3, #1
 80070b6:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 80070ba:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80070be:	b29b      	uxth	r3, r3
 80070c0:	029b      	lsls	r3, r3, #10
 80070c2:	b29b      	uxth	r3, r3
 80070c4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80070c8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80070cc:	b29a      	uxth	r2, r3
 80070ce:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80070d2:	801a      	strh	r2, [r3, #0]
 80070d4:	e030      	b.n	8007138 <USB_EPStartXfer+0x103c>
 80070d6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80070da:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	785b      	ldrb	r3, [r3, #1]
 80070e2:	2b01      	cmp	r3, #1
 80070e4:	d128      	bne.n	8007138 <USB_EPStartXfer+0x103c>
 80070e6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80070ea:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80070f4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80070f8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007102:	b29b      	uxth	r3, r3
 8007104:	461a      	mov	r2, r3
 8007106:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800710a:	4413      	add	r3, r2
 800710c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8007110:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007114:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	781b      	ldrb	r3, [r3, #0]
 800711c:	011a      	lsls	r2, r3, #4
 800711e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8007122:	4413      	add	r3, r2
 8007124:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007128:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800712c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007130:	b29a      	uxth	r2, r3
 8007132:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007136:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8007138:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800713c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	891b      	ldrh	r3, [r3, #8]
 8007144:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007148:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800714c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	6959      	ldr	r1, [r3, #20]
 8007154:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007158:	b29b      	uxth	r3, r3
 800715a:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800715e:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8007162:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8007166:	6800      	ldr	r0, [r0, #0]
 8007168:	f000 ff3e 	bl	8007fe8 <USB_WritePMA>
          ep->xfer_buff += len;
 800716c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007170:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	695a      	ldr	r2, [r3, #20]
 8007178:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800717c:	441a      	add	r2, r3
 800717e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007182:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 800718a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800718e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	6a1a      	ldr	r2, [r3, #32]
 8007196:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800719a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	691b      	ldr	r3, [r3, #16]
 80071a2:	429a      	cmp	r2, r3
 80071a4:	d90f      	bls.n	80071c6 <USB_EPStartXfer+0x10ca>
          {
            ep->xfer_len_db -= len;
 80071a6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80071aa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	6a1a      	ldr	r2, [r3, #32]
 80071b2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80071b6:	1ad2      	subs	r2, r2, r3
 80071b8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80071bc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	621a      	str	r2, [r3, #32]
 80071c4:	e00e      	b.n	80071e4 <USB_EPStartXfer+0x10e8>
          }
          else
          {
            len = ep->xfer_len_db;
 80071c6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80071ca:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	6a1b      	ldr	r3, [r3, #32]
 80071d2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 80071d6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80071da:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	2200      	movs	r2, #0
 80071e2:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 80071e4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	f000 80cc 	beq.w	8007386 <USB_EPStartXfer+0x128a>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80071ee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80071f2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80071fc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007200:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	785b      	ldrb	r3, [r3, #1]
 8007208:	2b00      	cmp	r3, #0
 800720a:	d178      	bne.n	80072fe <USB_EPStartXfer+0x1202>
 800720c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007210:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800721a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800721e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007228:	b29b      	uxth	r3, r3
 800722a:	461a      	mov	r2, r3
 800722c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007230:	4413      	add	r3, r2
 8007232:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007236:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800723a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	781b      	ldrb	r3, [r3, #0]
 8007242:	011a      	lsls	r2, r3, #4
 8007244:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007248:	4413      	add	r3, r2
 800724a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800724e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007252:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007256:	2b00      	cmp	r3, #0
 8007258:	d116      	bne.n	8007288 <USB_EPStartXfer+0x118c>
 800725a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800725e:	881b      	ldrh	r3, [r3, #0]
 8007260:	b29b      	uxth	r3, r3
 8007262:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007266:	b29a      	uxth	r2, r3
 8007268:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800726c:	801a      	strh	r2, [r3, #0]
 800726e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007272:	881b      	ldrh	r3, [r3, #0]
 8007274:	b29b      	uxth	r3, r3
 8007276:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800727a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800727e:	b29a      	uxth	r2, r3
 8007280:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007284:	801a      	strh	r2, [r3, #0]
 8007286:	e064      	b.n	8007352 <USB_EPStartXfer+0x1256>
 8007288:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800728c:	2b3e      	cmp	r3, #62	; 0x3e
 800728e:	d818      	bhi.n	80072c2 <USB_EPStartXfer+0x11c6>
 8007290:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007294:	085b      	lsrs	r3, r3, #1
 8007296:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800729a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800729e:	f003 0301 	and.w	r3, r3, #1
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d004      	beq.n	80072b0 <USB_EPStartXfer+0x11b4>
 80072a6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80072aa:	3301      	adds	r3, #1
 80072ac:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80072b0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80072b4:	b29b      	uxth	r3, r3
 80072b6:	029b      	lsls	r3, r3, #10
 80072b8:	b29a      	uxth	r2, r3
 80072ba:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80072be:	801a      	strh	r2, [r3, #0]
 80072c0:	e047      	b.n	8007352 <USB_EPStartXfer+0x1256>
 80072c2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80072c6:	095b      	lsrs	r3, r3, #5
 80072c8:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80072cc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80072d0:	f003 031f 	and.w	r3, r3, #31
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d104      	bne.n	80072e2 <USB_EPStartXfer+0x11e6>
 80072d8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80072dc:	3b01      	subs	r3, #1
 80072de:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80072e2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80072e6:	b29b      	uxth	r3, r3
 80072e8:	029b      	lsls	r3, r3, #10
 80072ea:	b29b      	uxth	r3, r3
 80072ec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80072f0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80072f4:	b29a      	uxth	r2, r3
 80072f6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80072fa:	801a      	strh	r2, [r3, #0]
 80072fc:	e029      	b.n	8007352 <USB_EPStartXfer+0x1256>
 80072fe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007302:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	785b      	ldrb	r3, [r3, #1]
 800730a:	2b01      	cmp	r3, #1
 800730c:	d121      	bne.n	8007352 <USB_EPStartXfer+0x1256>
 800730e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007312:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800731c:	b29b      	uxth	r3, r3
 800731e:	461a      	mov	r2, r3
 8007320:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007324:	4413      	add	r3, r2
 8007326:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800732a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800732e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	781b      	ldrb	r3, [r3, #0]
 8007336:	011a      	lsls	r2, r3, #4
 8007338:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800733c:	4413      	add	r3, r2
 800733e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007342:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8007346:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800734a:	b29a      	uxth	r2, r3
 800734c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007350:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8007352:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007356:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	895b      	ldrh	r3, [r3, #10]
 800735e:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007362:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007366:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	6959      	ldr	r1, [r3, #20]
 800736e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007372:	b29b      	uxth	r3, r3
 8007374:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8007378:	f507 7098 	add.w	r0, r7, #304	; 0x130
 800737c:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8007380:	6800      	ldr	r0, [r0, #0]
 8007382:	f000 fe31 	bl	8007fe8 <USB_WritePMA>
          }
        }
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8007386:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800738a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800738e:	681a      	ldr	r2, [r3, #0]
 8007390:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007394:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	781b      	ldrb	r3, [r3, #0]
 800739c:	009b      	lsls	r3, r3, #2
 800739e:	4413      	add	r3, r2
 80073a0:	881b      	ldrh	r3, [r3, #0]
 80073a2:	b29b      	uxth	r3, r3
 80073a4:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80073a8:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 80073ac:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80073b0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80073b4:	8013      	strh	r3, [r2, #0]
 80073b6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80073ba:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 80073be:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80073c2:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 80073c6:	8812      	ldrh	r2, [r2, #0]
 80073c8:	f082 0210 	eor.w	r2, r2, #16
 80073cc:	801a      	strh	r2, [r3, #0]
 80073ce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80073d2:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 80073d6:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80073da:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 80073de:	8812      	ldrh	r2, [r2, #0]
 80073e0:	f082 0220 	eor.w	r2, r2, #32
 80073e4:	801a      	strh	r2, [r3, #0]
 80073e6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80073ea:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80073ee:	681a      	ldr	r2, [r3, #0]
 80073f0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80073f4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	781b      	ldrb	r3, [r3, #0]
 80073fc:	009b      	lsls	r3, r3, #2
 80073fe:	441a      	add	r2, r3
 8007400:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007404:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 8007408:	881b      	ldrh	r3, [r3, #0]
 800740a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800740e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007412:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007416:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800741a:	b29b      	uxth	r3, r3
 800741c:	8013      	strh	r3, [r2, #0]
 800741e:	f000 bc9f 	b.w	8007d60 <USB_EPStartXfer+0x1c64>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8007422:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007426:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	7b1b      	ldrb	r3, [r3, #12]
 800742e:	2b00      	cmp	r3, #0
 8007430:	f040 80ae 	bne.w	8007590 <USB_EPStartXfer+0x1494>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8007434:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007438:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	699a      	ldr	r2, [r3, #24]
 8007440:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007444:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	691b      	ldr	r3, [r3, #16]
 800744c:	429a      	cmp	r2, r3
 800744e:	d917      	bls.n	8007480 <USB_EPStartXfer+0x1384>
      {
        len = ep->maxpacket;
 8007450:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007454:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	691b      	ldr	r3, [r3, #16]
 800745c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len -= len;
 8007460:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007464:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	699a      	ldr	r2, [r3, #24]
 800746c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007470:	1ad2      	subs	r2, r2, r3
 8007472:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007476:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	619a      	str	r2, [r3, #24]
 800747e:	e00e      	b.n	800749e <USB_EPStartXfer+0x13a2>
      }
      else
      {
        len = ep->xfer_len;
 8007480:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007484:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	699b      	ldr	r3, [r3, #24]
 800748c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len = 0U;
 8007490:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007494:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	2200      	movs	r2, #0
 800749c:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800749e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80074a2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80074ac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80074b0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80074ba:	b29b      	uxth	r3, r3
 80074bc:	461a      	mov	r2, r3
 80074be:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80074c2:	4413      	add	r3, r2
 80074c4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80074c8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80074cc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	781b      	ldrb	r3, [r3, #0]
 80074d4:	011a      	lsls	r2, r3, #4
 80074d6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80074da:	4413      	add	r3, r2
 80074dc:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80074e0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80074e4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d116      	bne.n	800751a <USB_EPStartXfer+0x141e>
 80074ec:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80074f0:	881b      	ldrh	r3, [r3, #0]
 80074f2:	b29b      	uxth	r3, r3
 80074f4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80074f8:	b29a      	uxth	r2, r3
 80074fa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80074fe:	801a      	strh	r2, [r3, #0]
 8007500:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007504:	881b      	ldrh	r3, [r3, #0]
 8007506:	b29b      	uxth	r3, r3
 8007508:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800750c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007510:	b29a      	uxth	r2, r3
 8007512:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007516:	801a      	strh	r2, [r3, #0]
 8007518:	e3e8      	b.n	8007cec <USB_EPStartXfer+0x1bf0>
 800751a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800751e:	2b3e      	cmp	r3, #62	; 0x3e
 8007520:	d818      	bhi.n	8007554 <USB_EPStartXfer+0x1458>
 8007522:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007526:	085b      	lsrs	r3, r3, #1
 8007528:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800752c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007530:	f003 0301 	and.w	r3, r3, #1
 8007534:	2b00      	cmp	r3, #0
 8007536:	d004      	beq.n	8007542 <USB_EPStartXfer+0x1446>
 8007538:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800753c:	3301      	adds	r3, #1
 800753e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8007542:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007546:	b29b      	uxth	r3, r3
 8007548:	029b      	lsls	r3, r3, #10
 800754a:	b29a      	uxth	r2, r3
 800754c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007550:	801a      	strh	r2, [r3, #0]
 8007552:	e3cb      	b.n	8007cec <USB_EPStartXfer+0x1bf0>
 8007554:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007558:	095b      	lsrs	r3, r3, #5
 800755a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800755e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007562:	f003 031f 	and.w	r3, r3, #31
 8007566:	2b00      	cmp	r3, #0
 8007568:	d104      	bne.n	8007574 <USB_EPStartXfer+0x1478>
 800756a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800756e:	3b01      	subs	r3, #1
 8007570:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8007574:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007578:	b29b      	uxth	r3, r3
 800757a:	029b      	lsls	r3, r3, #10
 800757c:	b29b      	uxth	r3, r3
 800757e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007582:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007586:	b29a      	uxth	r2, r3
 8007588:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800758c:	801a      	strh	r2, [r3, #0]
 800758e:	e3ad      	b.n	8007cec <USB_EPStartXfer+0x1bf0>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8007590:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007594:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	78db      	ldrb	r3, [r3, #3]
 800759c:	2b02      	cmp	r3, #2
 800759e:	f040 8200 	bne.w	80079a2 <USB_EPStartXfer+0x18a6>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 80075a2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80075a6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	785b      	ldrb	r3, [r3, #1]
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	f040 8091 	bne.w	80076d6 <USB_EPStartXfer+0x15da>
 80075b4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80075b8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80075c2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80075c6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80075d0:	b29b      	uxth	r3, r3
 80075d2:	461a      	mov	r2, r3
 80075d4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80075d8:	4413      	add	r3, r2
 80075da:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80075de:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80075e2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	781b      	ldrb	r3, [r3, #0]
 80075ea:	011a      	lsls	r2, r3, #4
 80075ec:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80075f0:	4413      	add	r3, r2
 80075f2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80075f6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80075fa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80075fe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	691b      	ldr	r3, [r3, #16]
 8007606:	2b00      	cmp	r3, #0
 8007608:	d116      	bne.n	8007638 <USB_EPStartXfer+0x153c>
 800760a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800760e:	881b      	ldrh	r3, [r3, #0]
 8007610:	b29b      	uxth	r3, r3
 8007612:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007616:	b29a      	uxth	r2, r3
 8007618:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800761c:	801a      	strh	r2, [r3, #0]
 800761e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007622:	881b      	ldrh	r3, [r3, #0]
 8007624:	b29b      	uxth	r3, r3
 8007626:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800762a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800762e:	b29a      	uxth	r2, r3
 8007630:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007634:	801a      	strh	r2, [r3, #0]
 8007636:	e083      	b.n	8007740 <USB_EPStartXfer+0x1644>
 8007638:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800763c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	691b      	ldr	r3, [r3, #16]
 8007644:	2b3e      	cmp	r3, #62	; 0x3e
 8007646:	d820      	bhi.n	800768a <USB_EPStartXfer+0x158e>
 8007648:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800764c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	691b      	ldr	r3, [r3, #16]
 8007654:	085b      	lsrs	r3, r3, #1
 8007656:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800765a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800765e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	691b      	ldr	r3, [r3, #16]
 8007666:	f003 0301 	and.w	r3, r3, #1
 800766a:	2b00      	cmp	r3, #0
 800766c:	d004      	beq.n	8007678 <USB_EPStartXfer+0x157c>
 800766e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007672:	3301      	adds	r3, #1
 8007674:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8007678:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800767c:	b29b      	uxth	r3, r3
 800767e:	029b      	lsls	r3, r3, #10
 8007680:	b29a      	uxth	r2, r3
 8007682:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007686:	801a      	strh	r2, [r3, #0]
 8007688:	e05a      	b.n	8007740 <USB_EPStartXfer+0x1644>
 800768a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800768e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	691b      	ldr	r3, [r3, #16]
 8007696:	095b      	lsrs	r3, r3, #5
 8007698:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800769c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80076a0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	691b      	ldr	r3, [r3, #16]
 80076a8:	f003 031f 	and.w	r3, r3, #31
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	d104      	bne.n	80076ba <USB_EPStartXfer+0x15be>
 80076b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80076b4:	3b01      	subs	r3, #1
 80076b6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80076ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80076be:	b29b      	uxth	r3, r3
 80076c0:	029b      	lsls	r3, r3, #10
 80076c2:	b29b      	uxth	r3, r3
 80076c4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80076c8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80076cc:	b29a      	uxth	r2, r3
 80076ce:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80076d2:	801a      	strh	r2, [r3, #0]
 80076d4:	e034      	b.n	8007740 <USB_EPStartXfer+0x1644>
 80076d6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80076da:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	785b      	ldrb	r3, [r3, #1]
 80076e2:	2b01      	cmp	r3, #1
 80076e4:	d12c      	bne.n	8007740 <USB_EPStartXfer+0x1644>
 80076e6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80076ea:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80076f4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80076f8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007702:	b29b      	uxth	r3, r3
 8007704:	461a      	mov	r2, r3
 8007706:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800770a:	4413      	add	r3, r2
 800770c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8007710:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007714:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	781b      	ldrb	r3, [r3, #0]
 800771c:	011a      	lsls	r2, r3, #4
 800771e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007722:	4413      	add	r3, r2
 8007724:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007728:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800772c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007730:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	691b      	ldr	r3, [r3, #16]
 8007738:	b29a      	uxth	r2, r3
 800773a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800773e:	801a      	strh	r2, [r3, #0]
 8007740:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007744:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800774e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007752:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	785b      	ldrb	r3, [r3, #1]
 800775a:	2b00      	cmp	r3, #0
 800775c:	f040 8091 	bne.w	8007882 <USB_EPStartXfer+0x1786>
 8007760:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007764:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800776e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007772:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800777c:	b29b      	uxth	r3, r3
 800777e:	461a      	mov	r2, r3
 8007780:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007784:	4413      	add	r3, r2
 8007786:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800778a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800778e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	781b      	ldrb	r3, [r3, #0]
 8007796:	011a      	lsls	r2, r3, #4
 8007798:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800779c:	4413      	add	r3, r2
 800779e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80077a2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80077a6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80077aa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	691b      	ldr	r3, [r3, #16]
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d116      	bne.n	80077e4 <USB_EPStartXfer+0x16e8>
 80077b6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80077ba:	881b      	ldrh	r3, [r3, #0]
 80077bc:	b29b      	uxth	r3, r3
 80077be:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80077c2:	b29a      	uxth	r2, r3
 80077c4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80077c8:	801a      	strh	r2, [r3, #0]
 80077ca:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80077ce:	881b      	ldrh	r3, [r3, #0]
 80077d0:	b29b      	uxth	r3, r3
 80077d2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80077d6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80077da:	b29a      	uxth	r2, r3
 80077dc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80077e0:	801a      	strh	r2, [r3, #0]
 80077e2:	e07c      	b.n	80078de <USB_EPStartXfer+0x17e2>
 80077e4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80077e8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	691b      	ldr	r3, [r3, #16]
 80077f0:	2b3e      	cmp	r3, #62	; 0x3e
 80077f2:	d820      	bhi.n	8007836 <USB_EPStartXfer+0x173a>
 80077f4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80077f8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	691b      	ldr	r3, [r3, #16]
 8007800:	085b      	lsrs	r3, r3, #1
 8007802:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8007806:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800780a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	691b      	ldr	r3, [r3, #16]
 8007812:	f003 0301 	and.w	r3, r3, #1
 8007816:	2b00      	cmp	r3, #0
 8007818:	d004      	beq.n	8007824 <USB_EPStartXfer+0x1728>
 800781a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800781e:	3301      	adds	r3, #1
 8007820:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8007824:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8007828:	b29b      	uxth	r3, r3
 800782a:	029b      	lsls	r3, r3, #10
 800782c:	b29a      	uxth	r2, r3
 800782e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007832:	801a      	strh	r2, [r3, #0]
 8007834:	e053      	b.n	80078de <USB_EPStartXfer+0x17e2>
 8007836:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800783a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	691b      	ldr	r3, [r3, #16]
 8007842:	095b      	lsrs	r3, r3, #5
 8007844:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8007848:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800784c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	691b      	ldr	r3, [r3, #16]
 8007854:	f003 031f 	and.w	r3, r3, #31
 8007858:	2b00      	cmp	r3, #0
 800785a:	d104      	bne.n	8007866 <USB_EPStartXfer+0x176a>
 800785c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8007860:	3b01      	subs	r3, #1
 8007862:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8007866:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800786a:	b29b      	uxth	r3, r3
 800786c:	029b      	lsls	r3, r3, #10
 800786e:	b29b      	uxth	r3, r3
 8007870:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007874:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007878:	b29a      	uxth	r2, r3
 800787a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800787e:	801a      	strh	r2, [r3, #0]
 8007880:	e02d      	b.n	80078de <USB_EPStartXfer+0x17e2>
 8007882:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007886:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	785b      	ldrb	r3, [r3, #1]
 800788e:	2b01      	cmp	r3, #1
 8007890:	d125      	bne.n	80078de <USB_EPStartXfer+0x17e2>
 8007892:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007896:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80078a0:	b29b      	uxth	r3, r3
 80078a2:	461a      	mov	r2, r3
 80078a4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80078a8:	4413      	add	r3, r2
 80078aa:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80078ae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80078b2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	781b      	ldrb	r3, [r3, #0]
 80078ba:	011a      	lsls	r2, r3, #4
 80078bc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80078c0:	4413      	add	r3, r2
 80078c2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80078c6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80078ca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80078ce:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	691b      	ldr	r3, [r3, #16]
 80078d6:	b29a      	uxth	r2, r3
 80078d8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80078dc:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 80078de:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80078e2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	69db      	ldr	r3, [r3, #28]
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	f000 81fe 	beq.w	8007cec <USB_EPStartXfer+0x1bf0>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 80078f0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80078f4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80078f8:	681a      	ldr	r2, [r3, #0]
 80078fa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80078fe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	781b      	ldrb	r3, [r3, #0]
 8007906:	009b      	lsls	r3, r3, #2
 8007908:	4413      	add	r3, r2
 800790a:	881b      	ldrh	r3, [r3, #0]
 800790c:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8007910:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8007914:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007918:	2b00      	cmp	r3, #0
 800791a:	d005      	beq.n	8007928 <USB_EPStartXfer+0x182c>
 800791c:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8007920:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007924:	2b00      	cmp	r3, #0
 8007926:	d10d      	bne.n	8007944 <USB_EPStartXfer+0x1848>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8007928:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 800792c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8007930:	2b00      	cmp	r3, #0
 8007932:	f040 81db 	bne.w	8007cec <USB_EPStartXfer+0x1bf0>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8007936:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 800793a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800793e:	2b00      	cmp	r3, #0
 8007940:	f040 81d4 	bne.w	8007cec <USB_EPStartXfer+0x1bf0>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 8007944:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007948:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800794c:	681a      	ldr	r2, [r3, #0]
 800794e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007952:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	781b      	ldrb	r3, [r3, #0]
 800795a:	009b      	lsls	r3, r3, #2
 800795c:	4413      	add	r3, r2
 800795e:	881b      	ldrh	r3, [r3, #0]
 8007960:	b29b      	uxth	r3, r3
 8007962:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007966:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800796a:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
 800796e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007972:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007976:	681a      	ldr	r2, [r3, #0]
 8007978:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800797c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	781b      	ldrb	r3, [r3, #0]
 8007984:	009b      	lsls	r3, r3, #2
 8007986:	441a      	add	r2, r3
 8007988:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 800798c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007990:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007994:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007998:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800799c:	b29b      	uxth	r3, r3
 800799e:	8013      	strh	r3, [r2, #0]
 80079a0:	e1a4      	b.n	8007cec <USB_EPStartXfer+0x1bf0>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 80079a2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80079a6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	78db      	ldrb	r3, [r3, #3]
 80079ae:	2b01      	cmp	r3, #1
 80079b0:	f040 819a 	bne.w	8007ce8 <USB_EPStartXfer+0x1bec>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 80079b4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80079b8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	699a      	ldr	r2, [r3, #24]
 80079c0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80079c4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	691b      	ldr	r3, [r3, #16]
 80079cc:	429a      	cmp	r2, r3
 80079ce:	d917      	bls.n	8007a00 <USB_EPStartXfer+0x1904>
        {
          len = ep->maxpacket;
 80079d0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80079d4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	691b      	ldr	r3, [r3, #16]
 80079dc:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len -= len;
 80079e0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80079e4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	699a      	ldr	r2, [r3, #24]
 80079ec:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80079f0:	1ad2      	subs	r2, r2, r3
 80079f2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80079f6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	619a      	str	r2, [r3, #24]
 80079fe:	e00e      	b.n	8007a1e <USB_EPStartXfer+0x1922>
        }
        else
        {
          len = ep->xfer_len;
 8007a00:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007a04:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	699b      	ldr	r3, [r3, #24]
 8007a0c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len = 0U;
 8007a10:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007a14:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	2200      	movs	r2, #0
 8007a1c:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8007a1e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007a22:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	785b      	ldrb	r3, [r3, #1]
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	d178      	bne.n	8007b20 <USB_EPStartXfer+0x1a24>
 8007a2e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007a32:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8007a3c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007a40:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007a4a:	b29b      	uxth	r3, r3
 8007a4c:	461a      	mov	r2, r3
 8007a4e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8007a52:	4413      	add	r3, r2
 8007a54:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8007a58:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007a5c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	781b      	ldrb	r3, [r3, #0]
 8007a64:	011a      	lsls	r2, r3, #4
 8007a66:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8007a6a:	4413      	add	r3, r2
 8007a6c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007a70:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007a74:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d116      	bne.n	8007aaa <USB_EPStartXfer+0x19ae>
 8007a7c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007a80:	881b      	ldrh	r3, [r3, #0]
 8007a82:	b29b      	uxth	r3, r3
 8007a84:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007a88:	b29a      	uxth	r2, r3
 8007a8a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007a8e:	801a      	strh	r2, [r3, #0]
 8007a90:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007a94:	881b      	ldrh	r3, [r3, #0]
 8007a96:	b29b      	uxth	r3, r3
 8007a98:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007a9c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007aa0:	b29a      	uxth	r2, r3
 8007aa2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007aa6:	801a      	strh	r2, [r3, #0]
 8007aa8:	e06b      	b.n	8007b82 <USB_EPStartXfer+0x1a86>
 8007aaa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007aae:	2b3e      	cmp	r3, #62	; 0x3e
 8007ab0:	d818      	bhi.n	8007ae4 <USB_EPStartXfer+0x19e8>
 8007ab2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007ab6:	085b      	lsrs	r3, r3, #1
 8007ab8:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8007abc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007ac0:	f003 0301 	and.w	r3, r3, #1
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d004      	beq.n	8007ad2 <USB_EPStartXfer+0x19d6>
 8007ac8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007acc:	3301      	adds	r3, #1
 8007ace:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8007ad2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007ad6:	b29b      	uxth	r3, r3
 8007ad8:	029b      	lsls	r3, r3, #10
 8007ada:	b29a      	uxth	r2, r3
 8007adc:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007ae0:	801a      	strh	r2, [r3, #0]
 8007ae2:	e04e      	b.n	8007b82 <USB_EPStartXfer+0x1a86>
 8007ae4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007ae8:	095b      	lsrs	r3, r3, #5
 8007aea:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8007aee:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007af2:	f003 031f 	and.w	r3, r3, #31
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d104      	bne.n	8007b04 <USB_EPStartXfer+0x1a08>
 8007afa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007afe:	3b01      	subs	r3, #1
 8007b00:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8007b04:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007b08:	b29b      	uxth	r3, r3
 8007b0a:	029b      	lsls	r3, r3, #10
 8007b0c:	b29b      	uxth	r3, r3
 8007b0e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007b12:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007b16:	b29a      	uxth	r2, r3
 8007b18:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007b1c:	801a      	strh	r2, [r3, #0]
 8007b1e:	e030      	b.n	8007b82 <USB_EPStartXfer+0x1a86>
 8007b20:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007b24:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	785b      	ldrb	r3, [r3, #1]
 8007b2c:	2b01      	cmp	r3, #1
 8007b2e:	d128      	bne.n	8007b82 <USB_EPStartXfer+0x1a86>
 8007b30:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007b34:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8007b3e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007b42:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007b4c:	b29b      	uxth	r3, r3
 8007b4e:	461a      	mov	r2, r3
 8007b50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007b54:	4413      	add	r3, r2
 8007b56:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8007b5a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007b5e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	781b      	ldrb	r3, [r3, #0]
 8007b66:	011a      	lsls	r2, r3, #4
 8007b68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007b6c:	4413      	add	r3, r2
 8007b6e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007b72:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8007b76:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007b7a:	b29a      	uxth	r2, r3
 8007b7c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8007b80:	801a      	strh	r2, [r3, #0]
 8007b82:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007b86:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007b90:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007b94:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	785b      	ldrb	r3, [r3, #1]
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	d178      	bne.n	8007c92 <USB_EPStartXfer+0x1b96>
 8007ba0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007ba4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8007bae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007bb2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007bbc:	b29b      	uxth	r3, r3
 8007bbe:	461a      	mov	r2, r3
 8007bc0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007bc4:	4413      	add	r3, r2
 8007bc6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8007bca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007bce:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	781b      	ldrb	r3, [r3, #0]
 8007bd6:	011a      	lsls	r2, r3, #4
 8007bd8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007bdc:	4413      	add	r3, r2
 8007bde:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007be2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007be6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	d116      	bne.n	8007c1c <USB_EPStartXfer+0x1b20>
 8007bee:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007bf2:	881b      	ldrh	r3, [r3, #0]
 8007bf4:	b29b      	uxth	r3, r3
 8007bf6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007bfa:	b29a      	uxth	r2, r3
 8007bfc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007c00:	801a      	strh	r2, [r3, #0]
 8007c02:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007c06:	881b      	ldrh	r3, [r3, #0]
 8007c08:	b29b      	uxth	r3, r3
 8007c0a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007c0e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007c12:	b29a      	uxth	r2, r3
 8007c14:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007c18:	801a      	strh	r2, [r3, #0]
 8007c1a:	e067      	b.n	8007cec <USB_EPStartXfer+0x1bf0>
 8007c1c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007c20:	2b3e      	cmp	r3, #62	; 0x3e
 8007c22:	d818      	bhi.n	8007c56 <USB_EPStartXfer+0x1b5a>
 8007c24:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007c28:	085b      	lsrs	r3, r3, #1
 8007c2a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8007c2e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007c32:	f003 0301 	and.w	r3, r3, #1
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d004      	beq.n	8007c44 <USB_EPStartXfer+0x1b48>
 8007c3a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007c3e:	3301      	adds	r3, #1
 8007c40:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8007c44:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007c48:	b29b      	uxth	r3, r3
 8007c4a:	029b      	lsls	r3, r3, #10
 8007c4c:	b29a      	uxth	r2, r3
 8007c4e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007c52:	801a      	strh	r2, [r3, #0]
 8007c54:	e04a      	b.n	8007cec <USB_EPStartXfer+0x1bf0>
 8007c56:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007c5a:	095b      	lsrs	r3, r3, #5
 8007c5c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8007c60:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007c64:	f003 031f 	and.w	r3, r3, #31
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	d104      	bne.n	8007c76 <USB_EPStartXfer+0x1b7a>
 8007c6c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007c70:	3b01      	subs	r3, #1
 8007c72:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8007c76:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007c7a:	b29b      	uxth	r3, r3
 8007c7c:	029b      	lsls	r3, r3, #10
 8007c7e:	b29b      	uxth	r3, r3
 8007c80:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007c84:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007c88:	b29a      	uxth	r2, r3
 8007c8a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007c8e:	801a      	strh	r2, [r3, #0]
 8007c90:	e02c      	b.n	8007cec <USB_EPStartXfer+0x1bf0>
 8007c92:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007c96:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	785b      	ldrb	r3, [r3, #1]
 8007c9e:	2b01      	cmp	r3, #1
 8007ca0:	d124      	bne.n	8007cec <USB_EPStartXfer+0x1bf0>
 8007ca2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007ca6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007cb0:	b29b      	uxth	r3, r3
 8007cb2:	461a      	mov	r2, r3
 8007cb4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007cb8:	4413      	add	r3, r2
 8007cba:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007cbe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007cc2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	781b      	ldrb	r3, [r3, #0]
 8007cca:	011a      	lsls	r2, r3, #4
 8007ccc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007cd0:	4413      	add	r3, r2
 8007cd2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007cd6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007cda:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007cde:	b29a      	uxth	r2, r3
 8007ce0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007ce4:	801a      	strh	r2, [r3, #0]
 8007ce6:	e001      	b.n	8007cec <USB_EPStartXfer+0x1bf0>
      }
      else
      {
        return HAL_ERROR;
 8007ce8:	2301      	movs	r3, #1
 8007cea:	e03a      	b.n	8007d62 <USB_EPStartXfer+0x1c66>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007cec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007cf0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007cf4:	681a      	ldr	r2, [r3, #0]
 8007cf6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007cfa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	781b      	ldrb	r3, [r3, #0]
 8007d02:	009b      	lsls	r3, r3, #2
 8007d04:	4413      	add	r3, r2
 8007d06:	881b      	ldrh	r3, [r3, #0]
 8007d08:	b29b      	uxth	r3, r3
 8007d0a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007d0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007d12:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8007d16:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8007d1a:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007d1e:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8007d22:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8007d26:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8007d2a:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8007d2e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007d32:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007d36:	681a      	ldr	r2, [r3, #0]
 8007d38:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007d3c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	781b      	ldrb	r3, [r3, #0]
 8007d44:	009b      	lsls	r3, r3, #2
 8007d46:	441a      	add	r2, r3
 8007d48:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8007d4c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007d50:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007d54:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007d58:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007d5c:	b29b      	uxth	r3, r3
 8007d5e:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8007d60:	2300      	movs	r3, #0
}
 8007d62:	4618      	mov	r0, r3
 8007d64:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8007d68:	46bd      	mov	sp, r7
 8007d6a:	bd80      	pop	{r7, pc}

08007d6c <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007d6c:	b480      	push	{r7}
 8007d6e:	b085      	sub	sp, #20
 8007d70:	af00      	add	r7, sp, #0
 8007d72:	6078      	str	r0, [r7, #4]
 8007d74:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8007d76:	683b      	ldr	r3, [r7, #0]
 8007d78:	785b      	ldrb	r3, [r3, #1]
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d020      	beq.n	8007dc0 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8007d7e:	687a      	ldr	r2, [r7, #4]
 8007d80:	683b      	ldr	r3, [r7, #0]
 8007d82:	781b      	ldrb	r3, [r3, #0]
 8007d84:	009b      	lsls	r3, r3, #2
 8007d86:	4413      	add	r3, r2
 8007d88:	881b      	ldrh	r3, [r3, #0]
 8007d8a:	b29b      	uxth	r3, r3
 8007d8c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007d90:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007d94:	81bb      	strh	r3, [r7, #12]
 8007d96:	89bb      	ldrh	r3, [r7, #12]
 8007d98:	f083 0310 	eor.w	r3, r3, #16
 8007d9c:	81bb      	strh	r3, [r7, #12]
 8007d9e:	687a      	ldr	r2, [r7, #4]
 8007da0:	683b      	ldr	r3, [r7, #0]
 8007da2:	781b      	ldrb	r3, [r3, #0]
 8007da4:	009b      	lsls	r3, r3, #2
 8007da6:	441a      	add	r2, r3
 8007da8:	89bb      	ldrh	r3, [r7, #12]
 8007daa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007dae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007db2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007db6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007dba:	b29b      	uxth	r3, r3
 8007dbc:	8013      	strh	r3, [r2, #0]
 8007dbe:	e01f      	b.n	8007e00 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8007dc0:	687a      	ldr	r2, [r7, #4]
 8007dc2:	683b      	ldr	r3, [r7, #0]
 8007dc4:	781b      	ldrb	r3, [r3, #0]
 8007dc6:	009b      	lsls	r3, r3, #2
 8007dc8:	4413      	add	r3, r2
 8007dca:	881b      	ldrh	r3, [r3, #0]
 8007dcc:	b29b      	uxth	r3, r3
 8007dce:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007dd2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007dd6:	81fb      	strh	r3, [r7, #14]
 8007dd8:	89fb      	ldrh	r3, [r7, #14]
 8007dda:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007dde:	81fb      	strh	r3, [r7, #14]
 8007de0:	687a      	ldr	r2, [r7, #4]
 8007de2:	683b      	ldr	r3, [r7, #0]
 8007de4:	781b      	ldrb	r3, [r3, #0]
 8007de6:	009b      	lsls	r3, r3, #2
 8007de8:	441a      	add	r2, r3
 8007dea:	89fb      	ldrh	r3, [r7, #14]
 8007dec:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007df0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007df4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007df8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007dfc:	b29b      	uxth	r3, r3
 8007dfe:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8007e00:	2300      	movs	r3, #0
}
 8007e02:	4618      	mov	r0, r3
 8007e04:	3714      	adds	r7, #20
 8007e06:	46bd      	mov	sp, r7
 8007e08:	bc80      	pop	{r7}
 8007e0a:	4770      	bx	lr

08007e0c <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007e0c:	b480      	push	{r7}
 8007e0e:	b087      	sub	sp, #28
 8007e10:	af00      	add	r7, sp, #0
 8007e12:	6078      	str	r0, [r7, #4]
 8007e14:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8007e16:	683b      	ldr	r3, [r7, #0]
 8007e18:	7b1b      	ldrb	r3, [r3, #12]
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	f040 809d 	bne.w	8007f5a <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8007e20:	683b      	ldr	r3, [r7, #0]
 8007e22:	785b      	ldrb	r3, [r3, #1]
 8007e24:	2b00      	cmp	r3, #0
 8007e26:	d04c      	beq.n	8007ec2 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007e28:	687a      	ldr	r2, [r7, #4]
 8007e2a:	683b      	ldr	r3, [r7, #0]
 8007e2c:	781b      	ldrb	r3, [r3, #0]
 8007e2e:	009b      	lsls	r3, r3, #2
 8007e30:	4413      	add	r3, r2
 8007e32:	881b      	ldrh	r3, [r3, #0]
 8007e34:	823b      	strh	r3, [r7, #16]
 8007e36:	8a3b      	ldrh	r3, [r7, #16]
 8007e38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	d01b      	beq.n	8007e78 <USB_EPClearStall+0x6c>
 8007e40:	687a      	ldr	r2, [r7, #4]
 8007e42:	683b      	ldr	r3, [r7, #0]
 8007e44:	781b      	ldrb	r3, [r3, #0]
 8007e46:	009b      	lsls	r3, r3, #2
 8007e48:	4413      	add	r3, r2
 8007e4a:	881b      	ldrh	r3, [r3, #0]
 8007e4c:	b29b      	uxth	r3, r3
 8007e4e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007e52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007e56:	81fb      	strh	r3, [r7, #14]
 8007e58:	687a      	ldr	r2, [r7, #4]
 8007e5a:	683b      	ldr	r3, [r7, #0]
 8007e5c:	781b      	ldrb	r3, [r3, #0]
 8007e5e:	009b      	lsls	r3, r3, #2
 8007e60:	441a      	add	r2, r3
 8007e62:	89fb      	ldrh	r3, [r7, #14]
 8007e64:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007e68:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007e6c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007e70:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007e74:	b29b      	uxth	r3, r3
 8007e76:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007e78:	683b      	ldr	r3, [r7, #0]
 8007e7a:	78db      	ldrb	r3, [r3, #3]
 8007e7c:	2b01      	cmp	r3, #1
 8007e7e:	d06c      	beq.n	8007f5a <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8007e80:	687a      	ldr	r2, [r7, #4]
 8007e82:	683b      	ldr	r3, [r7, #0]
 8007e84:	781b      	ldrb	r3, [r3, #0]
 8007e86:	009b      	lsls	r3, r3, #2
 8007e88:	4413      	add	r3, r2
 8007e8a:	881b      	ldrh	r3, [r3, #0]
 8007e8c:	b29b      	uxth	r3, r3
 8007e8e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007e92:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007e96:	81bb      	strh	r3, [r7, #12]
 8007e98:	89bb      	ldrh	r3, [r7, #12]
 8007e9a:	f083 0320 	eor.w	r3, r3, #32
 8007e9e:	81bb      	strh	r3, [r7, #12]
 8007ea0:	687a      	ldr	r2, [r7, #4]
 8007ea2:	683b      	ldr	r3, [r7, #0]
 8007ea4:	781b      	ldrb	r3, [r3, #0]
 8007ea6:	009b      	lsls	r3, r3, #2
 8007ea8:	441a      	add	r2, r3
 8007eaa:	89bb      	ldrh	r3, [r7, #12]
 8007eac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007eb0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007eb4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007eb8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007ebc:	b29b      	uxth	r3, r3
 8007ebe:	8013      	strh	r3, [r2, #0]
 8007ec0:	e04b      	b.n	8007f5a <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007ec2:	687a      	ldr	r2, [r7, #4]
 8007ec4:	683b      	ldr	r3, [r7, #0]
 8007ec6:	781b      	ldrb	r3, [r3, #0]
 8007ec8:	009b      	lsls	r3, r3, #2
 8007eca:	4413      	add	r3, r2
 8007ecc:	881b      	ldrh	r3, [r3, #0]
 8007ece:	82fb      	strh	r3, [r7, #22]
 8007ed0:	8afb      	ldrh	r3, [r7, #22]
 8007ed2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d01b      	beq.n	8007f12 <USB_EPClearStall+0x106>
 8007eda:	687a      	ldr	r2, [r7, #4]
 8007edc:	683b      	ldr	r3, [r7, #0]
 8007ede:	781b      	ldrb	r3, [r3, #0]
 8007ee0:	009b      	lsls	r3, r3, #2
 8007ee2:	4413      	add	r3, r2
 8007ee4:	881b      	ldrh	r3, [r3, #0]
 8007ee6:	b29b      	uxth	r3, r3
 8007ee8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007eec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007ef0:	82bb      	strh	r3, [r7, #20]
 8007ef2:	687a      	ldr	r2, [r7, #4]
 8007ef4:	683b      	ldr	r3, [r7, #0]
 8007ef6:	781b      	ldrb	r3, [r3, #0]
 8007ef8:	009b      	lsls	r3, r3, #2
 8007efa:	441a      	add	r2, r3
 8007efc:	8abb      	ldrh	r3, [r7, #20]
 8007efe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007f02:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007f06:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007f0a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007f0e:	b29b      	uxth	r3, r3
 8007f10:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007f12:	687a      	ldr	r2, [r7, #4]
 8007f14:	683b      	ldr	r3, [r7, #0]
 8007f16:	781b      	ldrb	r3, [r3, #0]
 8007f18:	009b      	lsls	r3, r3, #2
 8007f1a:	4413      	add	r3, r2
 8007f1c:	881b      	ldrh	r3, [r3, #0]
 8007f1e:	b29b      	uxth	r3, r3
 8007f20:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007f24:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007f28:	827b      	strh	r3, [r7, #18]
 8007f2a:	8a7b      	ldrh	r3, [r7, #18]
 8007f2c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007f30:	827b      	strh	r3, [r7, #18]
 8007f32:	8a7b      	ldrh	r3, [r7, #18]
 8007f34:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8007f38:	827b      	strh	r3, [r7, #18]
 8007f3a:	687a      	ldr	r2, [r7, #4]
 8007f3c:	683b      	ldr	r3, [r7, #0]
 8007f3e:	781b      	ldrb	r3, [r3, #0]
 8007f40:	009b      	lsls	r3, r3, #2
 8007f42:	441a      	add	r2, r3
 8007f44:	8a7b      	ldrh	r3, [r7, #18]
 8007f46:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007f4a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007f4e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007f52:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007f56:	b29b      	uxth	r3, r3
 8007f58:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8007f5a:	2300      	movs	r3, #0
}
 8007f5c:	4618      	mov	r0, r3
 8007f5e:	371c      	adds	r7, #28
 8007f60:	46bd      	mov	sp, r7
 8007f62:	bc80      	pop	{r7}
 8007f64:	4770      	bx	lr

08007f66 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8007f66:	b480      	push	{r7}
 8007f68:	b083      	sub	sp, #12
 8007f6a:	af00      	add	r7, sp, #0
 8007f6c:	6078      	str	r0, [r7, #4]
 8007f6e:	460b      	mov	r3, r1
 8007f70:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8007f72:	78fb      	ldrb	r3, [r7, #3]
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	d103      	bne.n	8007f80 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	2280      	movs	r2, #128	; 0x80
 8007f7c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8007f80:	2300      	movs	r3, #0
}
 8007f82:	4618      	mov	r0, r3
 8007f84:	370c      	adds	r7, #12
 8007f86:	46bd      	mov	sp, r7
 8007f88:	bc80      	pop	{r7}
 8007f8a:	4770      	bx	lr

08007f8c <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8007f8c:	b480      	push	{r7}
 8007f8e:	b083      	sub	sp, #12
 8007f90:	af00      	add	r7, sp, #0
 8007f92:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8007f94:	2300      	movs	r3, #0
}
 8007f96:	4618      	mov	r0, r3
 8007f98:	370c      	adds	r7, #12
 8007f9a:	46bd      	mov	sp, r7
 8007f9c:	bc80      	pop	{r7}
 8007f9e:	4770      	bx	lr

08007fa0 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8007fa0:	b480      	push	{r7}
 8007fa2:	b083      	sub	sp, #12
 8007fa4:	af00      	add	r7, sp, #0
 8007fa6:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8007fa8:	2300      	movs	r3, #0
}
 8007faa:	4618      	mov	r0, r3
 8007fac:	370c      	adds	r7, #12
 8007fae:	46bd      	mov	sp, r7
 8007fb0:	bc80      	pop	{r7}
 8007fb2:	4770      	bx	lr

08007fb4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8007fb4:	b480      	push	{r7}
 8007fb6:	b085      	sub	sp, #20
 8007fb8:	af00      	add	r7, sp, #0
 8007fba:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8007fc2:	b29b      	uxth	r3, r3
 8007fc4:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8007fc6:	68fb      	ldr	r3, [r7, #12]
}
 8007fc8:	4618      	mov	r0, r3
 8007fca:	3714      	adds	r7, #20
 8007fcc:	46bd      	mov	sp, r7
 8007fce:	bc80      	pop	{r7}
 8007fd0:	4770      	bx	lr

08007fd2 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8007fd2:	b480      	push	{r7}
 8007fd4:	b083      	sub	sp, #12
 8007fd6:	af00      	add	r7, sp, #0
 8007fd8:	6078      	str	r0, [r7, #4]
 8007fda:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8007fdc:	2300      	movs	r3, #0
}
 8007fde:	4618      	mov	r0, r3
 8007fe0:	370c      	adds	r7, #12
 8007fe2:	46bd      	mov	sp, r7
 8007fe4:	bc80      	pop	{r7}
 8007fe6:	4770      	bx	lr

08007fe8 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8007fe8:	b480      	push	{r7}
 8007fea:	b08d      	sub	sp, #52	; 0x34
 8007fec:	af00      	add	r7, sp, #0
 8007fee:	60f8      	str	r0, [r7, #12]
 8007ff0:	60b9      	str	r1, [r7, #8]
 8007ff2:	4611      	mov	r1, r2
 8007ff4:	461a      	mov	r2, r3
 8007ff6:	460b      	mov	r3, r1
 8007ff8:	80fb      	strh	r3, [r7, #6]
 8007ffa:	4613      	mov	r3, r2
 8007ffc:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8007ffe:	88bb      	ldrh	r3, [r7, #4]
 8008000:	3301      	adds	r3, #1
 8008002:	085b      	lsrs	r3, r3, #1
 8008004:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800800a:	68bb      	ldr	r3, [r7, #8]
 800800c:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800800e:	88fb      	ldrh	r3, [r7, #6]
 8008010:	005a      	lsls	r2, r3, #1
 8008012:	69fb      	ldr	r3, [r7, #28]
 8008014:	4413      	add	r3, r2
 8008016:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800801a:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 800801c:	6a3b      	ldr	r3, [r7, #32]
 800801e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008020:	e01e      	b.n	8008060 <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 8008022:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008024:	781b      	ldrb	r3, [r3, #0]
 8008026:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8008028:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800802a:	3301      	adds	r3, #1
 800802c:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 800802e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008030:	781b      	ldrb	r3, [r3, #0]
 8008032:	b29b      	uxth	r3, r3
 8008034:	021b      	lsls	r3, r3, #8
 8008036:	b29b      	uxth	r3, r3
 8008038:	461a      	mov	r2, r3
 800803a:	69bb      	ldr	r3, [r7, #24]
 800803c:	4313      	orrs	r3, r2
 800803e:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8008040:	697b      	ldr	r3, [r7, #20]
 8008042:	b29a      	uxth	r2, r3
 8008044:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008046:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8008048:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800804a:	3302      	adds	r3, #2
 800804c:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 800804e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008050:	3302      	adds	r3, #2
 8008052:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 8008054:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008056:	3301      	adds	r3, #1
 8008058:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 800805a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800805c:	3b01      	subs	r3, #1
 800805e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008060:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008062:	2b00      	cmp	r3, #0
 8008064:	d1dd      	bne.n	8008022 <USB_WritePMA+0x3a>
  }
}
 8008066:	bf00      	nop
 8008068:	bf00      	nop
 800806a:	3734      	adds	r7, #52	; 0x34
 800806c:	46bd      	mov	sp, r7
 800806e:	bc80      	pop	{r7}
 8008070:	4770      	bx	lr

08008072 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8008072:	b480      	push	{r7}
 8008074:	b08b      	sub	sp, #44	; 0x2c
 8008076:	af00      	add	r7, sp, #0
 8008078:	60f8      	str	r0, [r7, #12]
 800807a:	60b9      	str	r1, [r7, #8]
 800807c:	4611      	mov	r1, r2
 800807e:	461a      	mov	r2, r3
 8008080:	460b      	mov	r3, r1
 8008082:	80fb      	strh	r3, [r7, #6]
 8008084:	4613      	mov	r3, r2
 8008086:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8008088:	88bb      	ldrh	r3, [r7, #4]
 800808a:	085b      	lsrs	r3, r3, #1
 800808c:	b29b      	uxth	r3, r3
 800808e:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8008094:	68bb      	ldr	r3, [r7, #8]
 8008096:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8008098:	88fb      	ldrh	r3, [r7, #6]
 800809a:	005a      	lsls	r2, r3, #1
 800809c:	697b      	ldr	r3, [r7, #20]
 800809e:	4413      	add	r3, r2
 80080a0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80080a4:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 80080a6:	69bb      	ldr	r3, [r7, #24]
 80080a8:	627b      	str	r3, [r7, #36]	; 0x24
 80080aa:	e01b      	b.n	80080e4 <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 80080ac:	6a3b      	ldr	r3, [r7, #32]
 80080ae:	881b      	ldrh	r3, [r3, #0]
 80080b0:	b29b      	uxth	r3, r3
 80080b2:	613b      	str	r3, [r7, #16]
    pdwVal++;
 80080b4:	6a3b      	ldr	r3, [r7, #32]
 80080b6:	3302      	adds	r3, #2
 80080b8:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 80080ba:	693b      	ldr	r3, [r7, #16]
 80080bc:	b2da      	uxtb	r2, r3
 80080be:	69fb      	ldr	r3, [r7, #28]
 80080c0:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80080c2:	69fb      	ldr	r3, [r7, #28]
 80080c4:	3301      	adds	r3, #1
 80080c6:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 80080c8:	693b      	ldr	r3, [r7, #16]
 80080ca:	0a1b      	lsrs	r3, r3, #8
 80080cc:	b2da      	uxtb	r2, r3
 80080ce:	69fb      	ldr	r3, [r7, #28]
 80080d0:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80080d2:	69fb      	ldr	r3, [r7, #28]
 80080d4:	3301      	adds	r3, #1
 80080d6:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 80080d8:	6a3b      	ldr	r3, [r7, #32]
 80080da:	3302      	adds	r3, #2
 80080dc:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 80080de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080e0:	3b01      	subs	r3, #1
 80080e2:	627b      	str	r3, [r7, #36]	; 0x24
 80080e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d1e0      	bne.n	80080ac <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 80080ea:	88bb      	ldrh	r3, [r7, #4]
 80080ec:	f003 0301 	and.w	r3, r3, #1
 80080f0:	b29b      	uxth	r3, r3
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	d007      	beq.n	8008106 <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 80080f6:	6a3b      	ldr	r3, [r7, #32]
 80080f8:	881b      	ldrh	r3, [r3, #0]
 80080fa:	b29b      	uxth	r3, r3
 80080fc:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 80080fe:	693b      	ldr	r3, [r7, #16]
 8008100:	b2da      	uxtb	r2, r3
 8008102:	69fb      	ldr	r3, [r7, #28]
 8008104:	701a      	strb	r2, [r3, #0]
  }
}
 8008106:	bf00      	nop
 8008108:	372c      	adds	r7, #44	; 0x2c
 800810a:	46bd      	mov	sp, r7
 800810c:	bc80      	pop	{r7}
 800810e:	4770      	bx	lr

08008110 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008110:	b580      	push	{r7, lr}
 8008112:	b084      	sub	sp, #16
 8008114:	af00      	add	r7, sp, #0
 8008116:	6078      	str	r0, [r7, #4]
 8008118:	460b      	mov	r3, r1
 800811a:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800811c:	2300      	movs	r3, #0
 800811e:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	7c1b      	ldrb	r3, [r3, #16]
 8008124:	2b00      	cmp	r3, #0
 8008126:	d115      	bne.n	8008154 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8008128:	f44f 7300 	mov.w	r3, #512	; 0x200
 800812c:	2202      	movs	r2, #2
 800812e:	2181      	movs	r1, #129	; 0x81
 8008130:	6878      	ldr	r0, [r7, #4]
 8008132:	f001 fe86 	bl	8009e42 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	2201      	movs	r2, #1
 800813a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800813c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008140:	2202      	movs	r2, #2
 8008142:	2101      	movs	r1, #1
 8008144:	6878      	ldr	r0, [r7, #4]
 8008146:	f001 fe7c 	bl	8009e42 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	2201      	movs	r2, #1
 800814e:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 8008152:	e012      	b.n	800817a <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8008154:	2340      	movs	r3, #64	; 0x40
 8008156:	2202      	movs	r2, #2
 8008158:	2181      	movs	r1, #129	; 0x81
 800815a:	6878      	ldr	r0, [r7, #4]
 800815c:	f001 fe71 	bl	8009e42 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	2201      	movs	r2, #1
 8008164:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8008166:	2340      	movs	r3, #64	; 0x40
 8008168:	2202      	movs	r2, #2
 800816a:	2101      	movs	r1, #1
 800816c:	6878      	ldr	r0, [r7, #4]
 800816e:	f001 fe68 	bl	8009e42 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	2201      	movs	r2, #1
 8008176:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800817a:	2308      	movs	r3, #8
 800817c:	2203      	movs	r2, #3
 800817e:	2182      	movs	r1, #130	; 0x82
 8008180:	6878      	ldr	r0, [r7, #4]
 8008182:	f001 fe5e 	bl	8009e42 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	2201      	movs	r2, #1
 800818a:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800818c:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8008190:	f001 ff7e 	bl	800a090 <USBD_static_malloc>
 8008194:	4602      	mov	r2, r0
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	d102      	bne.n	80081ac <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 80081a6:	2301      	movs	r3, #1
 80081a8:	73fb      	strb	r3, [r7, #15]
 80081aa:	e026      	b.n	80081fa <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80081b2:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 80081be:	68bb      	ldr	r3, [r7, #8]
 80081c0:	2200      	movs	r2, #0
 80081c2:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 80081c6:	68bb      	ldr	r3, [r7, #8]
 80081c8:	2200      	movs	r2, #0
 80081ca:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	7c1b      	ldrb	r3, [r3, #16]
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	d109      	bne.n	80081ea <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80081d6:	68bb      	ldr	r3, [r7, #8]
 80081d8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80081dc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80081e0:	2101      	movs	r1, #1
 80081e2:	6878      	ldr	r0, [r7, #4]
 80081e4:	f001 ff1e 	bl	800a024 <USBD_LL_PrepareReceive>
 80081e8:	e007      	b.n	80081fa <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80081ea:	68bb      	ldr	r3, [r7, #8]
 80081ec:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80081f0:	2340      	movs	r3, #64	; 0x40
 80081f2:	2101      	movs	r1, #1
 80081f4:	6878      	ldr	r0, [r7, #4]
 80081f6:	f001 ff15 	bl	800a024 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 80081fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80081fc:	4618      	mov	r0, r3
 80081fe:	3710      	adds	r7, #16
 8008200:	46bd      	mov	sp, r7
 8008202:	bd80      	pop	{r7, pc}

08008204 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008204:	b580      	push	{r7, lr}
 8008206:	b084      	sub	sp, #16
 8008208:	af00      	add	r7, sp, #0
 800820a:	6078      	str	r0, [r7, #4]
 800820c:	460b      	mov	r3, r1
 800820e:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8008210:	2300      	movs	r3, #0
 8008212:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8008214:	2181      	movs	r1, #129	; 0x81
 8008216:	6878      	ldr	r0, [r7, #4]
 8008218:	f001 fe39 	bl	8009e8e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	2200      	movs	r2, #0
 8008220:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8008222:	2101      	movs	r1, #1
 8008224:	6878      	ldr	r0, [r7, #4]
 8008226:	f001 fe32 	bl	8009e8e <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	2200      	movs	r2, #0
 800822e:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8008232:	2182      	movs	r1, #130	; 0x82
 8008234:	6878      	ldr	r0, [r7, #4]
 8008236:	f001 fe2a 	bl	8009e8e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	2200      	movs	r2, #0
 800823e:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008246:	2b00      	cmp	r3, #0
 8008248:	d00e      	beq.n	8008268 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008250:	685b      	ldr	r3, [r3, #4]
 8008252:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800825a:	4618      	mov	r0, r3
 800825c:	f001 ff24 	bl	800a0a8 <USBD_static_free>
    pdev->pClassData = NULL;
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	2200      	movs	r2, #0
 8008264:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 8008268:	7bfb      	ldrb	r3, [r7, #15]
}
 800826a:	4618      	mov	r0, r3
 800826c:	3710      	adds	r7, #16
 800826e:	46bd      	mov	sp, r7
 8008270:	bd80      	pop	{r7, pc}

08008272 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8008272:	b580      	push	{r7, lr}
 8008274:	b086      	sub	sp, #24
 8008276:	af00      	add	r7, sp, #0
 8008278:	6078      	str	r0, [r7, #4]
 800827a:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008282:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8008284:	2300      	movs	r3, #0
 8008286:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8008288:	2300      	movs	r3, #0
 800828a:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 800828c:	2300      	movs	r3, #0
 800828e:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008290:	683b      	ldr	r3, [r7, #0]
 8008292:	781b      	ldrb	r3, [r3, #0]
 8008294:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008298:	2b00      	cmp	r3, #0
 800829a:	d039      	beq.n	8008310 <USBD_CDC_Setup+0x9e>
 800829c:	2b20      	cmp	r3, #32
 800829e:	d17f      	bne.n	80083a0 <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 80082a0:	683b      	ldr	r3, [r7, #0]
 80082a2:	88db      	ldrh	r3, [r3, #6]
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	d029      	beq.n	80082fc <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 80082a8:	683b      	ldr	r3, [r7, #0]
 80082aa:	781b      	ldrb	r3, [r3, #0]
 80082ac:	b25b      	sxtb	r3, r3
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	da11      	bge.n	80082d6 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80082b8:	689b      	ldr	r3, [r3, #8]
 80082ba:	683a      	ldr	r2, [r7, #0]
 80082bc:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 80082be:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80082c0:	683a      	ldr	r2, [r7, #0]
 80082c2:	88d2      	ldrh	r2, [r2, #6]
 80082c4:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80082c6:	6939      	ldr	r1, [r7, #16]
 80082c8:	683b      	ldr	r3, [r7, #0]
 80082ca:	88db      	ldrh	r3, [r3, #6]
 80082cc:	461a      	mov	r2, r3
 80082ce:	6878      	ldr	r0, [r7, #4]
 80082d0:	f001 fa09 	bl	80096e6 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 80082d4:	e06b      	b.n	80083ae <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 80082d6:	683b      	ldr	r3, [r7, #0]
 80082d8:	785a      	ldrb	r2, [r3, #1]
 80082da:	693b      	ldr	r3, [r7, #16]
 80082dc:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 80082e0:	683b      	ldr	r3, [r7, #0]
 80082e2:	88db      	ldrh	r3, [r3, #6]
 80082e4:	b2da      	uxtb	r2, r3
 80082e6:	693b      	ldr	r3, [r7, #16]
 80082e8:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80082ec:	6939      	ldr	r1, [r7, #16]
 80082ee:	683b      	ldr	r3, [r7, #0]
 80082f0:	88db      	ldrh	r3, [r3, #6]
 80082f2:	461a      	mov	r2, r3
 80082f4:	6878      	ldr	r0, [r7, #4]
 80082f6:	f001 fa24 	bl	8009742 <USBD_CtlPrepareRx>
      break;
 80082fa:	e058      	b.n	80083ae <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008302:	689b      	ldr	r3, [r3, #8]
 8008304:	683a      	ldr	r2, [r7, #0]
 8008306:	7850      	ldrb	r0, [r2, #1]
 8008308:	2200      	movs	r2, #0
 800830a:	6839      	ldr	r1, [r7, #0]
 800830c:	4798      	blx	r3
      break;
 800830e:	e04e      	b.n	80083ae <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008310:	683b      	ldr	r3, [r7, #0]
 8008312:	785b      	ldrb	r3, [r3, #1]
 8008314:	2b0b      	cmp	r3, #11
 8008316:	d02e      	beq.n	8008376 <USBD_CDC_Setup+0x104>
 8008318:	2b0b      	cmp	r3, #11
 800831a:	dc38      	bgt.n	800838e <USBD_CDC_Setup+0x11c>
 800831c:	2b00      	cmp	r3, #0
 800831e:	d002      	beq.n	8008326 <USBD_CDC_Setup+0xb4>
 8008320:	2b0a      	cmp	r3, #10
 8008322:	d014      	beq.n	800834e <USBD_CDC_Setup+0xdc>
 8008324:	e033      	b.n	800838e <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800832c:	2b03      	cmp	r3, #3
 800832e:	d107      	bne.n	8008340 <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8008330:	f107 030c 	add.w	r3, r7, #12
 8008334:	2202      	movs	r2, #2
 8008336:	4619      	mov	r1, r3
 8008338:	6878      	ldr	r0, [r7, #4]
 800833a:	f001 f9d4 	bl	80096e6 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800833e:	e02e      	b.n	800839e <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8008340:	6839      	ldr	r1, [r7, #0]
 8008342:	6878      	ldr	r0, [r7, #4]
 8008344:	f001 f965 	bl	8009612 <USBD_CtlError>
            ret = USBD_FAIL;
 8008348:	2302      	movs	r3, #2
 800834a:	75fb      	strb	r3, [r7, #23]
          break;
 800834c:	e027      	b.n	800839e <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008354:	2b03      	cmp	r3, #3
 8008356:	d107      	bne.n	8008368 <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8008358:	f107 030f 	add.w	r3, r7, #15
 800835c:	2201      	movs	r2, #1
 800835e:	4619      	mov	r1, r3
 8008360:	6878      	ldr	r0, [r7, #4]
 8008362:	f001 f9c0 	bl	80096e6 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008366:	e01a      	b.n	800839e <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8008368:	6839      	ldr	r1, [r7, #0]
 800836a:	6878      	ldr	r0, [r7, #4]
 800836c:	f001 f951 	bl	8009612 <USBD_CtlError>
            ret = USBD_FAIL;
 8008370:	2302      	movs	r3, #2
 8008372:	75fb      	strb	r3, [r7, #23]
          break;
 8008374:	e013      	b.n	800839e <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800837c:	2b03      	cmp	r3, #3
 800837e:	d00d      	beq.n	800839c <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 8008380:	6839      	ldr	r1, [r7, #0]
 8008382:	6878      	ldr	r0, [r7, #4]
 8008384:	f001 f945 	bl	8009612 <USBD_CtlError>
            ret = USBD_FAIL;
 8008388:	2302      	movs	r3, #2
 800838a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800838c:	e006      	b.n	800839c <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 800838e:	6839      	ldr	r1, [r7, #0]
 8008390:	6878      	ldr	r0, [r7, #4]
 8008392:	f001 f93e 	bl	8009612 <USBD_CtlError>
          ret = USBD_FAIL;
 8008396:	2302      	movs	r3, #2
 8008398:	75fb      	strb	r3, [r7, #23]
          break;
 800839a:	e000      	b.n	800839e <USBD_CDC_Setup+0x12c>
          break;
 800839c:	bf00      	nop
      }
      break;
 800839e:	e006      	b.n	80083ae <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 80083a0:	6839      	ldr	r1, [r7, #0]
 80083a2:	6878      	ldr	r0, [r7, #4]
 80083a4:	f001 f935 	bl	8009612 <USBD_CtlError>
      ret = USBD_FAIL;
 80083a8:	2302      	movs	r3, #2
 80083aa:	75fb      	strb	r3, [r7, #23]
      break;
 80083ac:	bf00      	nop
  }

  return ret;
 80083ae:	7dfb      	ldrb	r3, [r7, #23]
}
 80083b0:	4618      	mov	r0, r3
 80083b2:	3718      	adds	r7, #24
 80083b4:	46bd      	mov	sp, r7
 80083b6:	bd80      	pop	{r7, pc}

080083b8 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80083b8:	b580      	push	{r7, lr}
 80083ba:	b084      	sub	sp, #16
 80083bc:	af00      	add	r7, sp, #0
 80083be:	6078      	str	r0, [r7, #4]
 80083c0:	460b      	mov	r3, r1
 80083c2:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80083ca:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80083d2:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80083da:	2b00      	cmp	r3, #0
 80083dc:	d03a      	beq.n	8008454 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 80083de:	78fa      	ldrb	r2, [r7, #3]
 80083e0:	6879      	ldr	r1, [r7, #4]
 80083e2:	4613      	mov	r3, r2
 80083e4:	009b      	lsls	r3, r3, #2
 80083e6:	4413      	add	r3, r2
 80083e8:	009b      	lsls	r3, r3, #2
 80083ea:	440b      	add	r3, r1
 80083ec:	331c      	adds	r3, #28
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	2b00      	cmp	r3, #0
 80083f2:	d029      	beq.n	8008448 <USBD_CDC_DataIn+0x90>
 80083f4:	78fa      	ldrb	r2, [r7, #3]
 80083f6:	6879      	ldr	r1, [r7, #4]
 80083f8:	4613      	mov	r3, r2
 80083fa:	009b      	lsls	r3, r3, #2
 80083fc:	4413      	add	r3, r2
 80083fe:	009b      	lsls	r3, r3, #2
 8008400:	440b      	add	r3, r1
 8008402:	331c      	adds	r3, #28
 8008404:	681a      	ldr	r2, [r3, #0]
 8008406:	78f9      	ldrb	r1, [r7, #3]
 8008408:	68b8      	ldr	r0, [r7, #8]
 800840a:	460b      	mov	r3, r1
 800840c:	009b      	lsls	r3, r3, #2
 800840e:	440b      	add	r3, r1
 8008410:	00db      	lsls	r3, r3, #3
 8008412:	4403      	add	r3, r0
 8008414:	3338      	adds	r3, #56	; 0x38
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	fbb2 f1f3 	udiv	r1, r2, r3
 800841c:	fb01 f303 	mul.w	r3, r1, r3
 8008420:	1ad3      	subs	r3, r2, r3
 8008422:	2b00      	cmp	r3, #0
 8008424:	d110      	bne.n	8008448 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8008426:	78fa      	ldrb	r2, [r7, #3]
 8008428:	6879      	ldr	r1, [r7, #4]
 800842a:	4613      	mov	r3, r2
 800842c:	009b      	lsls	r3, r3, #2
 800842e:	4413      	add	r3, r2
 8008430:	009b      	lsls	r3, r3, #2
 8008432:	440b      	add	r3, r1
 8008434:	331c      	adds	r3, #28
 8008436:	2200      	movs	r2, #0
 8008438:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800843a:	78f9      	ldrb	r1, [r7, #3]
 800843c:	2300      	movs	r3, #0
 800843e:	2200      	movs	r2, #0
 8008440:	6878      	ldr	r0, [r7, #4]
 8008442:	f001 fdcc 	bl	8009fde <USBD_LL_Transmit>
 8008446:	e003      	b.n	8008450 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	2200      	movs	r2, #0
 800844c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 8008450:	2300      	movs	r3, #0
 8008452:	e000      	b.n	8008456 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8008454:	2302      	movs	r3, #2
  }
}
 8008456:	4618      	mov	r0, r3
 8008458:	3710      	adds	r7, #16
 800845a:	46bd      	mov	sp, r7
 800845c:	bd80      	pop	{r7, pc}

0800845e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800845e:	b580      	push	{r7, lr}
 8008460:	b084      	sub	sp, #16
 8008462:	af00      	add	r7, sp, #0
 8008464:	6078      	str	r0, [r7, #4]
 8008466:	460b      	mov	r3, r1
 8008468:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008470:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8008472:	78fb      	ldrb	r3, [r7, #3]
 8008474:	4619      	mov	r1, r3
 8008476:	6878      	ldr	r0, [r7, #4]
 8008478:	f001 fdf7 	bl	800a06a <USBD_LL_GetRxDataSize>
 800847c:	4602      	mov	r2, r0
 800847e:	68fb      	ldr	r3, [r7, #12]
 8008480:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800848a:	2b00      	cmp	r3, #0
 800848c:	d00d      	beq.n	80084aa <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008494:	68db      	ldr	r3, [r3, #12]
 8008496:	68fa      	ldr	r2, [r7, #12]
 8008498:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800849c:	68fa      	ldr	r2, [r7, #12]
 800849e:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80084a2:	4611      	mov	r1, r2
 80084a4:	4798      	blx	r3

    return USBD_OK;
 80084a6:	2300      	movs	r3, #0
 80084a8:	e000      	b.n	80084ac <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 80084aa:	2302      	movs	r3, #2
  }
}
 80084ac:	4618      	mov	r0, r3
 80084ae:	3710      	adds	r7, #16
 80084b0:	46bd      	mov	sp, r7
 80084b2:	bd80      	pop	{r7, pc}

080084b4 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80084b4:	b580      	push	{r7, lr}
 80084b6:	b084      	sub	sp, #16
 80084b8:	af00      	add	r7, sp, #0
 80084ba:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80084c2:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	d015      	beq.n	80084fa <USBD_CDC_EP0_RxReady+0x46>
 80084ce:	68fb      	ldr	r3, [r7, #12]
 80084d0:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80084d4:	2bff      	cmp	r3, #255	; 0xff
 80084d6:	d010      	beq.n	80084fa <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80084de:	689b      	ldr	r3, [r3, #8]
 80084e0:	68fa      	ldr	r2, [r7, #12]
 80084e2:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 80084e6:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 80084e8:	68fa      	ldr	r2, [r7, #12]
 80084ea:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80084ee:	b292      	uxth	r2, r2
 80084f0:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80084f2:	68fb      	ldr	r3, [r7, #12]
 80084f4:	22ff      	movs	r2, #255	; 0xff
 80084f6:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 80084fa:	2300      	movs	r3, #0
}
 80084fc:	4618      	mov	r0, r3
 80084fe:	3710      	adds	r7, #16
 8008500:	46bd      	mov	sp, r7
 8008502:	bd80      	pop	{r7, pc}

08008504 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8008504:	b480      	push	{r7}
 8008506:	b083      	sub	sp, #12
 8008508:	af00      	add	r7, sp, #0
 800850a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	2243      	movs	r2, #67	; 0x43
 8008510:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8008512:	4b03      	ldr	r3, [pc, #12]	; (8008520 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8008514:	4618      	mov	r0, r3
 8008516:	370c      	adds	r7, #12
 8008518:	46bd      	mov	sp, r7
 800851a:	bc80      	pop	{r7}
 800851c:	4770      	bx	lr
 800851e:	bf00      	nop
 8008520:	20000094 	.word	0x20000094

08008524 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8008524:	b480      	push	{r7}
 8008526:	b083      	sub	sp, #12
 8008528:	af00      	add	r7, sp, #0
 800852a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	2243      	movs	r2, #67	; 0x43
 8008530:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8008532:	4b03      	ldr	r3, [pc, #12]	; (8008540 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8008534:	4618      	mov	r0, r3
 8008536:	370c      	adds	r7, #12
 8008538:	46bd      	mov	sp, r7
 800853a:	bc80      	pop	{r7}
 800853c:	4770      	bx	lr
 800853e:	bf00      	nop
 8008540:	20000050 	.word	0x20000050

08008544 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8008544:	b480      	push	{r7}
 8008546:	b083      	sub	sp, #12
 8008548:	af00      	add	r7, sp, #0
 800854a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	2243      	movs	r2, #67	; 0x43
 8008550:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8008552:	4b03      	ldr	r3, [pc, #12]	; (8008560 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8008554:	4618      	mov	r0, r3
 8008556:	370c      	adds	r7, #12
 8008558:	46bd      	mov	sp, r7
 800855a:	bc80      	pop	{r7}
 800855c:	4770      	bx	lr
 800855e:	bf00      	nop
 8008560:	200000d8 	.word	0x200000d8

08008564 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8008564:	b480      	push	{r7}
 8008566:	b083      	sub	sp, #12
 8008568:	af00      	add	r7, sp, #0
 800856a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	220a      	movs	r2, #10
 8008570:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8008572:	4b03      	ldr	r3, [pc, #12]	; (8008580 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8008574:	4618      	mov	r0, r3
 8008576:	370c      	adds	r7, #12
 8008578:	46bd      	mov	sp, r7
 800857a:	bc80      	pop	{r7}
 800857c:	4770      	bx	lr
 800857e:	bf00      	nop
 8008580:	2000000c 	.word	0x2000000c

08008584 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8008584:	b480      	push	{r7}
 8008586:	b085      	sub	sp, #20
 8008588:	af00      	add	r7, sp, #0
 800858a:	6078      	str	r0, [r7, #4]
 800858c:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 800858e:	2302      	movs	r3, #2
 8008590:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 8008592:	683b      	ldr	r3, [r7, #0]
 8008594:	2b00      	cmp	r3, #0
 8008596:	d005      	beq.n	80085a4 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	683a      	ldr	r2, [r7, #0]
 800859c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 80085a0:	2300      	movs	r3, #0
 80085a2:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80085a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80085a6:	4618      	mov	r0, r3
 80085a8:	3714      	adds	r7, #20
 80085aa:	46bd      	mov	sp, r7
 80085ac:	bc80      	pop	{r7}
 80085ae:	4770      	bx	lr

080085b0 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 80085b0:	b480      	push	{r7}
 80085b2:	b087      	sub	sp, #28
 80085b4:	af00      	add	r7, sp, #0
 80085b6:	60f8      	str	r0, [r7, #12]
 80085b8:	60b9      	str	r1, [r7, #8]
 80085ba:	4613      	mov	r3, r2
 80085bc:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80085be:	68fb      	ldr	r3, [r7, #12]
 80085c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80085c4:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 80085c6:	697b      	ldr	r3, [r7, #20]
 80085c8:	68ba      	ldr	r2, [r7, #8]
 80085ca:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80085ce:	88fa      	ldrh	r2, [r7, #6]
 80085d0:	697b      	ldr	r3, [r7, #20]
 80085d2:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 80085d6:	2300      	movs	r3, #0
}
 80085d8:	4618      	mov	r0, r3
 80085da:	371c      	adds	r7, #28
 80085dc:	46bd      	mov	sp, r7
 80085de:	bc80      	pop	{r7}
 80085e0:	4770      	bx	lr

080085e2 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 80085e2:	b480      	push	{r7}
 80085e4:	b085      	sub	sp, #20
 80085e6:	af00      	add	r7, sp, #0
 80085e8:	6078      	str	r0, [r7, #4]
 80085ea:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80085f2:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 80085f4:	68fb      	ldr	r3, [r7, #12]
 80085f6:	683a      	ldr	r2, [r7, #0]
 80085f8:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 80085fc:	2300      	movs	r3, #0
}
 80085fe:	4618      	mov	r0, r3
 8008600:	3714      	adds	r7, #20
 8008602:	46bd      	mov	sp, r7
 8008604:	bc80      	pop	{r7}
 8008606:	4770      	bx	lr

08008608 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8008608:	b580      	push	{r7, lr}
 800860a:	b084      	sub	sp, #16
 800860c:	af00      	add	r7, sp, #0
 800860e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008616:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800861e:	2b00      	cmp	r3, #0
 8008620:	d01c      	beq.n	800865c <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8008628:	2b00      	cmp	r3, #0
 800862a:	d115      	bne.n	8008658 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 800862c:	68fb      	ldr	r3, [r7, #12]
 800862e:	2201      	movs	r2, #1
 8008630:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800863e:	68fb      	ldr	r3, [r7, #12]
 8008640:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 8008644:	68fb      	ldr	r3, [r7, #12]
 8008646:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800864a:	b29b      	uxth	r3, r3
 800864c:	2181      	movs	r1, #129	; 0x81
 800864e:	6878      	ldr	r0, [r7, #4]
 8008650:	f001 fcc5 	bl	8009fde <USBD_LL_Transmit>

      return USBD_OK;
 8008654:	2300      	movs	r3, #0
 8008656:	e002      	b.n	800865e <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 8008658:	2301      	movs	r3, #1
 800865a:	e000      	b.n	800865e <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 800865c:	2302      	movs	r3, #2
  }
}
 800865e:	4618      	mov	r0, r3
 8008660:	3710      	adds	r7, #16
 8008662:	46bd      	mov	sp, r7
 8008664:	bd80      	pop	{r7, pc}

08008666 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8008666:	b580      	push	{r7, lr}
 8008668:	b084      	sub	sp, #16
 800866a:	af00      	add	r7, sp, #0
 800866c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008674:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800867c:	2b00      	cmp	r3, #0
 800867e:	d017      	beq.n	80086b0 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	7c1b      	ldrb	r3, [r3, #16]
 8008684:	2b00      	cmp	r3, #0
 8008686:	d109      	bne.n	800869c <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800868e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008692:	2101      	movs	r1, #1
 8008694:	6878      	ldr	r0, [r7, #4]
 8008696:	f001 fcc5 	bl	800a024 <USBD_LL_PrepareReceive>
 800869a:	e007      	b.n	80086ac <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800869c:	68fb      	ldr	r3, [r7, #12]
 800869e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80086a2:	2340      	movs	r3, #64	; 0x40
 80086a4:	2101      	movs	r1, #1
 80086a6:	6878      	ldr	r0, [r7, #4]
 80086a8:	f001 fcbc 	bl	800a024 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 80086ac:	2300      	movs	r3, #0
 80086ae:	e000      	b.n	80086b2 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 80086b0:	2302      	movs	r3, #2
  }
}
 80086b2:	4618      	mov	r0, r3
 80086b4:	3710      	adds	r7, #16
 80086b6:	46bd      	mov	sp, r7
 80086b8:	bd80      	pop	{r7, pc}

080086ba <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80086ba:	b580      	push	{r7, lr}
 80086bc:	b084      	sub	sp, #16
 80086be:	af00      	add	r7, sp, #0
 80086c0:	60f8      	str	r0, [r7, #12]
 80086c2:	60b9      	str	r1, [r7, #8]
 80086c4:	4613      	mov	r3, r2
 80086c6:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80086c8:	68fb      	ldr	r3, [r7, #12]
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	d101      	bne.n	80086d2 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80086ce:	2302      	movs	r3, #2
 80086d0:	e01a      	b.n	8008708 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 80086d2:	68fb      	ldr	r3, [r7, #12]
 80086d4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80086d8:	2b00      	cmp	r3, #0
 80086da:	d003      	beq.n	80086e4 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 80086dc:	68fb      	ldr	r3, [r7, #12]
 80086de:	2200      	movs	r2, #0
 80086e0:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80086e4:	68bb      	ldr	r3, [r7, #8]
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	d003      	beq.n	80086f2 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 80086ea:	68fb      	ldr	r3, [r7, #12]
 80086ec:	68ba      	ldr	r2, [r7, #8]
 80086ee:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80086f2:	68fb      	ldr	r3, [r7, #12]
 80086f4:	2201      	movs	r2, #1
 80086f6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80086fa:	68fb      	ldr	r3, [r7, #12]
 80086fc:	79fa      	ldrb	r2, [r7, #7]
 80086fe:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8008700:	68f8      	ldr	r0, [r7, #12]
 8008702:	f001 fb29 	bl	8009d58 <USBD_LL_Init>

  return USBD_OK;
 8008706:	2300      	movs	r3, #0
}
 8008708:	4618      	mov	r0, r3
 800870a:	3710      	adds	r7, #16
 800870c:	46bd      	mov	sp, r7
 800870e:	bd80      	pop	{r7, pc}

08008710 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8008710:	b480      	push	{r7}
 8008712:	b085      	sub	sp, #20
 8008714:	af00      	add	r7, sp, #0
 8008716:	6078      	str	r0, [r7, #4]
 8008718:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 800871a:	2300      	movs	r3, #0
 800871c:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 800871e:	683b      	ldr	r3, [r7, #0]
 8008720:	2b00      	cmp	r3, #0
 8008722:	d006      	beq.n	8008732 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	683a      	ldr	r2, [r7, #0]
 8008728:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 800872c:	2300      	movs	r3, #0
 800872e:	73fb      	strb	r3, [r7, #15]
 8008730:	e001      	b.n	8008736 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8008732:	2302      	movs	r3, #2
 8008734:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8008736:	7bfb      	ldrb	r3, [r7, #15]
}
 8008738:	4618      	mov	r0, r3
 800873a:	3714      	adds	r7, #20
 800873c:	46bd      	mov	sp, r7
 800873e:	bc80      	pop	{r7}
 8008740:	4770      	bx	lr

08008742 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8008742:	b580      	push	{r7, lr}
 8008744:	b082      	sub	sp, #8
 8008746:	af00      	add	r7, sp, #0
 8008748:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800874a:	6878      	ldr	r0, [r7, #4]
 800874c:	f001 fb5e 	bl	8009e0c <USBD_LL_Start>

  return USBD_OK;
 8008750:	2300      	movs	r3, #0
}
 8008752:	4618      	mov	r0, r3
 8008754:	3708      	adds	r7, #8
 8008756:	46bd      	mov	sp, r7
 8008758:	bd80      	pop	{r7, pc}

0800875a <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800875a:	b480      	push	{r7}
 800875c:	b083      	sub	sp, #12
 800875e:	af00      	add	r7, sp, #0
 8008760:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008762:	2300      	movs	r3, #0
}
 8008764:	4618      	mov	r0, r3
 8008766:	370c      	adds	r7, #12
 8008768:	46bd      	mov	sp, r7
 800876a:	bc80      	pop	{r7}
 800876c:	4770      	bx	lr

0800876e <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800876e:	b580      	push	{r7, lr}
 8008770:	b084      	sub	sp, #16
 8008772:	af00      	add	r7, sp, #0
 8008774:	6078      	str	r0, [r7, #4]
 8008776:	460b      	mov	r3, r1
 8008778:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800877a:	2302      	movs	r3, #2
 800877c:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008784:	2b00      	cmp	r3, #0
 8008786:	d00c      	beq.n	80087a2 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	78fa      	ldrb	r2, [r7, #3]
 8008792:	4611      	mov	r1, r2
 8008794:	6878      	ldr	r0, [r7, #4]
 8008796:	4798      	blx	r3
 8008798:	4603      	mov	r3, r0
 800879a:	2b00      	cmp	r3, #0
 800879c:	d101      	bne.n	80087a2 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 800879e:	2300      	movs	r3, #0
 80087a0:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 80087a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80087a4:	4618      	mov	r0, r3
 80087a6:	3710      	adds	r7, #16
 80087a8:	46bd      	mov	sp, r7
 80087aa:	bd80      	pop	{r7, pc}

080087ac <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80087ac:	b580      	push	{r7, lr}
 80087ae:	b082      	sub	sp, #8
 80087b0:	af00      	add	r7, sp, #0
 80087b2:	6078      	str	r0, [r7, #4]
 80087b4:	460b      	mov	r3, r1
 80087b6:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80087be:	685b      	ldr	r3, [r3, #4]
 80087c0:	78fa      	ldrb	r2, [r7, #3]
 80087c2:	4611      	mov	r1, r2
 80087c4:	6878      	ldr	r0, [r7, #4]
 80087c6:	4798      	blx	r3

  return USBD_OK;
 80087c8:	2300      	movs	r3, #0
}
 80087ca:	4618      	mov	r0, r3
 80087cc:	3708      	adds	r7, #8
 80087ce:	46bd      	mov	sp, r7
 80087d0:	bd80      	pop	{r7, pc}

080087d2 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80087d2:	b580      	push	{r7, lr}
 80087d4:	b082      	sub	sp, #8
 80087d6:	af00      	add	r7, sp, #0
 80087d8:	6078      	str	r0, [r7, #4]
 80087da:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80087e2:	6839      	ldr	r1, [r7, #0]
 80087e4:	4618      	mov	r0, r3
 80087e6:	f000 fed8 	bl	800959a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	2201      	movs	r2, #1
 80087ee:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80087f8:	461a      	mov	r2, r3
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8008806:	f003 031f 	and.w	r3, r3, #31
 800880a:	2b02      	cmp	r3, #2
 800880c:	d016      	beq.n	800883c <USBD_LL_SetupStage+0x6a>
 800880e:	2b02      	cmp	r3, #2
 8008810:	d81c      	bhi.n	800884c <USBD_LL_SetupStage+0x7a>
 8008812:	2b00      	cmp	r3, #0
 8008814:	d002      	beq.n	800881c <USBD_LL_SetupStage+0x4a>
 8008816:	2b01      	cmp	r3, #1
 8008818:	d008      	beq.n	800882c <USBD_LL_SetupStage+0x5a>
 800881a:	e017      	b.n	800884c <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8008822:	4619      	mov	r1, r3
 8008824:	6878      	ldr	r0, [r7, #4]
 8008826:	f000 f9cb 	bl	8008bc0 <USBD_StdDevReq>
      break;
 800882a:	e01a      	b.n	8008862 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8008832:	4619      	mov	r1, r3
 8008834:	6878      	ldr	r0, [r7, #4]
 8008836:	f000 fa2d 	bl	8008c94 <USBD_StdItfReq>
      break;
 800883a:	e012      	b.n	8008862 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8008842:	4619      	mov	r1, r3
 8008844:	6878      	ldr	r0, [r7, #4]
 8008846:	f000 fa6d 	bl	8008d24 <USBD_StdEPReq>
      break;
 800884a:	e00a      	b.n	8008862 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8008852:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008856:	b2db      	uxtb	r3, r3
 8008858:	4619      	mov	r1, r3
 800885a:	6878      	ldr	r0, [r7, #4]
 800885c:	f001 fb36 	bl	8009ecc <USBD_LL_StallEP>
      break;
 8008860:	bf00      	nop
  }

  return USBD_OK;
 8008862:	2300      	movs	r3, #0
}
 8008864:	4618      	mov	r0, r3
 8008866:	3708      	adds	r7, #8
 8008868:	46bd      	mov	sp, r7
 800886a:	bd80      	pop	{r7, pc}

0800886c <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800886c:	b580      	push	{r7, lr}
 800886e:	b086      	sub	sp, #24
 8008870:	af00      	add	r7, sp, #0
 8008872:	60f8      	str	r0, [r7, #12]
 8008874:	460b      	mov	r3, r1
 8008876:	607a      	str	r2, [r7, #4]
 8008878:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800887a:	7afb      	ldrb	r3, [r7, #11]
 800887c:	2b00      	cmp	r3, #0
 800887e:	d14b      	bne.n	8008918 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8008880:	68fb      	ldr	r3, [r7, #12]
 8008882:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8008886:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8008888:	68fb      	ldr	r3, [r7, #12]
 800888a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800888e:	2b03      	cmp	r3, #3
 8008890:	d134      	bne.n	80088fc <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8008892:	697b      	ldr	r3, [r7, #20]
 8008894:	68da      	ldr	r2, [r3, #12]
 8008896:	697b      	ldr	r3, [r7, #20]
 8008898:	691b      	ldr	r3, [r3, #16]
 800889a:	429a      	cmp	r2, r3
 800889c:	d919      	bls.n	80088d2 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 800889e:	697b      	ldr	r3, [r7, #20]
 80088a0:	68da      	ldr	r2, [r3, #12]
 80088a2:	697b      	ldr	r3, [r7, #20]
 80088a4:	691b      	ldr	r3, [r3, #16]
 80088a6:	1ad2      	subs	r2, r2, r3
 80088a8:	697b      	ldr	r3, [r7, #20]
 80088aa:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80088ac:	697b      	ldr	r3, [r7, #20]
 80088ae:	68da      	ldr	r2, [r3, #12]
 80088b0:	697b      	ldr	r3, [r7, #20]
 80088b2:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 80088b4:	429a      	cmp	r2, r3
 80088b6:	d203      	bcs.n	80088c0 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80088b8:	697b      	ldr	r3, [r7, #20]
 80088ba:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 80088bc:	b29b      	uxth	r3, r3
 80088be:	e002      	b.n	80088c6 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80088c0:	697b      	ldr	r3, [r7, #20]
 80088c2:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 80088c4:	b29b      	uxth	r3, r3
 80088c6:	461a      	mov	r2, r3
 80088c8:	6879      	ldr	r1, [r7, #4]
 80088ca:	68f8      	ldr	r0, [r7, #12]
 80088cc:	f000 ff57 	bl	800977e <USBD_CtlContinueRx>
 80088d0:	e038      	b.n	8008944 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80088d2:	68fb      	ldr	r3, [r7, #12]
 80088d4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80088d8:	691b      	ldr	r3, [r3, #16]
 80088da:	2b00      	cmp	r3, #0
 80088dc:	d00a      	beq.n	80088f4 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 80088de:	68fb      	ldr	r3, [r7, #12]
 80088e0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80088e4:	2b03      	cmp	r3, #3
 80088e6:	d105      	bne.n	80088f4 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 80088e8:	68fb      	ldr	r3, [r7, #12]
 80088ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80088ee:	691b      	ldr	r3, [r3, #16]
 80088f0:	68f8      	ldr	r0, [r7, #12]
 80088f2:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 80088f4:	68f8      	ldr	r0, [r7, #12]
 80088f6:	f000 ff54 	bl	80097a2 <USBD_CtlSendStatus>
 80088fa:	e023      	b.n	8008944 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 80088fc:	68fb      	ldr	r3, [r7, #12]
 80088fe:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008902:	2b05      	cmp	r3, #5
 8008904:	d11e      	bne.n	8008944 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8008906:	68fb      	ldr	r3, [r7, #12]
 8008908:	2200      	movs	r2, #0
 800890a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 800890e:	2100      	movs	r1, #0
 8008910:	68f8      	ldr	r0, [r7, #12]
 8008912:	f001 fadb 	bl	8009ecc <USBD_LL_StallEP>
 8008916:	e015      	b.n	8008944 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8008918:	68fb      	ldr	r3, [r7, #12]
 800891a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800891e:	699b      	ldr	r3, [r3, #24]
 8008920:	2b00      	cmp	r3, #0
 8008922:	d00d      	beq.n	8008940 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008924:	68fb      	ldr	r3, [r7, #12]
 8008926:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800892a:	2b03      	cmp	r3, #3
 800892c:	d108      	bne.n	8008940 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 800892e:	68fb      	ldr	r3, [r7, #12]
 8008930:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008934:	699b      	ldr	r3, [r3, #24]
 8008936:	7afa      	ldrb	r2, [r7, #11]
 8008938:	4611      	mov	r1, r2
 800893a:	68f8      	ldr	r0, [r7, #12]
 800893c:	4798      	blx	r3
 800893e:	e001      	b.n	8008944 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8008940:	2302      	movs	r3, #2
 8008942:	e000      	b.n	8008946 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8008944:	2300      	movs	r3, #0
}
 8008946:	4618      	mov	r0, r3
 8008948:	3718      	adds	r7, #24
 800894a:	46bd      	mov	sp, r7
 800894c:	bd80      	pop	{r7, pc}

0800894e <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800894e:	b580      	push	{r7, lr}
 8008950:	b086      	sub	sp, #24
 8008952:	af00      	add	r7, sp, #0
 8008954:	60f8      	str	r0, [r7, #12]
 8008956:	460b      	mov	r3, r1
 8008958:	607a      	str	r2, [r7, #4]
 800895a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800895c:	7afb      	ldrb	r3, [r7, #11]
 800895e:	2b00      	cmp	r3, #0
 8008960:	d17f      	bne.n	8008a62 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8008962:	68fb      	ldr	r3, [r7, #12]
 8008964:	3314      	adds	r3, #20
 8008966:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8008968:	68fb      	ldr	r3, [r7, #12]
 800896a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800896e:	2b02      	cmp	r3, #2
 8008970:	d15c      	bne.n	8008a2c <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8008972:	697b      	ldr	r3, [r7, #20]
 8008974:	68da      	ldr	r2, [r3, #12]
 8008976:	697b      	ldr	r3, [r7, #20]
 8008978:	691b      	ldr	r3, [r3, #16]
 800897a:	429a      	cmp	r2, r3
 800897c:	d915      	bls.n	80089aa <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 800897e:	697b      	ldr	r3, [r7, #20]
 8008980:	68da      	ldr	r2, [r3, #12]
 8008982:	697b      	ldr	r3, [r7, #20]
 8008984:	691b      	ldr	r3, [r3, #16]
 8008986:	1ad2      	subs	r2, r2, r3
 8008988:	697b      	ldr	r3, [r7, #20]
 800898a:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 800898c:	697b      	ldr	r3, [r7, #20]
 800898e:	68db      	ldr	r3, [r3, #12]
 8008990:	b29b      	uxth	r3, r3
 8008992:	461a      	mov	r2, r3
 8008994:	6879      	ldr	r1, [r7, #4]
 8008996:	68f8      	ldr	r0, [r7, #12]
 8008998:	f000 fec1 	bl	800971e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800899c:	2300      	movs	r3, #0
 800899e:	2200      	movs	r2, #0
 80089a0:	2100      	movs	r1, #0
 80089a2:	68f8      	ldr	r0, [r7, #12]
 80089a4:	f001 fb3e 	bl	800a024 <USBD_LL_PrepareReceive>
 80089a8:	e04e      	b.n	8008a48 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80089aa:	697b      	ldr	r3, [r7, #20]
 80089ac:	689b      	ldr	r3, [r3, #8]
 80089ae:	697a      	ldr	r2, [r7, #20]
 80089b0:	6912      	ldr	r2, [r2, #16]
 80089b2:	fbb3 f1f2 	udiv	r1, r3, r2
 80089b6:	fb01 f202 	mul.w	r2, r1, r2
 80089ba:	1a9b      	subs	r3, r3, r2
 80089bc:	2b00      	cmp	r3, #0
 80089be:	d11c      	bne.n	80089fa <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 80089c0:	697b      	ldr	r3, [r7, #20]
 80089c2:	689a      	ldr	r2, [r3, #8]
 80089c4:	697b      	ldr	r3, [r7, #20]
 80089c6:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80089c8:	429a      	cmp	r2, r3
 80089ca:	d316      	bcc.n	80089fa <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 80089cc:	697b      	ldr	r3, [r7, #20]
 80089ce:	689a      	ldr	r2, [r3, #8]
 80089d0:	68fb      	ldr	r3, [r7, #12]
 80089d2:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80089d6:	429a      	cmp	r2, r3
 80089d8:	d20f      	bcs.n	80089fa <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 80089da:	2200      	movs	r2, #0
 80089dc:	2100      	movs	r1, #0
 80089de:	68f8      	ldr	r0, [r7, #12]
 80089e0:	f000 fe9d 	bl	800971e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80089e4:	68fb      	ldr	r3, [r7, #12]
 80089e6:	2200      	movs	r2, #0
 80089e8:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80089ec:	2300      	movs	r3, #0
 80089ee:	2200      	movs	r2, #0
 80089f0:	2100      	movs	r1, #0
 80089f2:	68f8      	ldr	r0, [r7, #12]
 80089f4:	f001 fb16 	bl	800a024 <USBD_LL_PrepareReceive>
 80089f8:	e026      	b.n	8008a48 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80089fa:	68fb      	ldr	r3, [r7, #12]
 80089fc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008a00:	68db      	ldr	r3, [r3, #12]
 8008a02:	2b00      	cmp	r3, #0
 8008a04:	d00a      	beq.n	8008a1c <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008a06:	68fb      	ldr	r3, [r7, #12]
 8008a08:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8008a0c:	2b03      	cmp	r3, #3
 8008a0e:	d105      	bne.n	8008a1c <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8008a10:	68fb      	ldr	r3, [r7, #12]
 8008a12:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008a16:	68db      	ldr	r3, [r3, #12]
 8008a18:	68f8      	ldr	r0, [r7, #12]
 8008a1a:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8008a1c:	2180      	movs	r1, #128	; 0x80
 8008a1e:	68f8      	ldr	r0, [r7, #12]
 8008a20:	f001 fa54 	bl	8009ecc <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8008a24:	68f8      	ldr	r0, [r7, #12]
 8008a26:	f000 fecf 	bl	80097c8 <USBD_CtlReceiveStatus>
 8008a2a:	e00d      	b.n	8008a48 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8008a2c:	68fb      	ldr	r3, [r7, #12]
 8008a2e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008a32:	2b04      	cmp	r3, #4
 8008a34:	d004      	beq.n	8008a40 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8008a36:	68fb      	ldr	r3, [r7, #12]
 8008a38:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	d103      	bne.n	8008a48 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8008a40:	2180      	movs	r1, #128	; 0x80
 8008a42:	68f8      	ldr	r0, [r7, #12]
 8008a44:	f001 fa42 	bl	8009ecc <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8008a48:	68fb      	ldr	r3, [r7, #12]
 8008a4a:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8008a4e:	2b01      	cmp	r3, #1
 8008a50:	d11d      	bne.n	8008a8e <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8008a52:	68f8      	ldr	r0, [r7, #12]
 8008a54:	f7ff fe81 	bl	800875a <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8008a58:	68fb      	ldr	r3, [r7, #12]
 8008a5a:	2200      	movs	r2, #0
 8008a5c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8008a60:	e015      	b.n	8008a8e <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8008a62:	68fb      	ldr	r3, [r7, #12]
 8008a64:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008a68:	695b      	ldr	r3, [r3, #20]
 8008a6a:	2b00      	cmp	r3, #0
 8008a6c:	d00d      	beq.n	8008a8a <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008a6e:	68fb      	ldr	r3, [r7, #12]
 8008a70:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8008a74:	2b03      	cmp	r3, #3
 8008a76:	d108      	bne.n	8008a8a <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8008a78:	68fb      	ldr	r3, [r7, #12]
 8008a7a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008a7e:	695b      	ldr	r3, [r3, #20]
 8008a80:	7afa      	ldrb	r2, [r7, #11]
 8008a82:	4611      	mov	r1, r2
 8008a84:	68f8      	ldr	r0, [r7, #12]
 8008a86:	4798      	blx	r3
 8008a88:	e001      	b.n	8008a8e <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8008a8a:	2302      	movs	r3, #2
 8008a8c:	e000      	b.n	8008a90 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8008a8e:	2300      	movs	r3, #0
}
 8008a90:	4618      	mov	r0, r3
 8008a92:	3718      	adds	r7, #24
 8008a94:	46bd      	mov	sp, r7
 8008a96:	bd80      	pop	{r7, pc}

08008a98 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8008a98:	b580      	push	{r7, lr}
 8008a9a:	b082      	sub	sp, #8
 8008a9c:	af00      	add	r7, sp, #0
 8008a9e:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008aa0:	2340      	movs	r3, #64	; 0x40
 8008aa2:	2200      	movs	r2, #0
 8008aa4:	2100      	movs	r1, #0
 8008aa6:	6878      	ldr	r0, [r7, #4]
 8008aa8:	f001 f9cb 	bl	8009e42 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	2201      	movs	r2, #1
 8008ab0:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	2240      	movs	r2, #64	; 0x40
 8008ab8:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008abc:	2340      	movs	r3, #64	; 0x40
 8008abe:	2200      	movs	r2, #0
 8008ac0:	2180      	movs	r1, #128	; 0x80
 8008ac2:	6878      	ldr	r0, [r7, #4]
 8008ac4:	f001 f9bd 	bl	8009e42 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	2201      	movs	r2, #1
 8008acc:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	2240      	movs	r2, #64	; 0x40
 8008ad2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	2201      	movs	r2, #1
 8008ad8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	2200      	movs	r2, #0
 8008ae0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	2200      	movs	r2, #0
 8008ae8:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	2200      	movs	r2, #0
 8008aee:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008af8:	2b00      	cmp	r3, #0
 8008afa:	d009      	beq.n	8008b10 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008b02:	685b      	ldr	r3, [r3, #4]
 8008b04:	687a      	ldr	r2, [r7, #4]
 8008b06:	6852      	ldr	r2, [r2, #4]
 8008b08:	b2d2      	uxtb	r2, r2
 8008b0a:	4611      	mov	r1, r2
 8008b0c:	6878      	ldr	r0, [r7, #4]
 8008b0e:	4798      	blx	r3
  }

  return USBD_OK;
 8008b10:	2300      	movs	r3, #0
}
 8008b12:	4618      	mov	r0, r3
 8008b14:	3708      	adds	r7, #8
 8008b16:	46bd      	mov	sp, r7
 8008b18:	bd80      	pop	{r7, pc}

08008b1a <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8008b1a:	b480      	push	{r7}
 8008b1c:	b083      	sub	sp, #12
 8008b1e:	af00      	add	r7, sp, #0
 8008b20:	6078      	str	r0, [r7, #4]
 8008b22:	460b      	mov	r3, r1
 8008b24:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	78fa      	ldrb	r2, [r7, #3]
 8008b2a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8008b2c:	2300      	movs	r3, #0
}
 8008b2e:	4618      	mov	r0, r3
 8008b30:	370c      	adds	r7, #12
 8008b32:	46bd      	mov	sp, r7
 8008b34:	bc80      	pop	{r7}
 8008b36:	4770      	bx	lr

08008b38 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8008b38:	b480      	push	{r7}
 8008b3a:	b083      	sub	sp, #12
 8008b3c:	af00      	add	r7, sp, #0
 8008b3e:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	2204      	movs	r2, #4
 8008b50:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8008b54:	2300      	movs	r3, #0
}
 8008b56:	4618      	mov	r0, r3
 8008b58:	370c      	adds	r7, #12
 8008b5a:	46bd      	mov	sp, r7
 8008b5c:	bc80      	pop	{r7}
 8008b5e:	4770      	bx	lr

08008b60 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8008b60:	b480      	push	{r7}
 8008b62:	b083      	sub	sp, #12
 8008b64:	af00      	add	r7, sp, #0
 8008b66:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008b6e:	2b04      	cmp	r3, #4
 8008b70:	d105      	bne.n	8008b7e <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8008b7e:	2300      	movs	r3, #0
}
 8008b80:	4618      	mov	r0, r3
 8008b82:	370c      	adds	r7, #12
 8008b84:	46bd      	mov	sp, r7
 8008b86:	bc80      	pop	{r7}
 8008b88:	4770      	bx	lr

08008b8a <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8008b8a:	b580      	push	{r7, lr}
 8008b8c:	b082      	sub	sp, #8
 8008b8e:	af00      	add	r7, sp, #0
 8008b90:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008b98:	2b03      	cmp	r3, #3
 8008b9a:	d10b      	bne.n	8008bb4 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008ba2:	69db      	ldr	r3, [r3, #28]
 8008ba4:	2b00      	cmp	r3, #0
 8008ba6:	d005      	beq.n	8008bb4 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008bae:	69db      	ldr	r3, [r3, #28]
 8008bb0:	6878      	ldr	r0, [r7, #4]
 8008bb2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008bb4:	2300      	movs	r3, #0
}
 8008bb6:	4618      	mov	r0, r3
 8008bb8:	3708      	adds	r7, #8
 8008bba:	46bd      	mov	sp, r7
 8008bbc:	bd80      	pop	{r7, pc}
	...

08008bc0 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8008bc0:	b580      	push	{r7, lr}
 8008bc2:	b084      	sub	sp, #16
 8008bc4:	af00      	add	r7, sp, #0
 8008bc6:	6078      	str	r0, [r7, #4]
 8008bc8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008bca:	2300      	movs	r3, #0
 8008bcc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008bce:	683b      	ldr	r3, [r7, #0]
 8008bd0:	781b      	ldrb	r3, [r3, #0]
 8008bd2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008bd6:	2b40      	cmp	r3, #64	; 0x40
 8008bd8:	d005      	beq.n	8008be6 <USBD_StdDevReq+0x26>
 8008bda:	2b40      	cmp	r3, #64	; 0x40
 8008bdc:	d84f      	bhi.n	8008c7e <USBD_StdDevReq+0xbe>
 8008bde:	2b00      	cmp	r3, #0
 8008be0:	d009      	beq.n	8008bf6 <USBD_StdDevReq+0x36>
 8008be2:	2b20      	cmp	r3, #32
 8008be4:	d14b      	bne.n	8008c7e <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008bec:	689b      	ldr	r3, [r3, #8]
 8008bee:	6839      	ldr	r1, [r7, #0]
 8008bf0:	6878      	ldr	r0, [r7, #4]
 8008bf2:	4798      	blx	r3
      break;
 8008bf4:	e048      	b.n	8008c88 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008bf6:	683b      	ldr	r3, [r7, #0]
 8008bf8:	785b      	ldrb	r3, [r3, #1]
 8008bfa:	2b09      	cmp	r3, #9
 8008bfc:	d839      	bhi.n	8008c72 <USBD_StdDevReq+0xb2>
 8008bfe:	a201      	add	r2, pc, #4	; (adr r2, 8008c04 <USBD_StdDevReq+0x44>)
 8008c00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c04:	08008c55 	.word	0x08008c55
 8008c08:	08008c69 	.word	0x08008c69
 8008c0c:	08008c73 	.word	0x08008c73
 8008c10:	08008c5f 	.word	0x08008c5f
 8008c14:	08008c73 	.word	0x08008c73
 8008c18:	08008c37 	.word	0x08008c37
 8008c1c:	08008c2d 	.word	0x08008c2d
 8008c20:	08008c73 	.word	0x08008c73
 8008c24:	08008c4b 	.word	0x08008c4b
 8008c28:	08008c41 	.word	0x08008c41
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8008c2c:	6839      	ldr	r1, [r7, #0]
 8008c2e:	6878      	ldr	r0, [r7, #4]
 8008c30:	f000 f9dc 	bl	8008fec <USBD_GetDescriptor>
          break;
 8008c34:	e022      	b.n	8008c7c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8008c36:	6839      	ldr	r1, [r7, #0]
 8008c38:	6878      	ldr	r0, [r7, #4]
 8008c3a:	f000 fb3f 	bl	80092bc <USBD_SetAddress>
          break;
 8008c3e:	e01d      	b.n	8008c7c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8008c40:	6839      	ldr	r1, [r7, #0]
 8008c42:	6878      	ldr	r0, [r7, #4]
 8008c44:	f000 fb7e 	bl	8009344 <USBD_SetConfig>
          break;
 8008c48:	e018      	b.n	8008c7c <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8008c4a:	6839      	ldr	r1, [r7, #0]
 8008c4c:	6878      	ldr	r0, [r7, #4]
 8008c4e:	f000 fc07 	bl	8009460 <USBD_GetConfig>
          break;
 8008c52:	e013      	b.n	8008c7c <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8008c54:	6839      	ldr	r1, [r7, #0]
 8008c56:	6878      	ldr	r0, [r7, #4]
 8008c58:	f000 fc37 	bl	80094ca <USBD_GetStatus>
          break;
 8008c5c:	e00e      	b.n	8008c7c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8008c5e:	6839      	ldr	r1, [r7, #0]
 8008c60:	6878      	ldr	r0, [r7, #4]
 8008c62:	f000 fc65 	bl	8009530 <USBD_SetFeature>
          break;
 8008c66:	e009      	b.n	8008c7c <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8008c68:	6839      	ldr	r1, [r7, #0]
 8008c6a:	6878      	ldr	r0, [r7, #4]
 8008c6c:	f000 fc74 	bl	8009558 <USBD_ClrFeature>
          break;
 8008c70:	e004      	b.n	8008c7c <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8008c72:	6839      	ldr	r1, [r7, #0]
 8008c74:	6878      	ldr	r0, [r7, #4]
 8008c76:	f000 fccc 	bl	8009612 <USBD_CtlError>
          break;
 8008c7a:	bf00      	nop
      }
      break;
 8008c7c:	e004      	b.n	8008c88 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8008c7e:	6839      	ldr	r1, [r7, #0]
 8008c80:	6878      	ldr	r0, [r7, #4]
 8008c82:	f000 fcc6 	bl	8009612 <USBD_CtlError>
      break;
 8008c86:	bf00      	nop
  }

  return ret;
 8008c88:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c8a:	4618      	mov	r0, r3
 8008c8c:	3710      	adds	r7, #16
 8008c8e:	46bd      	mov	sp, r7
 8008c90:	bd80      	pop	{r7, pc}
 8008c92:	bf00      	nop

08008c94 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8008c94:	b580      	push	{r7, lr}
 8008c96:	b084      	sub	sp, #16
 8008c98:	af00      	add	r7, sp, #0
 8008c9a:	6078      	str	r0, [r7, #4]
 8008c9c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008c9e:	2300      	movs	r3, #0
 8008ca0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008ca2:	683b      	ldr	r3, [r7, #0]
 8008ca4:	781b      	ldrb	r3, [r3, #0]
 8008ca6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008caa:	2b40      	cmp	r3, #64	; 0x40
 8008cac:	d005      	beq.n	8008cba <USBD_StdItfReq+0x26>
 8008cae:	2b40      	cmp	r3, #64	; 0x40
 8008cb0:	d82e      	bhi.n	8008d10 <USBD_StdItfReq+0x7c>
 8008cb2:	2b00      	cmp	r3, #0
 8008cb4:	d001      	beq.n	8008cba <USBD_StdItfReq+0x26>
 8008cb6:	2b20      	cmp	r3, #32
 8008cb8:	d12a      	bne.n	8008d10 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008cc0:	3b01      	subs	r3, #1
 8008cc2:	2b02      	cmp	r3, #2
 8008cc4:	d81d      	bhi.n	8008d02 <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008cc6:	683b      	ldr	r3, [r7, #0]
 8008cc8:	889b      	ldrh	r3, [r3, #4]
 8008cca:	b2db      	uxtb	r3, r3
 8008ccc:	2b01      	cmp	r3, #1
 8008cce:	d813      	bhi.n	8008cf8 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008cd6:	689b      	ldr	r3, [r3, #8]
 8008cd8:	6839      	ldr	r1, [r7, #0]
 8008cda:	6878      	ldr	r0, [r7, #4]
 8008cdc:	4798      	blx	r3
 8008cde:	4603      	mov	r3, r0
 8008ce0:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8008ce2:	683b      	ldr	r3, [r7, #0]
 8008ce4:	88db      	ldrh	r3, [r3, #6]
 8008ce6:	2b00      	cmp	r3, #0
 8008ce8:	d110      	bne.n	8008d0c <USBD_StdItfReq+0x78>
 8008cea:	7bfb      	ldrb	r3, [r7, #15]
 8008cec:	2b00      	cmp	r3, #0
 8008cee:	d10d      	bne.n	8008d0c <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 8008cf0:	6878      	ldr	r0, [r7, #4]
 8008cf2:	f000 fd56 	bl	80097a2 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8008cf6:	e009      	b.n	8008d0c <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 8008cf8:	6839      	ldr	r1, [r7, #0]
 8008cfa:	6878      	ldr	r0, [r7, #4]
 8008cfc:	f000 fc89 	bl	8009612 <USBD_CtlError>
          break;
 8008d00:	e004      	b.n	8008d0c <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 8008d02:	6839      	ldr	r1, [r7, #0]
 8008d04:	6878      	ldr	r0, [r7, #4]
 8008d06:	f000 fc84 	bl	8009612 <USBD_CtlError>
          break;
 8008d0a:	e000      	b.n	8008d0e <USBD_StdItfReq+0x7a>
          break;
 8008d0c:	bf00      	nop
      }
      break;
 8008d0e:	e004      	b.n	8008d1a <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 8008d10:	6839      	ldr	r1, [r7, #0]
 8008d12:	6878      	ldr	r0, [r7, #4]
 8008d14:	f000 fc7d 	bl	8009612 <USBD_CtlError>
      break;
 8008d18:	bf00      	nop
  }

  return USBD_OK;
 8008d1a:	2300      	movs	r3, #0
}
 8008d1c:	4618      	mov	r0, r3
 8008d1e:	3710      	adds	r7, #16
 8008d20:	46bd      	mov	sp, r7
 8008d22:	bd80      	pop	{r7, pc}

08008d24 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8008d24:	b580      	push	{r7, lr}
 8008d26:	b084      	sub	sp, #16
 8008d28:	af00      	add	r7, sp, #0
 8008d2a:	6078      	str	r0, [r7, #4]
 8008d2c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8008d2e:	2300      	movs	r3, #0
 8008d30:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8008d32:	683b      	ldr	r3, [r7, #0]
 8008d34:	889b      	ldrh	r3, [r3, #4]
 8008d36:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008d38:	683b      	ldr	r3, [r7, #0]
 8008d3a:	781b      	ldrb	r3, [r3, #0]
 8008d3c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008d40:	2b40      	cmp	r3, #64	; 0x40
 8008d42:	d007      	beq.n	8008d54 <USBD_StdEPReq+0x30>
 8008d44:	2b40      	cmp	r3, #64	; 0x40
 8008d46:	f200 8146 	bhi.w	8008fd6 <USBD_StdEPReq+0x2b2>
 8008d4a:	2b00      	cmp	r3, #0
 8008d4c:	d00a      	beq.n	8008d64 <USBD_StdEPReq+0x40>
 8008d4e:	2b20      	cmp	r3, #32
 8008d50:	f040 8141 	bne.w	8008fd6 <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008d5a:	689b      	ldr	r3, [r3, #8]
 8008d5c:	6839      	ldr	r1, [r7, #0]
 8008d5e:	6878      	ldr	r0, [r7, #4]
 8008d60:	4798      	blx	r3
      break;
 8008d62:	e13d      	b.n	8008fe0 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8008d64:	683b      	ldr	r3, [r7, #0]
 8008d66:	781b      	ldrb	r3, [r3, #0]
 8008d68:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008d6c:	2b20      	cmp	r3, #32
 8008d6e:	d10a      	bne.n	8008d86 <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008d76:	689b      	ldr	r3, [r3, #8]
 8008d78:	6839      	ldr	r1, [r7, #0]
 8008d7a:	6878      	ldr	r0, [r7, #4]
 8008d7c:	4798      	blx	r3
 8008d7e:	4603      	mov	r3, r0
 8008d80:	73fb      	strb	r3, [r7, #15]

        return ret;
 8008d82:	7bfb      	ldrb	r3, [r7, #15]
 8008d84:	e12d      	b.n	8008fe2 <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 8008d86:	683b      	ldr	r3, [r7, #0]
 8008d88:	785b      	ldrb	r3, [r3, #1]
 8008d8a:	2b03      	cmp	r3, #3
 8008d8c:	d007      	beq.n	8008d9e <USBD_StdEPReq+0x7a>
 8008d8e:	2b03      	cmp	r3, #3
 8008d90:	f300 811b 	bgt.w	8008fca <USBD_StdEPReq+0x2a6>
 8008d94:	2b00      	cmp	r3, #0
 8008d96:	d072      	beq.n	8008e7e <USBD_StdEPReq+0x15a>
 8008d98:	2b01      	cmp	r3, #1
 8008d9a:	d03a      	beq.n	8008e12 <USBD_StdEPReq+0xee>
 8008d9c:	e115      	b.n	8008fca <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008da4:	2b02      	cmp	r3, #2
 8008da6:	d002      	beq.n	8008dae <USBD_StdEPReq+0x8a>
 8008da8:	2b03      	cmp	r3, #3
 8008daa:	d015      	beq.n	8008dd8 <USBD_StdEPReq+0xb4>
 8008dac:	e02b      	b.n	8008e06 <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008dae:	7bbb      	ldrb	r3, [r7, #14]
 8008db0:	2b00      	cmp	r3, #0
 8008db2:	d00c      	beq.n	8008dce <USBD_StdEPReq+0xaa>
 8008db4:	7bbb      	ldrb	r3, [r7, #14]
 8008db6:	2b80      	cmp	r3, #128	; 0x80
 8008db8:	d009      	beq.n	8008dce <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8008dba:	7bbb      	ldrb	r3, [r7, #14]
 8008dbc:	4619      	mov	r1, r3
 8008dbe:	6878      	ldr	r0, [r7, #4]
 8008dc0:	f001 f884 	bl	8009ecc <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8008dc4:	2180      	movs	r1, #128	; 0x80
 8008dc6:	6878      	ldr	r0, [r7, #4]
 8008dc8:	f001 f880 	bl	8009ecc <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008dcc:	e020      	b.n	8008e10 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 8008dce:	6839      	ldr	r1, [r7, #0]
 8008dd0:	6878      	ldr	r0, [r7, #4]
 8008dd2:	f000 fc1e 	bl	8009612 <USBD_CtlError>
              break;
 8008dd6:	e01b      	b.n	8008e10 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008dd8:	683b      	ldr	r3, [r7, #0]
 8008dda:	885b      	ldrh	r3, [r3, #2]
 8008ddc:	2b00      	cmp	r3, #0
 8008dde:	d10e      	bne.n	8008dfe <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 8008de0:	7bbb      	ldrb	r3, [r7, #14]
 8008de2:	2b00      	cmp	r3, #0
 8008de4:	d00b      	beq.n	8008dfe <USBD_StdEPReq+0xda>
 8008de6:	7bbb      	ldrb	r3, [r7, #14]
 8008de8:	2b80      	cmp	r3, #128	; 0x80
 8008dea:	d008      	beq.n	8008dfe <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008dec:	683b      	ldr	r3, [r7, #0]
 8008dee:	88db      	ldrh	r3, [r3, #6]
 8008df0:	2b00      	cmp	r3, #0
 8008df2:	d104      	bne.n	8008dfe <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8008df4:	7bbb      	ldrb	r3, [r7, #14]
 8008df6:	4619      	mov	r1, r3
 8008df8:	6878      	ldr	r0, [r7, #4]
 8008dfa:	f001 f867 	bl	8009ecc <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8008dfe:	6878      	ldr	r0, [r7, #4]
 8008e00:	f000 fccf 	bl	80097a2 <USBD_CtlSendStatus>

              break;
 8008e04:	e004      	b.n	8008e10 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 8008e06:	6839      	ldr	r1, [r7, #0]
 8008e08:	6878      	ldr	r0, [r7, #4]
 8008e0a:	f000 fc02 	bl	8009612 <USBD_CtlError>
              break;
 8008e0e:	bf00      	nop
          }
          break;
 8008e10:	e0e0      	b.n	8008fd4 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008e18:	2b02      	cmp	r3, #2
 8008e1a:	d002      	beq.n	8008e22 <USBD_StdEPReq+0xfe>
 8008e1c:	2b03      	cmp	r3, #3
 8008e1e:	d015      	beq.n	8008e4c <USBD_StdEPReq+0x128>
 8008e20:	e026      	b.n	8008e70 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008e22:	7bbb      	ldrb	r3, [r7, #14]
 8008e24:	2b00      	cmp	r3, #0
 8008e26:	d00c      	beq.n	8008e42 <USBD_StdEPReq+0x11e>
 8008e28:	7bbb      	ldrb	r3, [r7, #14]
 8008e2a:	2b80      	cmp	r3, #128	; 0x80
 8008e2c:	d009      	beq.n	8008e42 <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8008e2e:	7bbb      	ldrb	r3, [r7, #14]
 8008e30:	4619      	mov	r1, r3
 8008e32:	6878      	ldr	r0, [r7, #4]
 8008e34:	f001 f84a 	bl	8009ecc <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8008e38:	2180      	movs	r1, #128	; 0x80
 8008e3a:	6878      	ldr	r0, [r7, #4]
 8008e3c:	f001 f846 	bl	8009ecc <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008e40:	e01c      	b.n	8008e7c <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 8008e42:	6839      	ldr	r1, [r7, #0]
 8008e44:	6878      	ldr	r0, [r7, #4]
 8008e46:	f000 fbe4 	bl	8009612 <USBD_CtlError>
              break;
 8008e4a:	e017      	b.n	8008e7c <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008e4c:	683b      	ldr	r3, [r7, #0]
 8008e4e:	885b      	ldrh	r3, [r3, #2]
 8008e50:	2b00      	cmp	r3, #0
 8008e52:	d112      	bne.n	8008e7a <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8008e54:	7bbb      	ldrb	r3, [r7, #14]
 8008e56:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008e5a:	2b00      	cmp	r3, #0
 8008e5c:	d004      	beq.n	8008e68 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8008e5e:	7bbb      	ldrb	r3, [r7, #14]
 8008e60:	4619      	mov	r1, r3
 8008e62:	6878      	ldr	r0, [r7, #4]
 8008e64:	f001 f851 	bl	8009f0a <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8008e68:	6878      	ldr	r0, [r7, #4]
 8008e6a:	f000 fc9a 	bl	80097a2 <USBD_CtlSendStatus>
              }
              break;
 8008e6e:	e004      	b.n	8008e7a <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 8008e70:	6839      	ldr	r1, [r7, #0]
 8008e72:	6878      	ldr	r0, [r7, #4]
 8008e74:	f000 fbcd 	bl	8009612 <USBD_CtlError>
              break;
 8008e78:	e000      	b.n	8008e7c <USBD_StdEPReq+0x158>
              break;
 8008e7a:	bf00      	nop
          }
          break;
 8008e7c:	e0aa      	b.n	8008fd4 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008e84:	2b02      	cmp	r3, #2
 8008e86:	d002      	beq.n	8008e8e <USBD_StdEPReq+0x16a>
 8008e88:	2b03      	cmp	r3, #3
 8008e8a:	d032      	beq.n	8008ef2 <USBD_StdEPReq+0x1ce>
 8008e8c:	e097      	b.n	8008fbe <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008e8e:	7bbb      	ldrb	r3, [r7, #14]
 8008e90:	2b00      	cmp	r3, #0
 8008e92:	d007      	beq.n	8008ea4 <USBD_StdEPReq+0x180>
 8008e94:	7bbb      	ldrb	r3, [r7, #14]
 8008e96:	2b80      	cmp	r3, #128	; 0x80
 8008e98:	d004      	beq.n	8008ea4 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 8008e9a:	6839      	ldr	r1, [r7, #0]
 8008e9c:	6878      	ldr	r0, [r7, #4]
 8008e9e:	f000 fbb8 	bl	8009612 <USBD_CtlError>
                break;
 8008ea2:	e091      	b.n	8008fc8 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008ea4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008ea8:	2b00      	cmp	r3, #0
 8008eaa:	da0b      	bge.n	8008ec4 <USBD_StdEPReq+0x1a0>
 8008eac:	7bbb      	ldrb	r3, [r7, #14]
 8008eae:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008eb2:	4613      	mov	r3, r2
 8008eb4:	009b      	lsls	r3, r3, #2
 8008eb6:	4413      	add	r3, r2
 8008eb8:	009b      	lsls	r3, r3, #2
 8008eba:	3310      	adds	r3, #16
 8008ebc:	687a      	ldr	r2, [r7, #4]
 8008ebe:	4413      	add	r3, r2
 8008ec0:	3304      	adds	r3, #4
 8008ec2:	e00b      	b.n	8008edc <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008ec4:	7bbb      	ldrb	r3, [r7, #14]
 8008ec6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008eca:	4613      	mov	r3, r2
 8008ecc:	009b      	lsls	r3, r3, #2
 8008ece:	4413      	add	r3, r2
 8008ed0:	009b      	lsls	r3, r3, #2
 8008ed2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008ed6:	687a      	ldr	r2, [r7, #4]
 8008ed8:	4413      	add	r3, r2
 8008eda:	3304      	adds	r3, #4
 8008edc:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8008ede:	68bb      	ldr	r3, [r7, #8]
 8008ee0:	2200      	movs	r2, #0
 8008ee2:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8008ee4:	68bb      	ldr	r3, [r7, #8]
 8008ee6:	2202      	movs	r2, #2
 8008ee8:	4619      	mov	r1, r3
 8008eea:	6878      	ldr	r0, [r7, #4]
 8008eec:	f000 fbfb 	bl	80096e6 <USBD_CtlSendData>
              break;
 8008ef0:	e06a      	b.n	8008fc8 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8008ef2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008ef6:	2b00      	cmp	r3, #0
 8008ef8:	da11      	bge.n	8008f1e <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008efa:	7bbb      	ldrb	r3, [r7, #14]
 8008efc:	f003 020f 	and.w	r2, r3, #15
 8008f00:	6879      	ldr	r1, [r7, #4]
 8008f02:	4613      	mov	r3, r2
 8008f04:	009b      	lsls	r3, r3, #2
 8008f06:	4413      	add	r3, r2
 8008f08:	009b      	lsls	r3, r3, #2
 8008f0a:	440b      	add	r3, r1
 8008f0c:	3318      	adds	r3, #24
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	2b00      	cmp	r3, #0
 8008f12:	d117      	bne.n	8008f44 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8008f14:	6839      	ldr	r1, [r7, #0]
 8008f16:	6878      	ldr	r0, [r7, #4]
 8008f18:	f000 fb7b 	bl	8009612 <USBD_CtlError>
                  break;
 8008f1c:	e054      	b.n	8008fc8 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8008f1e:	7bbb      	ldrb	r3, [r7, #14]
 8008f20:	f003 020f 	and.w	r2, r3, #15
 8008f24:	6879      	ldr	r1, [r7, #4]
 8008f26:	4613      	mov	r3, r2
 8008f28:	009b      	lsls	r3, r3, #2
 8008f2a:	4413      	add	r3, r2
 8008f2c:	009b      	lsls	r3, r3, #2
 8008f2e:	440b      	add	r3, r1
 8008f30:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8008f34:	681b      	ldr	r3, [r3, #0]
 8008f36:	2b00      	cmp	r3, #0
 8008f38:	d104      	bne.n	8008f44 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8008f3a:	6839      	ldr	r1, [r7, #0]
 8008f3c:	6878      	ldr	r0, [r7, #4]
 8008f3e:	f000 fb68 	bl	8009612 <USBD_CtlError>
                  break;
 8008f42:	e041      	b.n	8008fc8 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008f44:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008f48:	2b00      	cmp	r3, #0
 8008f4a:	da0b      	bge.n	8008f64 <USBD_StdEPReq+0x240>
 8008f4c:	7bbb      	ldrb	r3, [r7, #14]
 8008f4e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008f52:	4613      	mov	r3, r2
 8008f54:	009b      	lsls	r3, r3, #2
 8008f56:	4413      	add	r3, r2
 8008f58:	009b      	lsls	r3, r3, #2
 8008f5a:	3310      	adds	r3, #16
 8008f5c:	687a      	ldr	r2, [r7, #4]
 8008f5e:	4413      	add	r3, r2
 8008f60:	3304      	adds	r3, #4
 8008f62:	e00b      	b.n	8008f7c <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008f64:	7bbb      	ldrb	r3, [r7, #14]
 8008f66:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008f6a:	4613      	mov	r3, r2
 8008f6c:	009b      	lsls	r3, r3, #2
 8008f6e:	4413      	add	r3, r2
 8008f70:	009b      	lsls	r3, r3, #2
 8008f72:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008f76:	687a      	ldr	r2, [r7, #4]
 8008f78:	4413      	add	r3, r2
 8008f7a:	3304      	adds	r3, #4
 8008f7c:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008f7e:	7bbb      	ldrb	r3, [r7, #14]
 8008f80:	2b00      	cmp	r3, #0
 8008f82:	d002      	beq.n	8008f8a <USBD_StdEPReq+0x266>
 8008f84:	7bbb      	ldrb	r3, [r7, #14]
 8008f86:	2b80      	cmp	r3, #128	; 0x80
 8008f88:	d103      	bne.n	8008f92 <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 8008f8a:	68bb      	ldr	r3, [r7, #8]
 8008f8c:	2200      	movs	r2, #0
 8008f8e:	601a      	str	r2, [r3, #0]
 8008f90:	e00e      	b.n	8008fb0 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8008f92:	7bbb      	ldrb	r3, [r7, #14]
 8008f94:	4619      	mov	r1, r3
 8008f96:	6878      	ldr	r0, [r7, #4]
 8008f98:	f000 ffd6 	bl	8009f48 <USBD_LL_IsStallEP>
 8008f9c:	4603      	mov	r3, r0
 8008f9e:	2b00      	cmp	r3, #0
 8008fa0:	d003      	beq.n	8008faa <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 8008fa2:	68bb      	ldr	r3, [r7, #8]
 8008fa4:	2201      	movs	r2, #1
 8008fa6:	601a      	str	r2, [r3, #0]
 8008fa8:	e002      	b.n	8008fb0 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 8008faa:	68bb      	ldr	r3, [r7, #8]
 8008fac:	2200      	movs	r2, #0
 8008fae:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8008fb0:	68bb      	ldr	r3, [r7, #8]
 8008fb2:	2202      	movs	r2, #2
 8008fb4:	4619      	mov	r1, r3
 8008fb6:	6878      	ldr	r0, [r7, #4]
 8008fb8:	f000 fb95 	bl	80096e6 <USBD_CtlSendData>
              break;
 8008fbc:	e004      	b.n	8008fc8 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 8008fbe:	6839      	ldr	r1, [r7, #0]
 8008fc0:	6878      	ldr	r0, [r7, #4]
 8008fc2:	f000 fb26 	bl	8009612 <USBD_CtlError>
              break;
 8008fc6:	bf00      	nop
          }
          break;
 8008fc8:	e004      	b.n	8008fd4 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 8008fca:	6839      	ldr	r1, [r7, #0]
 8008fcc:	6878      	ldr	r0, [r7, #4]
 8008fce:	f000 fb20 	bl	8009612 <USBD_CtlError>
          break;
 8008fd2:	bf00      	nop
      }
      break;
 8008fd4:	e004      	b.n	8008fe0 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 8008fd6:	6839      	ldr	r1, [r7, #0]
 8008fd8:	6878      	ldr	r0, [r7, #4]
 8008fda:	f000 fb1a 	bl	8009612 <USBD_CtlError>
      break;
 8008fde:	bf00      	nop
  }

  return ret;
 8008fe0:	7bfb      	ldrb	r3, [r7, #15]
}
 8008fe2:	4618      	mov	r0, r3
 8008fe4:	3710      	adds	r7, #16
 8008fe6:	46bd      	mov	sp, r7
 8008fe8:	bd80      	pop	{r7, pc}
	...

08008fec <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8008fec:	b580      	push	{r7, lr}
 8008fee:	b084      	sub	sp, #16
 8008ff0:	af00      	add	r7, sp, #0
 8008ff2:	6078      	str	r0, [r7, #4]
 8008ff4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008ff6:	2300      	movs	r3, #0
 8008ff8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8008ffa:	2300      	movs	r3, #0
 8008ffc:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8008ffe:	2300      	movs	r3, #0
 8009000:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8009002:	683b      	ldr	r3, [r7, #0]
 8009004:	885b      	ldrh	r3, [r3, #2]
 8009006:	0a1b      	lsrs	r3, r3, #8
 8009008:	b29b      	uxth	r3, r3
 800900a:	3b01      	subs	r3, #1
 800900c:	2b06      	cmp	r3, #6
 800900e:	f200 8128 	bhi.w	8009262 <USBD_GetDescriptor+0x276>
 8009012:	a201      	add	r2, pc, #4	; (adr r2, 8009018 <USBD_GetDescriptor+0x2c>)
 8009014:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009018:	08009035 	.word	0x08009035
 800901c:	0800904d 	.word	0x0800904d
 8009020:	0800908d 	.word	0x0800908d
 8009024:	08009263 	.word	0x08009263
 8009028:	08009263 	.word	0x08009263
 800902c:	08009203 	.word	0x08009203
 8009030:	0800922f 	.word	0x0800922f
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	687a      	ldr	r2, [r7, #4]
 800903e:	7c12      	ldrb	r2, [r2, #16]
 8009040:	f107 0108 	add.w	r1, r7, #8
 8009044:	4610      	mov	r0, r2
 8009046:	4798      	blx	r3
 8009048:	60f8      	str	r0, [r7, #12]
      break;
 800904a:	e112      	b.n	8009272 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	7c1b      	ldrb	r3, [r3, #16]
 8009050:	2b00      	cmp	r3, #0
 8009052:	d10d      	bne.n	8009070 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800905a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800905c:	f107 0208 	add.w	r2, r7, #8
 8009060:	4610      	mov	r0, r2
 8009062:	4798      	blx	r3
 8009064:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009066:	68fb      	ldr	r3, [r7, #12]
 8009068:	3301      	adds	r3, #1
 800906a:	2202      	movs	r2, #2
 800906c:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800906e:	e100      	b.n	8009272 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009076:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009078:	f107 0208 	add.w	r2, r7, #8
 800907c:	4610      	mov	r0, r2
 800907e:	4798      	blx	r3
 8009080:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009082:	68fb      	ldr	r3, [r7, #12]
 8009084:	3301      	adds	r3, #1
 8009086:	2202      	movs	r2, #2
 8009088:	701a      	strb	r2, [r3, #0]
      break;
 800908a:	e0f2      	b.n	8009272 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800908c:	683b      	ldr	r3, [r7, #0]
 800908e:	885b      	ldrh	r3, [r3, #2]
 8009090:	b2db      	uxtb	r3, r3
 8009092:	2b05      	cmp	r3, #5
 8009094:	f200 80ac 	bhi.w	80091f0 <USBD_GetDescriptor+0x204>
 8009098:	a201      	add	r2, pc, #4	; (adr r2, 80090a0 <USBD_GetDescriptor+0xb4>)
 800909a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800909e:	bf00      	nop
 80090a0:	080090b9 	.word	0x080090b9
 80090a4:	080090ed 	.word	0x080090ed
 80090a8:	08009121 	.word	0x08009121
 80090ac:	08009155 	.word	0x08009155
 80090b0:	08009189 	.word	0x08009189
 80090b4:	080091bd 	.word	0x080091bd
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80090be:	685b      	ldr	r3, [r3, #4]
 80090c0:	2b00      	cmp	r3, #0
 80090c2:	d00b      	beq.n	80090dc <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80090ca:	685b      	ldr	r3, [r3, #4]
 80090cc:	687a      	ldr	r2, [r7, #4]
 80090ce:	7c12      	ldrb	r2, [r2, #16]
 80090d0:	f107 0108 	add.w	r1, r7, #8
 80090d4:	4610      	mov	r0, r2
 80090d6:	4798      	blx	r3
 80090d8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80090da:	e091      	b.n	8009200 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80090dc:	6839      	ldr	r1, [r7, #0]
 80090de:	6878      	ldr	r0, [r7, #4]
 80090e0:	f000 fa97 	bl	8009612 <USBD_CtlError>
            err++;
 80090e4:	7afb      	ldrb	r3, [r7, #11]
 80090e6:	3301      	adds	r3, #1
 80090e8:	72fb      	strb	r3, [r7, #11]
          break;
 80090ea:	e089      	b.n	8009200 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80090f2:	689b      	ldr	r3, [r3, #8]
 80090f4:	2b00      	cmp	r3, #0
 80090f6:	d00b      	beq.n	8009110 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80090fe:	689b      	ldr	r3, [r3, #8]
 8009100:	687a      	ldr	r2, [r7, #4]
 8009102:	7c12      	ldrb	r2, [r2, #16]
 8009104:	f107 0108 	add.w	r1, r7, #8
 8009108:	4610      	mov	r0, r2
 800910a:	4798      	blx	r3
 800910c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800910e:	e077      	b.n	8009200 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009110:	6839      	ldr	r1, [r7, #0]
 8009112:	6878      	ldr	r0, [r7, #4]
 8009114:	f000 fa7d 	bl	8009612 <USBD_CtlError>
            err++;
 8009118:	7afb      	ldrb	r3, [r7, #11]
 800911a:	3301      	adds	r3, #1
 800911c:	72fb      	strb	r3, [r7, #11]
          break;
 800911e:	e06f      	b.n	8009200 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009126:	68db      	ldr	r3, [r3, #12]
 8009128:	2b00      	cmp	r3, #0
 800912a:	d00b      	beq.n	8009144 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009132:	68db      	ldr	r3, [r3, #12]
 8009134:	687a      	ldr	r2, [r7, #4]
 8009136:	7c12      	ldrb	r2, [r2, #16]
 8009138:	f107 0108 	add.w	r1, r7, #8
 800913c:	4610      	mov	r0, r2
 800913e:	4798      	blx	r3
 8009140:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009142:	e05d      	b.n	8009200 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009144:	6839      	ldr	r1, [r7, #0]
 8009146:	6878      	ldr	r0, [r7, #4]
 8009148:	f000 fa63 	bl	8009612 <USBD_CtlError>
            err++;
 800914c:	7afb      	ldrb	r3, [r7, #11]
 800914e:	3301      	adds	r3, #1
 8009150:	72fb      	strb	r3, [r7, #11]
          break;
 8009152:	e055      	b.n	8009200 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800915a:	691b      	ldr	r3, [r3, #16]
 800915c:	2b00      	cmp	r3, #0
 800915e:	d00b      	beq.n	8009178 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009166:	691b      	ldr	r3, [r3, #16]
 8009168:	687a      	ldr	r2, [r7, #4]
 800916a:	7c12      	ldrb	r2, [r2, #16]
 800916c:	f107 0108 	add.w	r1, r7, #8
 8009170:	4610      	mov	r0, r2
 8009172:	4798      	blx	r3
 8009174:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009176:	e043      	b.n	8009200 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009178:	6839      	ldr	r1, [r7, #0]
 800917a:	6878      	ldr	r0, [r7, #4]
 800917c:	f000 fa49 	bl	8009612 <USBD_CtlError>
            err++;
 8009180:	7afb      	ldrb	r3, [r7, #11]
 8009182:	3301      	adds	r3, #1
 8009184:	72fb      	strb	r3, [r7, #11]
          break;
 8009186:	e03b      	b.n	8009200 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800918e:	695b      	ldr	r3, [r3, #20]
 8009190:	2b00      	cmp	r3, #0
 8009192:	d00b      	beq.n	80091ac <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800919a:	695b      	ldr	r3, [r3, #20]
 800919c:	687a      	ldr	r2, [r7, #4]
 800919e:	7c12      	ldrb	r2, [r2, #16]
 80091a0:	f107 0108 	add.w	r1, r7, #8
 80091a4:	4610      	mov	r0, r2
 80091a6:	4798      	blx	r3
 80091a8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80091aa:	e029      	b.n	8009200 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80091ac:	6839      	ldr	r1, [r7, #0]
 80091ae:	6878      	ldr	r0, [r7, #4]
 80091b0:	f000 fa2f 	bl	8009612 <USBD_CtlError>
            err++;
 80091b4:	7afb      	ldrb	r3, [r7, #11]
 80091b6:	3301      	adds	r3, #1
 80091b8:	72fb      	strb	r3, [r7, #11]
          break;
 80091ba:	e021      	b.n	8009200 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80091c2:	699b      	ldr	r3, [r3, #24]
 80091c4:	2b00      	cmp	r3, #0
 80091c6:	d00b      	beq.n	80091e0 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80091ce:	699b      	ldr	r3, [r3, #24]
 80091d0:	687a      	ldr	r2, [r7, #4]
 80091d2:	7c12      	ldrb	r2, [r2, #16]
 80091d4:	f107 0108 	add.w	r1, r7, #8
 80091d8:	4610      	mov	r0, r2
 80091da:	4798      	blx	r3
 80091dc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80091de:	e00f      	b.n	8009200 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80091e0:	6839      	ldr	r1, [r7, #0]
 80091e2:	6878      	ldr	r0, [r7, #4]
 80091e4:	f000 fa15 	bl	8009612 <USBD_CtlError>
            err++;
 80091e8:	7afb      	ldrb	r3, [r7, #11]
 80091ea:	3301      	adds	r3, #1
 80091ec:	72fb      	strb	r3, [r7, #11]
          break;
 80091ee:	e007      	b.n	8009200 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 80091f0:	6839      	ldr	r1, [r7, #0]
 80091f2:	6878      	ldr	r0, [r7, #4]
 80091f4:	f000 fa0d 	bl	8009612 <USBD_CtlError>
          err++;
 80091f8:	7afb      	ldrb	r3, [r7, #11]
 80091fa:	3301      	adds	r3, #1
 80091fc:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 80091fe:	e038      	b.n	8009272 <USBD_GetDescriptor+0x286>
 8009200:	e037      	b.n	8009272 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	7c1b      	ldrb	r3, [r3, #16]
 8009206:	2b00      	cmp	r3, #0
 8009208:	d109      	bne.n	800921e <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009210:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009212:	f107 0208 	add.w	r2, r7, #8
 8009216:	4610      	mov	r0, r2
 8009218:	4798      	blx	r3
 800921a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800921c:	e029      	b.n	8009272 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800921e:	6839      	ldr	r1, [r7, #0]
 8009220:	6878      	ldr	r0, [r7, #4]
 8009222:	f000 f9f6 	bl	8009612 <USBD_CtlError>
        err++;
 8009226:	7afb      	ldrb	r3, [r7, #11]
 8009228:	3301      	adds	r3, #1
 800922a:	72fb      	strb	r3, [r7, #11]
      break;
 800922c:	e021      	b.n	8009272 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	7c1b      	ldrb	r3, [r3, #16]
 8009232:	2b00      	cmp	r3, #0
 8009234:	d10d      	bne.n	8009252 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800923c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800923e:	f107 0208 	add.w	r2, r7, #8
 8009242:	4610      	mov	r0, r2
 8009244:	4798      	blx	r3
 8009246:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8009248:	68fb      	ldr	r3, [r7, #12]
 800924a:	3301      	adds	r3, #1
 800924c:	2207      	movs	r2, #7
 800924e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009250:	e00f      	b.n	8009272 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8009252:	6839      	ldr	r1, [r7, #0]
 8009254:	6878      	ldr	r0, [r7, #4]
 8009256:	f000 f9dc 	bl	8009612 <USBD_CtlError>
        err++;
 800925a:	7afb      	ldrb	r3, [r7, #11]
 800925c:	3301      	adds	r3, #1
 800925e:	72fb      	strb	r3, [r7, #11]
      break;
 8009260:	e007      	b.n	8009272 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8009262:	6839      	ldr	r1, [r7, #0]
 8009264:	6878      	ldr	r0, [r7, #4]
 8009266:	f000 f9d4 	bl	8009612 <USBD_CtlError>
      err++;
 800926a:	7afb      	ldrb	r3, [r7, #11]
 800926c:	3301      	adds	r3, #1
 800926e:	72fb      	strb	r3, [r7, #11]
      break;
 8009270:	bf00      	nop
  }

  if (err != 0U)
 8009272:	7afb      	ldrb	r3, [r7, #11]
 8009274:	2b00      	cmp	r3, #0
 8009276:	d11c      	bne.n	80092b2 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8009278:	893b      	ldrh	r3, [r7, #8]
 800927a:	2b00      	cmp	r3, #0
 800927c:	d011      	beq.n	80092a2 <USBD_GetDescriptor+0x2b6>
 800927e:	683b      	ldr	r3, [r7, #0]
 8009280:	88db      	ldrh	r3, [r3, #6]
 8009282:	2b00      	cmp	r3, #0
 8009284:	d00d      	beq.n	80092a2 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8009286:	683b      	ldr	r3, [r7, #0]
 8009288:	88da      	ldrh	r2, [r3, #6]
 800928a:	893b      	ldrh	r3, [r7, #8]
 800928c:	4293      	cmp	r3, r2
 800928e:	bf28      	it	cs
 8009290:	4613      	movcs	r3, r2
 8009292:	b29b      	uxth	r3, r3
 8009294:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8009296:	893b      	ldrh	r3, [r7, #8]
 8009298:	461a      	mov	r2, r3
 800929a:	68f9      	ldr	r1, [r7, #12]
 800929c:	6878      	ldr	r0, [r7, #4]
 800929e:	f000 fa22 	bl	80096e6 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 80092a2:	683b      	ldr	r3, [r7, #0]
 80092a4:	88db      	ldrh	r3, [r3, #6]
 80092a6:	2b00      	cmp	r3, #0
 80092a8:	d104      	bne.n	80092b4 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 80092aa:	6878      	ldr	r0, [r7, #4]
 80092ac:	f000 fa79 	bl	80097a2 <USBD_CtlSendStatus>
 80092b0:	e000      	b.n	80092b4 <USBD_GetDescriptor+0x2c8>
    return;
 80092b2:	bf00      	nop
    }
  }
}
 80092b4:	3710      	adds	r7, #16
 80092b6:	46bd      	mov	sp, r7
 80092b8:	bd80      	pop	{r7, pc}
 80092ba:	bf00      	nop

080092bc <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80092bc:	b580      	push	{r7, lr}
 80092be:	b084      	sub	sp, #16
 80092c0:	af00      	add	r7, sp, #0
 80092c2:	6078      	str	r0, [r7, #4]
 80092c4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80092c6:	683b      	ldr	r3, [r7, #0]
 80092c8:	889b      	ldrh	r3, [r3, #4]
 80092ca:	2b00      	cmp	r3, #0
 80092cc:	d130      	bne.n	8009330 <USBD_SetAddress+0x74>
 80092ce:	683b      	ldr	r3, [r7, #0]
 80092d0:	88db      	ldrh	r3, [r3, #6]
 80092d2:	2b00      	cmp	r3, #0
 80092d4:	d12c      	bne.n	8009330 <USBD_SetAddress+0x74>
 80092d6:	683b      	ldr	r3, [r7, #0]
 80092d8:	885b      	ldrh	r3, [r3, #2]
 80092da:	2b7f      	cmp	r3, #127	; 0x7f
 80092dc:	d828      	bhi.n	8009330 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80092de:	683b      	ldr	r3, [r7, #0]
 80092e0:	885b      	ldrh	r3, [r3, #2]
 80092e2:	b2db      	uxtb	r3, r3
 80092e4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80092e8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80092f0:	2b03      	cmp	r3, #3
 80092f2:	d104      	bne.n	80092fe <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 80092f4:	6839      	ldr	r1, [r7, #0]
 80092f6:	6878      	ldr	r0, [r7, #4]
 80092f8:	f000 f98b 	bl	8009612 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80092fc:	e01d      	b.n	800933a <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	7bfa      	ldrb	r2, [r7, #15]
 8009302:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8009306:	7bfb      	ldrb	r3, [r7, #15]
 8009308:	4619      	mov	r1, r3
 800930a:	6878      	ldr	r0, [r7, #4]
 800930c:	f000 fe48 	bl	8009fa0 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8009310:	6878      	ldr	r0, [r7, #4]
 8009312:	f000 fa46 	bl	80097a2 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8009316:	7bfb      	ldrb	r3, [r7, #15]
 8009318:	2b00      	cmp	r3, #0
 800931a:	d004      	beq.n	8009326 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	2202      	movs	r2, #2
 8009320:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009324:	e009      	b.n	800933a <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	2201      	movs	r2, #1
 800932a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800932e:	e004      	b.n	800933a <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8009330:	6839      	ldr	r1, [r7, #0]
 8009332:	6878      	ldr	r0, [r7, #4]
 8009334:	f000 f96d 	bl	8009612 <USBD_CtlError>
  }
}
 8009338:	bf00      	nop
 800933a:	bf00      	nop
 800933c:	3710      	adds	r7, #16
 800933e:	46bd      	mov	sp, r7
 8009340:	bd80      	pop	{r7, pc}
	...

08009344 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009344:	b580      	push	{r7, lr}
 8009346:	b082      	sub	sp, #8
 8009348:	af00      	add	r7, sp, #0
 800934a:	6078      	str	r0, [r7, #4]
 800934c:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800934e:	683b      	ldr	r3, [r7, #0]
 8009350:	885b      	ldrh	r3, [r3, #2]
 8009352:	b2da      	uxtb	r2, r3
 8009354:	4b41      	ldr	r3, [pc, #260]	; (800945c <USBD_SetConfig+0x118>)
 8009356:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8009358:	4b40      	ldr	r3, [pc, #256]	; (800945c <USBD_SetConfig+0x118>)
 800935a:	781b      	ldrb	r3, [r3, #0]
 800935c:	2b01      	cmp	r3, #1
 800935e:	d904      	bls.n	800936a <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8009360:	6839      	ldr	r1, [r7, #0]
 8009362:	6878      	ldr	r0, [r7, #4]
 8009364:	f000 f955 	bl	8009612 <USBD_CtlError>
 8009368:	e075      	b.n	8009456 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009370:	2b02      	cmp	r3, #2
 8009372:	d002      	beq.n	800937a <USBD_SetConfig+0x36>
 8009374:	2b03      	cmp	r3, #3
 8009376:	d023      	beq.n	80093c0 <USBD_SetConfig+0x7c>
 8009378:	e062      	b.n	8009440 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800937a:	4b38      	ldr	r3, [pc, #224]	; (800945c <USBD_SetConfig+0x118>)
 800937c:	781b      	ldrb	r3, [r3, #0]
 800937e:	2b00      	cmp	r3, #0
 8009380:	d01a      	beq.n	80093b8 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8009382:	4b36      	ldr	r3, [pc, #216]	; (800945c <USBD_SetConfig+0x118>)
 8009384:	781b      	ldrb	r3, [r3, #0]
 8009386:	461a      	mov	r2, r3
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	2203      	movs	r2, #3
 8009390:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8009394:	4b31      	ldr	r3, [pc, #196]	; (800945c <USBD_SetConfig+0x118>)
 8009396:	781b      	ldrb	r3, [r3, #0]
 8009398:	4619      	mov	r1, r3
 800939a:	6878      	ldr	r0, [r7, #4]
 800939c:	f7ff f9e7 	bl	800876e <USBD_SetClassConfig>
 80093a0:	4603      	mov	r3, r0
 80093a2:	2b02      	cmp	r3, #2
 80093a4:	d104      	bne.n	80093b0 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 80093a6:	6839      	ldr	r1, [r7, #0]
 80093a8:	6878      	ldr	r0, [r7, #4]
 80093aa:	f000 f932 	bl	8009612 <USBD_CtlError>
            return;
 80093ae:	e052      	b.n	8009456 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 80093b0:	6878      	ldr	r0, [r7, #4]
 80093b2:	f000 f9f6 	bl	80097a2 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 80093b6:	e04e      	b.n	8009456 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80093b8:	6878      	ldr	r0, [r7, #4]
 80093ba:	f000 f9f2 	bl	80097a2 <USBD_CtlSendStatus>
        break;
 80093be:	e04a      	b.n	8009456 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 80093c0:	4b26      	ldr	r3, [pc, #152]	; (800945c <USBD_SetConfig+0x118>)
 80093c2:	781b      	ldrb	r3, [r3, #0]
 80093c4:	2b00      	cmp	r3, #0
 80093c6:	d112      	bne.n	80093ee <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	2202      	movs	r2, #2
 80093cc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 80093d0:	4b22      	ldr	r3, [pc, #136]	; (800945c <USBD_SetConfig+0x118>)
 80093d2:	781b      	ldrb	r3, [r3, #0]
 80093d4:	461a      	mov	r2, r3
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 80093da:	4b20      	ldr	r3, [pc, #128]	; (800945c <USBD_SetConfig+0x118>)
 80093dc:	781b      	ldrb	r3, [r3, #0]
 80093de:	4619      	mov	r1, r3
 80093e0:	6878      	ldr	r0, [r7, #4]
 80093e2:	f7ff f9e3 	bl	80087ac <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 80093e6:	6878      	ldr	r0, [r7, #4]
 80093e8:	f000 f9db 	bl	80097a2 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 80093ec:	e033      	b.n	8009456 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 80093ee:	4b1b      	ldr	r3, [pc, #108]	; (800945c <USBD_SetConfig+0x118>)
 80093f0:	781b      	ldrb	r3, [r3, #0]
 80093f2:	461a      	mov	r2, r3
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	685b      	ldr	r3, [r3, #4]
 80093f8:	429a      	cmp	r2, r3
 80093fa:	d01d      	beq.n	8009438 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	685b      	ldr	r3, [r3, #4]
 8009400:	b2db      	uxtb	r3, r3
 8009402:	4619      	mov	r1, r3
 8009404:	6878      	ldr	r0, [r7, #4]
 8009406:	f7ff f9d1 	bl	80087ac <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800940a:	4b14      	ldr	r3, [pc, #80]	; (800945c <USBD_SetConfig+0x118>)
 800940c:	781b      	ldrb	r3, [r3, #0]
 800940e:	461a      	mov	r2, r3
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8009414:	4b11      	ldr	r3, [pc, #68]	; (800945c <USBD_SetConfig+0x118>)
 8009416:	781b      	ldrb	r3, [r3, #0]
 8009418:	4619      	mov	r1, r3
 800941a:	6878      	ldr	r0, [r7, #4]
 800941c:	f7ff f9a7 	bl	800876e <USBD_SetClassConfig>
 8009420:	4603      	mov	r3, r0
 8009422:	2b02      	cmp	r3, #2
 8009424:	d104      	bne.n	8009430 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8009426:	6839      	ldr	r1, [r7, #0]
 8009428:	6878      	ldr	r0, [r7, #4]
 800942a:	f000 f8f2 	bl	8009612 <USBD_CtlError>
            return;
 800942e:	e012      	b.n	8009456 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8009430:	6878      	ldr	r0, [r7, #4]
 8009432:	f000 f9b6 	bl	80097a2 <USBD_CtlSendStatus>
        break;
 8009436:	e00e      	b.n	8009456 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8009438:	6878      	ldr	r0, [r7, #4]
 800943a:	f000 f9b2 	bl	80097a2 <USBD_CtlSendStatus>
        break;
 800943e:	e00a      	b.n	8009456 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8009440:	6839      	ldr	r1, [r7, #0]
 8009442:	6878      	ldr	r0, [r7, #4]
 8009444:	f000 f8e5 	bl	8009612 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8009448:	4b04      	ldr	r3, [pc, #16]	; (800945c <USBD_SetConfig+0x118>)
 800944a:	781b      	ldrb	r3, [r3, #0]
 800944c:	4619      	mov	r1, r3
 800944e:	6878      	ldr	r0, [r7, #4]
 8009450:	f7ff f9ac 	bl	80087ac <USBD_ClrClassConfig>
        break;
 8009454:	bf00      	nop
    }
  }
}
 8009456:	3708      	adds	r7, #8
 8009458:	46bd      	mov	sp, r7
 800945a:	bd80      	pop	{r7, pc}
 800945c:	200002e4 	.word	0x200002e4

08009460 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009460:	b580      	push	{r7, lr}
 8009462:	b082      	sub	sp, #8
 8009464:	af00      	add	r7, sp, #0
 8009466:	6078      	str	r0, [r7, #4]
 8009468:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800946a:	683b      	ldr	r3, [r7, #0]
 800946c:	88db      	ldrh	r3, [r3, #6]
 800946e:	2b01      	cmp	r3, #1
 8009470:	d004      	beq.n	800947c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8009472:	6839      	ldr	r1, [r7, #0]
 8009474:	6878      	ldr	r0, [r7, #4]
 8009476:	f000 f8cc 	bl	8009612 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800947a:	e022      	b.n	80094c2 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009482:	2b02      	cmp	r3, #2
 8009484:	dc02      	bgt.n	800948c <USBD_GetConfig+0x2c>
 8009486:	2b00      	cmp	r3, #0
 8009488:	dc03      	bgt.n	8009492 <USBD_GetConfig+0x32>
 800948a:	e015      	b.n	80094b8 <USBD_GetConfig+0x58>
 800948c:	2b03      	cmp	r3, #3
 800948e:	d00b      	beq.n	80094a8 <USBD_GetConfig+0x48>
 8009490:	e012      	b.n	80094b8 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	2200      	movs	r2, #0
 8009496:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	3308      	adds	r3, #8
 800949c:	2201      	movs	r2, #1
 800949e:	4619      	mov	r1, r3
 80094a0:	6878      	ldr	r0, [r7, #4]
 80094a2:	f000 f920 	bl	80096e6 <USBD_CtlSendData>
        break;
 80094a6:	e00c      	b.n	80094c2 <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	3304      	adds	r3, #4
 80094ac:	2201      	movs	r2, #1
 80094ae:	4619      	mov	r1, r3
 80094b0:	6878      	ldr	r0, [r7, #4]
 80094b2:	f000 f918 	bl	80096e6 <USBD_CtlSendData>
        break;
 80094b6:	e004      	b.n	80094c2 <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 80094b8:	6839      	ldr	r1, [r7, #0]
 80094ba:	6878      	ldr	r0, [r7, #4]
 80094bc:	f000 f8a9 	bl	8009612 <USBD_CtlError>
        break;
 80094c0:	bf00      	nop
}
 80094c2:	bf00      	nop
 80094c4:	3708      	adds	r7, #8
 80094c6:	46bd      	mov	sp, r7
 80094c8:	bd80      	pop	{r7, pc}

080094ca <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80094ca:	b580      	push	{r7, lr}
 80094cc:	b082      	sub	sp, #8
 80094ce:	af00      	add	r7, sp, #0
 80094d0:	6078      	str	r0, [r7, #4]
 80094d2:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80094da:	3b01      	subs	r3, #1
 80094dc:	2b02      	cmp	r3, #2
 80094de:	d81e      	bhi.n	800951e <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80094e0:	683b      	ldr	r3, [r7, #0]
 80094e2:	88db      	ldrh	r3, [r3, #6]
 80094e4:	2b02      	cmp	r3, #2
 80094e6:	d004      	beq.n	80094f2 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 80094e8:	6839      	ldr	r1, [r7, #0]
 80094ea:	6878      	ldr	r0, [r7, #4]
 80094ec:	f000 f891 	bl	8009612 <USBD_CtlError>
        break;
 80094f0:	e01a      	b.n	8009528 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	2201      	movs	r2, #1
 80094f6:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80094fe:	2b00      	cmp	r3, #0
 8009500:	d005      	beq.n	800950e <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	68db      	ldr	r3, [r3, #12]
 8009506:	f043 0202 	orr.w	r2, r3, #2
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	330c      	adds	r3, #12
 8009512:	2202      	movs	r2, #2
 8009514:	4619      	mov	r1, r3
 8009516:	6878      	ldr	r0, [r7, #4]
 8009518:	f000 f8e5 	bl	80096e6 <USBD_CtlSendData>
      break;
 800951c:	e004      	b.n	8009528 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 800951e:	6839      	ldr	r1, [r7, #0]
 8009520:	6878      	ldr	r0, [r7, #4]
 8009522:	f000 f876 	bl	8009612 <USBD_CtlError>
      break;
 8009526:	bf00      	nop
  }
}
 8009528:	bf00      	nop
 800952a:	3708      	adds	r7, #8
 800952c:	46bd      	mov	sp, r7
 800952e:	bd80      	pop	{r7, pc}

08009530 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8009530:	b580      	push	{r7, lr}
 8009532:	b082      	sub	sp, #8
 8009534:	af00      	add	r7, sp, #0
 8009536:	6078      	str	r0, [r7, #4]
 8009538:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800953a:	683b      	ldr	r3, [r7, #0]
 800953c:	885b      	ldrh	r3, [r3, #2]
 800953e:	2b01      	cmp	r3, #1
 8009540:	d106      	bne.n	8009550 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	2201      	movs	r2, #1
 8009546:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 800954a:	6878      	ldr	r0, [r7, #4]
 800954c:	f000 f929 	bl	80097a2 <USBD_CtlSendStatus>
  }
}
 8009550:	bf00      	nop
 8009552:	3708      	adds	r7, #8
 8009554:	46bd      	mov	sp, r7
 8009556:	bd80      	pop	{r7, pc}

08009558 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8009558:	b580      	push	{r7, lr}
 800955a:	b082      	sub	sp, #8
 800955c:	af00      	add	r7, sp, #0
 800955e:	6078      	str	r0, [r7, #4]
 8009560:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009568:	3b01      	subs	r3, #1
 800956a:	2b02      	cmp	r3, #2
 800956c:	d80b      	bhi.n	8009586 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800956e:	683b      	ldr	r3, [r7, #0]
 8009570:	885b      	ldrh	r3, [r3, #2]
 8009572:	2b01      	cmp	r3, #1
 8009574:	d10c      	bne.n	8009590 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	2200      	movs	r2, #0
 800957a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 800957e:	6878      	ldr	r0, [r7, #4]
 8009580:	f000 f90f 	bl	80097a2 <USBD_CtlSendStatus>
      }
      break;
 8009584:	e004      	b.n	8009590 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8009586:	6839      	ldr	r1, [r7, #0]
 8009588:	6878      	ldr	r0, [r7, #4]
 800958a:	f000 f842 	bl	8009612 <USBD_CtlError>
      break;
 800958e:	e000      	b.n	8009592 <USBD_ClrFeature+0x3a>
      break;
 8009590:	bf00      	nop
  }
}
 8009592:	bf00      	nop
 8009594:	3708      	adds	r7, #8
 8009596:	46bd      	mov	sp, r7
 8009598:	bd80      	pop	{r7, pc}

0800959a <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800959a:	b480      	push	{r7}
 800959c:	b083      	sub	sp, #12
 800959e:	af00      	add	r7, sp, #0
 80095a0:	6078      	str	r0, [r7, #4]
 80095a2:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 80095a4:	683b      	ldr	r3, [r7, #0]
 80095a6:	781a      	ldrb	r2, [r3, #0]
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 80095ac:	683b      	ldr	r3, [r7, #0]
 80095ae:	785a      	ldrb	r2, [r3, #1]
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 80095b4:	683b      	ldr	r3, [r7, #0]
 80095b6:	3302      	adds	r3, #2
 80095b8:	781b      	ldrb	r3, [r3, #0]
 80095ba:	b29a      	uxth	r2, r3
 80095bc:	683b      	ldr	r3, [r7, #0]
 80095be:	3303      	adds	r3, #3
 80095c0:	781b      	ldrb	r3, [r3, #0]
 80095c2:	b29b      	uxth	r3, r3
 80095c4:	021b      	lsls	r3, r3, #8
 80095c6:	b29b      	uxth	r3, r3
 80095c8:	4413      	add	r3, r2
 80095ca:	b29a      	uxth	r2, r3
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 80095d0:	683b      	ldr	r3, [r7, #0]
 80095d2:	3304      	adds	r3, #4
 80095d4:	781b      	ldrb	r3, [r3, #0]
 80095d6:	b29a      	uxth	r2, r3
 80095d8:	683b      	ldr	r3, [r7, #0]
 80095da:	3305      	adds	r3, #5
 80095dc:	781b      	ldrb	r3, [r3, #0]
 80095de:	b29b      	uxth	r3, r3
 80095e0:	021b      	lsls	r3, r3, #8
 80095e2:	b29b      	uxth	r3, r3
 80095e4:	4413      	add	r3, r2
 80095e6:	b29a      	uxth	r2, r3
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 80095ec:	683b      	ldr	r3, [r7, #0]
 80095ee:	3306      	adds	r3, #6
 80095f0:	781b      	ldrb	r3, [r3, #0]
 80095f2:	b29a      	uxth	r2, r3
 80095f4:	683b      	ldr	r3, [r7, #0]
 80095f6:	3307      	adds	r3, #7
 80095f8:	781b      	ldrb	r3, [r3, #0]
 80095fa:	b29b      	uxth	r3, r3
 80095fc:	021b      	lsls	r3, r3, #8
 80095fe:	b29b      	uxth	r3, r3
 8009600:	4413      	add	r3, r2
 8009602:	b29a      	uxth	r2, r3
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	80da      	strh	r2, [r3, #6]

}
 8009608:	bf00      	nop
 800960a:	370c      	adds	r7, #12
 800960c:	46bd      	mov	sp, r7
 800960e:	bc80      	pop	{r7}
 8009610:	4770      	bx	lr

08009612 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8009612:	b580      	push	{r7, lr}
 8009614:	b082      	sub	sp, #8
 8009616:	af00      	add	r7, sp, #0
 8009618:	6078      	str	r0, [r7, #4]
 800961a:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800961c:	2180      	movs	r1, #128	; 0x80
 800961e:	6878      	ldr	r0, [r7, #4]
 8009620:	f000 fc54 	bl	8009ecc <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8009624:	2100      	movs	r1, #0
 8009626:	6878      	ldr	r0, [r7, #4]
 8009628:	f000 fc50 	bl	8009ecc <USBD_LL_StallEP>
}
 800962c:	bf00      	nop
 800962e:	3708      	adds	r7, #8
 8009630:	46bd      	mov	sp, r7
 8009632:	bd80      	pop	{r7, pc}

08009634 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8009634:	b580      	push	{r7, lr}
 8009636:	b086      	sub	sp, #24
 8009638:	af00      	add	r7, sp, #0
 800963a:	60f8      	str	r0, [r7, #12]
 800963c:	60b9      	str	r1, [r7, #8]
 800963e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8009640:	2300      	movs	r3, #0
 8009642:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8009644:	68fb      	ldr	r3, [r7, #12]
 8009646:	2b00      	cmp	r3, #0
 8009648:	d032      	beq.n	80096b0 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800964a:	68f8      	ldr	r0, [r7, #12]
 800964c:	f000 f834 	bl	80096b8 <USBD_GetLen>
 8009650:	4603      	mov	r3, r0
 8009652:	3301      	adds	r3, #1
 8009654:	b29b      	uxth	r3, r3
 8009656:	005b      	lsls	r3, r3, #1
 8009658:	b29a      	uxth	r2, r3
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800965e:	7dfb      	ldrb	r3, [r7, #23]
 8009660:	1c5a      	adds	r2, r3, #1
 8009662:	75fa      	strb	r2, [r7, #23]
 8009664:	461a      	mov	r2, r3
 8009666:	68bb      	ldr	r3, [r7, #8]
 8009668:	4413      	add	r3, r2
 800966a:	687a      	ldr	r2, [r7, #4]
 800966c:	7812      	ldrb	r2, [r2, #0]
 800966e:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8009670:	7dfb      	ldrb	r3, [r7, #23]
 8009672:	1c5a      	adds	r2, r3, #1
 8009674:	75fa      	strb	r2, [r7, #23]
 8009676:	461a      	mov	r2, r3
 8009678:	68bb      	ldr	r3, [r7, #8]
 800967a:	4413      	add	r3, r2
 800967c:	2203      	movs	r2, #3
 800967e:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8009680:	e012      	b.n	80096a8 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8009682:	68fb      	ldr	r3, [r7, #12]
 8009684:	1c5a      	adds	r2, r3, #1
 8009686:	60fa      	str	r2, [r7, #12]
 8009688:	7dfa      	ldrb	r2, [r7, #23]
 800968a:	1c51      	adds	r1, r2, #1
 800968c:	75f9      	strb	r1, [r7, #23]
 800968e:	4611      	mov	r1, r2
 8009690:	68ba      	ldr	r2, [r7, #8]
 8009692:	440a      	add	r2, r1
 8009694:	781b      	ldrb	r3, [r3, #0]
 8009696:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8009698:	7dfb      	ldrb	r3, [r7, #23]
 800969a:	1c5a      	adds	r2, r3, #1
 800969c:	75fa      	strb	r2, [r7, #23]
 800969e:	461a      	mov	r2, r3
 80096a0:	68bb      	ldr	r3, [r7, #8]
 80096a2:	4413      	add	r3, r2
 80096a4:	2200      	movs	r2, #0
 80096a6:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 80096a8:	68fb      	ldr	r3, [r7, #12]
 80096aa:	781b      	ldrb	r3, [r3, #0]
 80096ac:	2b00      	cmp	r3, #0
 80096ae:	d1e8      	bne.n	8009682 <USBD_GetString+0x4e>
    }
  }
}
 80096b0:	bf00      	nop
 80096b2:	3718      	adds	r7, #24
 80096b4:	46bd      	mov	sp, r7
 80096b6:	bd80      	pop	{r7, pc}

080096b8 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80096b8:	b480      	push	{r7}
 80096ba:	b085      	sub	sp, #20
 80096bc:	af00      	add	r7, sp, #0
 80096be:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80096c0:	2300      	movs	r3, #0
 80096c2:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 80096c4:	e005      	b.n	80096d2 <USBD_GetLen+0x1a>
  {
    len++;
 80096c6:	7bfb      	ldrb	r3, [r7, #15]
 80096c8:	3301      	adds	r3, #1
 80096ca:	73fb      	strb	r3, [r7, #15]
    buf++;
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	3301      	adds	r3, #1
 80096d0:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	781b      	ldrb	r3, [r3, #0]
 80096d6:	2b00      	cmp	r3, #0
 80096d8:	d1f5      	bne.n	80096c6 <USBD_GetLen+0xe>
  }

  return len;
 80096da:	7bfb      	ldrb	r3, [r7, #15]
}
 80096dc:	4618      	mov	r0, r3
 80096de:	3714      	adds	r7, #20
 80096e0:	46bd      	mov	sp, r7
 80096e2:	bc80      	pop	{r7}
 80096e4:	4770      	bx	lr

080096e6 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 80096e6:	b580      	push	{r7, lr}
 80096e8:	b084      	sub	sp, #16
 80096ea:	af00      	add	r7, sp, #0
 80096ec:	60f8      	str	r0, [r7, #12]
 80096ee:	60b9      	str	r1, [r7, #8]
 80096f0:	4613      	mov	r3, r2
 80096f2:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80096f4:	68fb      	ldr	r3, [r7, #12]
 80096f6:	2202      	movs	r2, #2
 80096f8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80096fc:	88fa      	ldrh	r2, [r7, #6]
 80096fe:	68fb      	ldr	r3, [r7, #12]
 8009700:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8009702:	88fa      	ldrh	r2, [r7, #6]
 8009704:	68fb      	ldr	r3, [r7, #12]
 8009706:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009708:	88fb      	ldrh	r3, [r7, #6]
 800970a:	68ba      	ldr	r2, [r7, #8]
 800970c:	2100      	movs	r1, #0
 800970e:	68f8      	ldr	r0, [r7, #12]
 8009710:	f000 fc65 	bl	8009fde <USBD_LL_Transmit>

  return USBD_OK;
 8009714:	2300      	movs	r3, #0
}
 8009716:	4618      	mov	r0, r3
 8009718:	3710      	adds	r7, #16
 800971a:	46bd      	mov	sp, r7
 800971c:	bd80      	pop	{r7, pc}

0800971e <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800971e:	b580      	push	{r7, lr}
 8009720:	b084      	sub	sp, #16
 8009722:	af00      	add	r7, sp, #0
 8009724:	60f8      	str	r0, [r7, #12]
 8009726:	60b9      	str	r1, [r7, #8]
 8009728:	4613      	mov	r3, r2
 800972a:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800972c:	88fb      	ldrh	r3, [r7, #6]
 800972e:	68ba      	ldr	r2, [r7, #8]
 8009730:	2100      	movs	r1, #0
 8009732:	68f8      	ldr	r0, [r7, #12]
 8009734:	f000 fc53 	bl	8009fde <USBD_LL_Transmit>

  return USBD_OK;
 8009738:	2300      	movs	r3, #0
}
 800973a:	4618      	mov	r0, r3
 800973c:	3710      	adds	r7, #16
 800973e:	46bd      	mov	sp, r7
 8009740:	bd80      	pop	{r7, pc}

08009742 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8009742:	b580      	push	{r7, lr}
 8009744:	b084      	sub	sp, #16
 8009746:	af00      	add	r7, sp, #0
 8009748:	60f8      	str	r0, [r7, #12]
 800974a:	60b9      	str	r1, [r7, #8]
 800974c:	4613      	mov	r3, r2
 800974e:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8009750:	68fb      	ldr	r3, [r7, #12]
 8009752:	2203      	movs	r2, #3
 8009754:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8009758:	88fa      	ldrh	r2, [r7, #6]
 800975a:	68fb      	ldr	r3, [r7, #12]
 800975c:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 8009760:	88fa      	ldrh	r2, [r7, #6]
 8009762:	68fb      	ldr	r3, [r7, #12]
 8009764:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009768:	88fb      	ldrh	r3, [r7, #6]
 800976a:	68ba      	ldr	r2, [r7, #8]
 800976c:	2100      	movs	r1, #0
 800976e:	68f8      	ldr	r0, [r7, #12]
 8009770:	f000 fc58 	bl	800a024 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009774:	2300      	movs	r3, #0
}
 8009776:	4618      	mov	r0, r3
 8009778:	3710      	adds	r7, #16
 800977a:	46bd      	mov	sp, r7
 800977c:	bd80      	pop	{r7, pc}

0800977e <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800977e:	b580      	push	{r7, lr}
 8009780:	b084      	sub	sp, #16
 8009782:	af00      	add	r7, sp, #0
 8009784:	60f8      	str	r0, [r7, #12]
 8009786:	60b9      	str	r1, [r7, #8]
 8009788:	4613      	mov	r3, r2
 800978a:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800978c:	88fb      	ldrh	r3, [r7, #6]
 800978e:	68ba      	ldr	r2, [r7, #8]
 8009790:	2100      	movs	r1, #0
 8009792:	68f8      	ldr	r0, [r7, #12]
 8009794:	f000 fc46 	bl	800a024 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009798:	2300      	movs	r3, #0
}
 800979a:	4618      	mov	r0, r3
 800979c:	3710      	adds	r7, #16
 800979e:	46bd      	mov	sp, r7
 80097a0:	bd80      	pop	{r7, pc}

080097a2 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80097a2:	b580      	push	{r7, lr}
 80097a4:	b082      	sub	sp, #8
 80097a6:	af00      	add	r7, sp, #0
 80097a8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	2204      	movs	r2, #4
 80097ae:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80097b2:	2300      	movs	r3, #0
 80097b4:	2200      	movs	r2, #0
 80097b6:	2100      	movs	r1, #0
 80097b8:	6878      	ldr	r0, [r7, #4]
 80097ba:	f000 fc10 	bl	8009fde <USBD_LL_Transmit>

  return USBD_OK;
 80097be:	2300      	movs	r3, #0
}
 80097c0:	4618      	mov	r0, r3
 80097c2:	3708      	adds	r7, #8
 80097c4:	46bd      	mov	sp, r7
 80097c6:	bd80      	pop	{r7, pc}

080097c8 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80097c8:	b580      	push	{r7, lr}
 80097ca:	b082      	sub	sp, #8
 80097cc:	af00      	add	r7, sp, #0
 80097ce:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	2205      	movs	r2, #5
 80097d4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80097d8:	2300      	movs	r3, #0
 80097da:	2200      	movs	r2, #0
 80097dc:	2100      	movs	r1, #0
 80097de:	6878      	ldr	r0, [r7, #4]
 80097e0:	f000 fc20 	bl	800a024 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80097e4:	2300      	movs	r3, #0
}
 80097e6:	4618      	mov	r0, r3
 80097e8:	3708      	adds	r7, #8
 80097ea:	46bd      	mov	sp, r7
 80097ec:	bd80      	pop	{r7, pc}
	...

080097f0 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80097f0:	b580      	push	{r7, lr}
 80097f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80097f4:	2200      	movs	r2, #0
 80097f6:	4912      	ldr	r1, [pc, #72]	; (8009840 <MX_USB_DEVICE_Init+0x50>)
 80097f8:	4812      	ldr	r0, [pc, #72]	; (8009844 <MX_USB_DEVICE_Init+0x54>)
 80097fa:	f7fe ff5e 	bl	80086ba <USBD_Init>
 80097fe:	4603      	mov	r3, r0
 8009800:	2b00      	cmp	r3, #0
 8009802:	d001      	beq.n	8009808 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8009804:	f7f7 fd10 	bl	8001228 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8009808:	490f      	ldr	r1, [pc, #60]	; (8009848 <MX_USB_DEVICE_Init+0x58>)
 800980a:	480e      	ldr	r0, [pc, #56]	; (8009844 <MX_USB_DEVICE_Init+0x54>)
 800980c:	f7fe ff80 	bl	8008710 <USBD_RegisterClass>
 8009810:	4603      	mov	r3, r0
 8009812:	2b00      	cmp	r3, #0
 8009814:	d001      	beq.n	800981a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8009816:	f7f7 fd07 	bl	8001228 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800981a:	490c      	ldr	r1, [pc, #48]	; (800984c <MX_USB_DEVICE_Init+0x5c>)
 800981c:	4809      	ldr	r0, [pc, #36]	; (8009844 <MX_USB_DEVICE_Init+0x54>)
 800981e:	f7fe feb1 	bl	8008584 <USBD_CDC_RegisterInterface>
 8009822:	4603      	mov	r3, r0
 8009824:	2b00      	cmp	r3, #0
 8009826:	d001      	beq.n	800982c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8009828:	f7f7 fcfe 	bl	8001228 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800982c:	4805      	ldr	r0, [pc, #20]	; (8009844 <MX_USB_DEVICE_Init+0x54>)
 800982e:	f7fe ff88 	bl	8008742 <USBD_Start>
 8009832:	4603      	mov	r3, r0
 8009834:	2b00      	cmp	r3, #0
 8009836:	d001      	beq.n	800983c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8009838:	f7f7 fcf6 	bl	8001228 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800983c:	bf00      	nop
 800983e:	bd80      	pop	{r7, pc}
 8009840:	2000012c 	.word	0x2000012c
 8009844:	200002e8 	.word	0x200002e8
 8009848:	20000018 	.word	0x20000018
 800984c:	2000011c 	.word	0x2000011c

08009850 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8009850:	b580      	push	{r7, lr}
 8009852:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8009854:	2200      	movs	r2, #0
 8009856:	4905      	ldr	r1, [pc, #20]	; (800986c <CDC_Init_FS+0x1c>)
 8009858:	4805      	ldr	r0, [pc, #20]	; (8009870 <CDC_Init_FS+0x20>)
 800985a:	f7fe fea9 	bl	80085b0 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800985e:	4905      	ldr	r1, [pc, #20]	; (8009874 <CDC_Init_FS+0x24>)
 8009860:	4803      	ldr	r0, [pc, #12]	; (8009870 <CDC_Init_FS+0x20>)
 8009862:	f7fe febe 	bl	80085e2 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8009866:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8009868:	4618      	mov	r0, r3
 800986a:	bd80      	pop	{r7, pc}
 800986c:	20000994 	.word	0x20000994
 8009870:	200002e8 	.word	0x200002e8
 8009874:	200005ac 	.word	0x200005ac

08009878 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8009878:	b480      	push	{r7}
 800987a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800987c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800987e:	4618      	mov	r0, r3
 8009880:	46bd      	mov	sp, r7
 8009882:	bc80      	pop	{r7}
 8009884:	4770      	bx	lr
	...

08009888 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8009888:	b480      	push	{r7}
 800988a:	b083      	sub	sp, #12
 800988c:	af00      	add	r7, sp, #0
 800988e:	4603      	mov	r3, r0
 8009890:	6039      	str	r1, [r7, #0]
 8009892:	71fb      	strb	r3, [r7, #7]
 8009894:	4613      	mov	r3, r2
 8009896:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8009898:	79fb      	ldrb	r3, [r7, #7]
 800989a:	2b23      	cmp	r3, #35	; 0x23
 800989c:	d84a      	bhi.n	8009934 <CDC_Control_FS+0xac>
 800989e:	a201      	add	r2, pc, #4	; (adr r2, 80098a4 <CDC_Control_FS+0x1c>)
 80098a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80098a4:	08009935 	.word	0x08009935
 80098a8:	08009935 	.word	0x08009935
 80098ac:	08009935 	.word	0x08009935
 80098b0:	08009935 	.word	0x08009935
 80098b4:	08009935 	.word	0x08009935
 80098b8:	08009935 	.word	0x08009935
 80098bc:	08009935 	.word	0x08009935
 80098c0:	08009935 	.word	0x08009935
 80098c4:	08009935 	.word	0x08009935
 80098c8:	08009935 	.word	0x08009935
 80098cc:	08009935 	.word	0x08009935
 80098d0:	08009935 	.word	0x08009935
 80098d4:	08009935 	.word	0x08009935
 80098d8:	08009935 	.word	0x08009935
 80098dc:	08009935 	.word	0x08009935
 80098e0:	08009935 	.word	0x08009935
 80098e4:	08009935 	.word	0x08009935
 80098e8:	08009935 	.word	0x08009935
 80098ec:	08009935 	.word	0x08009935
 80098f0:	08009935 	.word	0x08009935
 80098f4:	08009935 	.word	0x08009935
 80098f8:	08009935 	.word	0x08009935
 80098fc:	08009935 	.word	0x08009935
 8009900:	08009935 	.word	0x08009935
 8009904:	08009935 	.word	0x08009935
 8009908:	08009935 	.word	0x08009935
 800990c:	08009935 	.word	0x08009935
 8009910:	08009935 	.word	0x08009935
 8009914:	08009935 	.word	0x08009935
 8009918:	08009935 	.word	0x08009935
 800991c:	08009935 	.word	0x08009935
 8009920:	08009935 	.word	0x08009935
 8009924:	08009935 	.word	0x08009935
 8009928:	08009935 	.word	0x08009935
 800992c:	08009935 	.word	0x08009935
 8009930:	08009935 	.word	0x08009935
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8009934:	bf00      	nop
  }

  return (USBD_OK);
 8009936:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8009938:	4618      	mov	r0, r3
 800993a:	370c      	adds	r7, #12
 800993c:	46bd      	mov	sp, r7
 800993e:	bc80      	pop	{r7}
 8009940:	4770      	bx	lr
 8009942:	bf00      	nop

08009944 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8009944:	b580      	push	{r7, lr}
 8009946:	b082      	sub	sp, #8
 8009948:	af00      	add	r7, sp, #0
 800994a:	6078      	str	r0, [r7, #4]
 800994c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800994e:	6879      	ldr	r1, [r7, #4]
 8009950:	4805      	ldr	r0, [pc, #20]	; (8009968 <CDC_Receive_FS+0x24>)
 8009952:	f7fe fe46 	bl	80085e2 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8009956:	4804      	ldr	r0, [pc, #16]	; (8009968 <CDC_Receive_FS+0x24>)
 8009958:	f7fe fe85 	bl	8008666 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800995c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800995e:	4618      	mov	r0, r3
 8009960:	3708      	adds	r7, #8
 8009962:	46bd      	mov	sp, r7
 8009964:	bd80      	pop	{r7, pc}
 8009966:	bf00      	nop
 8009968:	200002e8 	.word	0x200002e8

0800996c <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800996c:	b580      	push	{r7, lr}
 800996e:	b084      	sub	sp, #16
 8009970:	af00      	add	r7, sp, #0
 8009972:	6078      	str	r0, [r7, #4]
 8009974:	460b      	mov	r3, r1
 8009976:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8009978:	2300      	movs	r3, #0
 800997a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800997c:	4b0d      	ldr	r3, [pc, #52]	; (80099b4 <CDC_Transmit_FS+0x48>)
 800997e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009982:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8009984:	68bb      	ldr	r3, [r7, #8]
 8009986:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800998a:	2b00      	cmp	r3, #0
 800998c:	d001      	beq.n	8009992 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800998e:	2301      	movs	r3, #1
 8009990:	e00b      	b.n	80099aa <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8009992:	887b      	ldrh	r3, [r7, #2]
 8009994:	461a      	mov	r2, r3
 8009996:	6879      	ldr	r1, [r7, #4]
 8009998:	4806      	ldr	r0, [pc, #24]	; (80099b4 <CDC_Transmit_FS+0x48>)
 800999a:	f7fe fe09 	bl	80085b0 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800999e:	4805      	ldr	r0, [pc, #20]	; (80099b4 <CDC_Transmit_FS+0x48>)
 80099a0:	f7fe fe32 	bl	8008608 <USBD_CDC_TransmitPacket>
 80099a4:	4603      	mov	r3, r0
 80099a6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 80099a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80099aa:	4618      	mov	r0, r3
 80099ac:	3710      	adds	r7, #16
 80099ae:	46bd      	mov	sp, r7
 80099b0:	bd80      	pop	{r7, pc}
 80099b2:	bf00      	nop
 80099b4:	200002e8 	.word	0x200002e8

080099b8 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80099b8:	b480      	push	{r7}
 80099ba:	b083      	sub	sp, #12
 80099bc:	af00      	add	r7, sp, #0
 80099be:	4603      	mov	r3, r0
 80099c0:	6039      	str	r1, [r7, #0]
 80099c2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80099c4:	683b      	ldr	r3, [r7, #0]
 80099c6:	2212      	movs	r2, #18
 80099c8:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80099ca:	4b03      	ldr	r3, [pc, #12]	; (80099d8 <USBD_FS_DeviceDescriptor+0x20>)
}
 80099cc:	4618      	mov	r0, r3
 80099ce:	370c      	adds	r7, #12
 80099d0:	46bd      	mov	sp, r7
 80099d2:	bc80      	pop	{r7}
 80099d4:	4770      	bx	lr
 80099d6:	bf00      	nop
 80099d8:	20000148 	.word	0x20000148

080099dc <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80099dc:	b480      	push	{r7}
 80099de:	b083      	sub	sp, #12
 80099e0:	af00      	add	r7, sp, #0
 80099e2:	4603      	mov	r3, r0
 80099e4:	6039      	str	r1, [r7, #0]
 80099e6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80099e8:	683b      	ldr	r3, [r7, #0]
 80099ea:	2204      	movs	r2, #4
 80099ec:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80099ee:	4b03      	ldr	r3, [pc, #12]	; (80099fc <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80099f0:	4618      	mov	r0, r3
 80099f2:	370c      	adds	r7, #12
 80099f4:	46bd      	mov	sp, r7
 80099f6:	bc80      	pop	{r7}
 80099f8:	4770      	bx	lr
 80099fa:	bf00      	nop
 80099fc:	2000015c 	.word	0x2000015c

08009a00 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009a00:	b580      	push	{r7, lr}
 8009a02:	b082      	sub	sp, #8
 8009a04:	af00      	add	r7, sp, #0
 8009a06:	4603      	mov	r3, r0
 8009a08:	6039      	str	r1, [r7, #0]
 8009a0a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009a0c:	79fb      	ldrb	r3, [r7, #7]
 8009a0e:	2b00      	cmp	r3, #0
 8009a10:	d105      	bne.n	8009a1e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009a12:	683a      	ldr	r2, [r7, #0]
 8009a14:	4907      	ldr	r1, [pc, #28]	; (8009a34 <USBD_FS_ProductStrDescriptor+0x34>)
 8009a16:	4808      	ldr	r0, [pc, #32]	; (8009a38 <USBD_FS_ProductStrDescriptor+0x38>)
 8009a18:	f7ff fe0c 	bl	8009634 <USBD_GetString>
 8009a1c:	e004      	b.n	8009a28 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009a1e:	683a      	ldr	r2, [r7, #0]
 8009a20:	4904      	ldr	r1, [pc, #16]	; (8009a34 <USBD_FS_ProductStrDescriptor+0x34>)
 8009a22:	4805      	ldr	r0, [pc, #20]	; (8009a38 <USBD_FS_ProductStrDescriptor+0x38>)
 8009a24:	f7ff fe06 	bl	8009634 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009a28:	4b02      	ldr	r3, [pc, #8]	; (8009a34 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8009a2a:	4618      	mov	r0, r3
 8009a2c:	3708      	adds	r7, #8
 8009a2e:	46bd      	mov	sp, r7
 8009a30:	bd80      	pop	{r7, pc}
 8009a32:	bf00      	nop
 8009a34:	20000d7c 	.word	0x20000d7c
 8009a38:	0800a1a8 	.word	0x0800a1a8

08009a3c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009a3c:	b580      	push	{r7, lr}
 8009a3e:	b082      	sub	sp, #8
 8009a40:	af00      	add	r7, sp, #0
 8009a42:	4603      	mov	r3, r0
 8009a44:	6039      	str	r1, [r7, #0]
 8009a46:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8009a48:	683a      	ldr	r2, [r7, #0]
 8009a4a:	4904      	ldr	r1, [pc, #16]	; (8009a5c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8009a4c:	4804      	ldr	r0, [pc, #16]	; (8009a60 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8009a4e:	f7ff fdf1 	bl	8009634 <USBD_GetString>
  return USBD_StrDesc;
 8009a52:	4b02      	ldr	r3, [pc, #8]	; (8009a5c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8009a54:	4618      	mov	r0, r3
 8009a56:	3708      	adds	r7, #8
 8009a58:	46bd      	mov	sp, r7
 8009a5a:	bd80      	pop	{r7, pc}
 8009a5c:	20000d7c 	.word	0x20000d7c
 8009a60:	0800a1c0 	.word	0x0800a1c0

08009a64 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009a64:	b580      	push	{r7, lr}
 8009a66:	b082      	sub	sp, #8
 8009a68:	af00      	add	r7, sp, #0
 8009a6a:	4603      	mov	r3, r0
 8009a6c:	6039      	str	r1, [r7, #0]
 8009a6e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8009a70:	683b      	ldr	r3, [r7, #0]
 8009a72:	221a      	movs	r2, #26
 8009a74:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8009a76:	f000 f843 	bl	8009b00 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8009a7a:	4b02      	ldr	r3, [pc, #8]	; (8009a84 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8009a7c:	4618      	mov	r0, r3
 8009a7e:	3708      	adds	r7, #8
 8009a80:	46bd      	mov	sp, r7
 8009a82:	bd80      	pop	{r7, pc}
 8009a84:	20000160 	.word	0x20000160

08009a88 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009a88:	b580      	push	{r7, lr}
 8009a8a:	b082      	sub	sp, #8
 8009a8c:	af00      	add	r7, sp, #0
 8009a8e:	4603      	mov	r3, r0
 8009a90:	6039      	str	r1, [r7, #0]
 8009a92:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8009a94:	79fb      	ldrb	r3, [r7, #7]
 8009a96:	2b00      	cmp	r3, #0
 8009a98:	d105      	bne.n	8009aa6 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009a9a:	683a      	ldr	r2, [r7, #0]
 8009a9c:	4907      	ldr	r1, [pc, #28]	; (8009abc <USBD_FS_ConfigStrDescriptor+0x34>)
 8009a9e:	4808      	ldr	r0, [pc, #32]	; (8009ac0 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009aa0:	f7ff fdc8 	bl	8009634 <USBD_GetString>
 8009aa4:	e004      	b.n	8009ab0 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009aa6:	683a      	ldr	r2, [r7, #0]
 8009aa8:	4904      	ldr	r1, [pc, #16]	; (8009abc <USBD_FS_ConfigStrDescriptor+0x34>)
 8009aaa:	4805      	ldr	r0, [pc, #20]	; (8009ac0 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009aac:	f7ff fdc2 	bl	8009634 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009ab0:	4b02      	ldr	r3, [pc, #8]	; (8009abc <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8009ab2:	4618      	mov	r0, r3
 8009ab4:	3708      	adds	r7, #8
 8009ab6:	46bd      	mov	sp, r7
 8009ab8:	bd80      	pop	{r7, pc}
 8009aba:	bf00      	nop
 8009abc:	20000d7c 	.word	0x20000d7c
 8009ac0:	0800a1d4 	.word	0x0800a1d4

08009ac4 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009ac4:	b580      	push	{r7, lr}
 8009ac6:	b082      	sub	sp, #8
 8009ac8:	af00      	add	r7, sp, #0
 8009aca:	4603      	mov	r3, r0
 8009acc:	6039      	str	r1, [r7, #0]
 8009ace:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009ad0:	79fb      	ldrb	r3, [r7, #7]
 8009ad2:	2b00      	cmp	r3, #0
 8009ad4:	d105      	bne.n	8009ae2 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009ad6:	683a      	ldr	r2, [r7, #0]
 8009ad8:	4907      	ldr	r1, [pc, #28]	; (8009af8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009ada:	4808      	ldr	r0, [pc, #32]	; (8009afc <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009adc:	f7ff fdaa 	bl	8009634 <USBD_GetString>
 8009ae0:	e004      	b.n	8009aec <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009ae2:	683a      	ldr	r2, [r7, #0]
 8009ae4:	4904      	ldr	r1, [pc, #16]	; (8009af8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009ae6:	4805      	ldr	r0, [pc, #20]	; (8009afc <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009ae8:	f7ff fda4 	bl	8009634 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009aec:	4b02      	ldr	r3, [pc, #8]	; (8009af8 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8009aee:	4618      	mov	r0, r3
 8009af0:	3708      	adds	r7, #8
 8009af2:	46bd      	mov	sp, r7
 8009af4:	bd80      	pop	{r7, pc}
 8009af6:	bf00      	nop
 8009af8:	20000d7c 	.word	0x20000d7c
 8009afc:	0800a1e0 	.word	0x0800a1e0

08009b00 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8009b00:	b580      	push	{r7, lr}
 8009b02:	b084      	sub	sp, #16
 8009b04:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8009b06:	4b0f      	ldr	r3, [pc, #60]	; (8009b44 <Get_SerialNum+0x44>)
 8009b08:	681b      	ldr	r3, [r3, #0]
 8009b0a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8009b0c:	4b0e      	ldr	r3, [pc, #56]	; (8009b48 <Get_SerialNum+0x48>)
 8009b0e:	681b      	ldr	r3, [r3, #0]
 8009b10:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8009b12:	4b0e      	ldr	r3, [pc, #56]	; (8009b4c <Get_SerialNum+0x4c>)
 8009b14:	681b      	ldr	r3, [r3, #0]
 8009b16:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8009b18:	68fa      	ldr	r2, [r7, #12]
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	4413      	add	r3, r2
 8009b1e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8009b20:	68fb      	ldr	r3, [r7, #12]
 8009b22:	2b00      	cmp	r3, #0
 8009b24:	d009      	beq.n	8009b3a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8009b26:	2208      	movs	r2, #8
 8009b28:	4909      	ldr	r1, [pc, #36]	; (8009b50 <Get_SerialNum+0x50>)
 8009b2a:	68f8      	ldr	r0, [r7, #12]
 8009b2c:	f000 f814 	bl	8009b58 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8009b30:	2204      	movs	r2, #4
 8009b32:	4908      	ldr	r1, [pc, #32]	; (8009b54 <Get_SerialNum+0x54>)
 8009b34:	68b8      	ldr	r0, [r7, #8]
 8009b36:	f000 f80f 	bl	8009b58 <IntToUnicode>
  }
}
 8009b3a:	bf00      	nop
 8009b3c:	3710      	adds	r7, #16
 8009b3e:	46bd      	mov	sp, r7
 8009b40:	bd80      	pop	{r7, pc}
 8009b42:	bf00      	nop
 8009b44:	1ffff7e8 	.word	0x1ffff7e8
 8009b48:	1ffff7ec 	.word	0x1ffff7ec
 8009b4c:	1ffff7f0 	.word	0x1ffff7f0
 8009b50:	20000162 	.word	0x20000162
 8009b54:	20000172 	.word	0x20000172

08009b58 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8009b58:	b480      	push	{r7}
 8009b5a:	b087      	sub	sp, #28
 8009b5c:	af00      	add	r7, sp, #0
 8009b5e:	60f8      	str	r0, [r7, #12]
 8009b60:	60b9      	str	r1, [r7, #8]
 8009b62:	4613      	mov	r3, r2
 8009b64:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8009b66:	2300      	movs	r3, #0
 8009b68:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8009b6a:	2300      	movs	r3, #0
 8009b6c:	75fb      	strb	r3, [r7, #23]
 8009b6e:	e027      	b.n	8009bc0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8009b70:	68fb      	ldr	r3, [r7, #12]
 8009b72:	0f1b      	lsrs	r3, r3, #28
 8009b74:	2b09      	cmp	r3, #9
 8009b76:	d80b      	bhi.n	8009b90 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8009b78:	68fb      	ldr	r3, [r7, #12]
 8009b7a:	0f1b      	lsrs	r3, r3, #28
 8009b7c:	b2da      	uxtb	r2, r3
 8009b7e:	7dfb      	ldrb	r3, [r7, #23]
 8009b80:	005b      	lsls	r3, r3, #1
 8009b82:	4619      	mov	r1, r3
 8009b84:	68bb      	ldr	r3, [r7, #8]
 8009b86:	440b      	add	r3, r1
 8009b88:	3230      	adds	r2, #48	; 0x30
 8009b8a:	b2d2      	uxtb	r2, r2
 8009b8c:	701a      	strb	r2, [r3, #0]
 8009b8e:	e00a      	b.n	8009ba6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009b90:	68fb      	ldr	r3, [r7, #12]
 8009b92:	0f1b      	lsrs	r3, r3, #28
 8009b94:	b2da      	uxtb	r2, r3
 8009b96:	7dfb      	ldrb	r3, [r7, #23]
 8009b98:	005b      	lsls	r3, r3, #1
 8009b9a:	4619      	mov	r1, r3
 8009b9c:	68bb      	ldr	r3, [r7, #8]
 8009b9e:	440b      	add	r3, r1
 8009ba0:	3237      	adds	r2, #55	; 0x37
 8009ba2:	b2d2      	uxtb	r2, r2
 8009ba4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8009ba6:	68fb      	ldr	r3, [r7, #12]
 8009ba8:	011b      	lsls	r3, r3, #4
 8009baa:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8009bac:	7dfb      	ldrb	r3, [r7, #23]
 8009bae:	005b      	lsls	r3, r3, #1
 8009bb0:	3301      	adds	r3, #1
 8009bb2:	68ba      	ldr	r2, [r7, #8]
 8009bb4:	4413      	add	r3, r2
 8009bb6:	2200      	movs	r2, #0
 8009bb8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8009bba:	7dfb      	ldrb	r3, [r7, #23]
 8009bbc:	3301      	adds	r3, #1
 8009bbe:	75fb      	strb	r3, [r7, #23]
 8009bc0:	7dfa      	ldrb	r2, [r7, #23]
 8009bc2:	79fb      	ldrb	r3, [r7, #7]
 8009bc4:	429a      	cmp	r2, r3
 8009bc6:	d3d3      	bcc.n	8009b70 <IntToUnicode+0x18>
  }
}
 8009bc8:	bf00      	nop
 8009bca:	bf00      	nop
 8009bcc:	371c      	adds	r7, #28
 8009bce:	46bd      	mov	sp, r7
 8009bd0:	bc80      	pop	{r7}
 8009bd2:	4770      	bx	lr

08009bd4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8009bd4:	b580      	push	{r7, lr}
 8009bd6:	b084      	sub	sp, #16
 8009bd8:	af00      	add	r7, sp, #0
 8009bda:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	681b      	ldr	r3, [r3, #0]
 8009be0:	4a0d      	ldr	r2, [pc, #52]	; (8009c18 <HAL_PCD_MspInit+0x44>)
 8009be2:	4293      	cmp	r3, r2
 8009be4:	d113      	bne.n	8009c0e <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8009be6:	4b0d      	ldr	r3, [pc, #52]	; (8009c1c <HAL_PCD_MspInit+0x48>)
 8009be8:	69db      	ldr	r3, [r3, #28]
 8009bea:	4a0c      	ldr	r2, [pc, #48]	; (8009c1c <HAL_PCD_MspInit+0x48>)
 8009bec:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8009bf0:	61d3      	str	r3, [r2, #28]
 8009bf2:	4b0a      	ldr	r3, [pc, #40]	; (8009c1c <HAL_PCD_MspInit+0x48>)
 8009bf4:	69db      	ldr	r3, [r3, #28]
 8009bf6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009bfa:	60fb      	str	r3, [r7, #12]
 8009bfc:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8009bfe:	2200      	movs	r2, #0
 8009c00:	2100      	movs	r1, #0
 8009c02:	2014      	movs	r0, #20
 8009c04:	f7f8 fa3b 	bl	800207e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8009c08:	2014      	movs	r0, #20
 8009c0a:	f7f8 fa54 	bl	80020b6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8009c0e:	bf00      	nop
 8009c10:	3710      	adds	r7, #16
 8009c12:	46bd      	mov	sp, r7
 8009c14:	bd80      	pop	{r7, pc}
 8009c16:	bf00      	nop
 8009c18:	40005c00 	.word	0x40005c00
 8009c1c:	40021000 	.word	0x40021000

08009c20 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009c20:	b580      	push	{r7, lr}
 8009c22:	b082      	sub	sp, #8
 8009c24:	af00      	add	r7, sp, #0
 8009c26:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8009c34:	4619      	mov	r1, r3
 8009c36:	4610      	mov	r0, r2
 8009c38:	f7fe fdcb 	bl	80087d2 <USBD_LL_SetupStage>
}
 8009c3c:	bf00      	nop
 8009c3e:	3708      	adds	r7, #8
 8009c40:	46bd      	mov	sp, r7
 8009c42:	bd80      	pop	{r7, pc}

08009c44 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009c44:	b580      	push	{r7, lr}
 8009c46:	b082      	sub	sp, #8
 8009c48:	af00      	add	r7, sp, #0
 8009c4a:	6078      	str	r0, [r7, #4]
 8009c4c:	460b      	mov	r3, r1
 8009c4e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 8009c56:	78fa      	ldrb	r2, [r7, #3]
 8009c58:	6879      	ldr	r1, [r7, #4]
 8009c5a:	4613      	mov	r3, r2
 8009c5c:	009b      	lsls	r3, r3, #2
 8009c5e:	4413      	add	r3, r2
 8009c60:	00db      	lsls	r3, r3, #3
 8009c62:	440b      	add	r3, r1
 8009c64:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8009c68:	681a      	ldr	r2, [r3, #0]
 8009c6a:	78fb      	ldrb	r3, [r7, #3]
 8009c6c:	4619      	mov	r1, r3
 8009c6e:	f7fe fdfd 	bl	800886c <USBD_LL_DataOutStage>
}
 8009c72:	bf00      	nop
 8009c74:	3708      	adds	r7, #8
 8009c76:	46bd      	mov	sp, r7
 8009c78:	bd80      	pop	{r7, pc}

08009c7a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009c7a:	b580      	push	{r7, lr}
 8009c7c:	b082      	sub	sp, #8
 8009c7e:	af00      	add	r7, sp, #0
 8009c80:	6078      	str	r0, [r7, #4]
 8009c82:	460b      	mov	r3, r1
 8009c84:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 8009c8c:	78fa      	ldrb	r2, [r7, #3]
 8009c8e:	6879      	ldr	r1, [r7, #4]
 8009c90:	4613      	mov	r3, r2
 8009c92:	009b      	lsls	r3, r3, #2
 8009c94:	4413      	add	r3, r2
 8009c96:	00db      	lsls	r3, r3, #3
 8009c98:	440b      	add	r3, r1
 8009c9a:	333c      	adds	r3, #60	; 0x3c
 8009c9c:	681a      	ldr	r2, [r3, #0]
 8009c9e:	78fb      	ldrb	r3, [r7, #3]
 8009ca0:	4619      	mov	r1, r3
 8009ca2:	f7fe fe54 	bl	800894e <USBD_LL_DataInStage>
}
 8009ca6:	bf00      	nop
 8009ca8:	3708      	adds	r7, #8
 8009caa:	46bd      	mov	sp, r7
 8009cac:	bd80      	pop	{r7, pc}

08009cae <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009cae:	b580      	push	{r7, lr}
 8009cb0:	b082      	sub	sp, #8
 8009cb2:	af00      	add	r7, sp, #0
 8009cb4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8009cbc:	4618      	mov	r0, r3
 8009cbe:	f7fe ff64 	bl	8008b8a <USBD_LL_SOF>
}
 8009cc2:	bf00      	nop
 8009cc4:	3708      	adds	r7, #8
 8009cc6:	46bd      	mov	sp, r7
 8009cc8:	bd80      	pop	{r7, pc}

08009cca <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009cca:	b580      	push	{r7, lr}
 8009ccc:	b084      	sub	sp, #16
 8009cce:	af00      	add	r7, sp, #0
 8009cd0:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8009cd2:	2301      	movs	r3, #1
 8009cd4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	689b      	ldr	r3, [r3, #8]
 8009cda:	2b02      	cmp	r3, #2
 8009cdc:	d001      	beq.n	8009ce2 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8009cde:	f7f7 faa3 	bl	8001228 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8009ce8:	7bfa      	ldrb	r2, [r7, #15]
 8009cea:	4611      	mov	r1, r2
 8009cec:	4618      	mov	r0, r3
 8009cee:	f7fe ff14 	bl	8008b1a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8009cf8:	4618      	mov	r0, r3
 8009cfa:	f7fe fecd 	bl	8008a98 <USBD_LL_Reset>
}
 8009cfe:	bf00      	nop
 8009d00:	3710      	adds	r7, #16
 8009d02:	46bd      	mov	sp, r7
 8009d04:	bd80      	pop	{r7, pc}
	...

08009d08 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009d08:	b580      	push	{r7, lr}
 8009d0a:	b082      	sub	sp, #8
 8009d0c:	af00      	add	r7, sp, #0
 8009d0e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8009d16:	4618      	mov	r0, r3
 8009d18:	f7fe ff0e 	bl	8008b38 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	699b      	ldr	r3, [r3, #24]
 8009d20:	2b00      	cmp	r3, #0
 8009d22:	d005      	beq.n	8009d30 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009d24:	4b04      	ldr	r3, [pc, #16]	; (8009d38 <HAL_PCD_SuspendCallback+0x30>)
 8009d26:	691b      	ldr	r3, [r3, #16]
 8009d28:	4a03      	ldr	r2, [pc, #12]	; (8009d38 <HAL_PCD_SuspendCallback+0x30>)
 8009d2a:	f043 0306 	orr.w	r3, r3, #6
 8009d2e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8009d30:	bf00      	nop
 8009d32:	3708      	adds	r7, #8
 8009d34:	46bd      	mov	sp, r7
 8009d36:	bd80      	pop	{r7, pc}
 8009d38:	e000ed00 	.word	0xe000ed00

08009d3c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009d3c:	b580      	push	{r7, lr}
 8009d3e:	b082      	sub	sp, #8
 8009d40:	af00      	add	r7, sp, #0
 8009d42:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8009d4a:	4618      	mov	r0, r3
 8009d4c:	f7fe ff08 	bl	8008b60 <USBD_LL_Resume>
}
 8009d50:	bf00      	nop
 8009d52:	3708      	adds	r7, #8
 8009d54:	46bd      	mov	sp, r7
 8009d56:	bd80      	pop	{r7, pc}

08009d58 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8009d58:	b580      	push	{r7, lr}
 8009d5a:	b082      	sub	sp, #8
 8009d5c:	af00      	add	r7, sp, #0
 8009d5e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8009d60:	4a28      	ldr	r2, [pc, #160]	; (8009e04 <USBD_LL_Init+0xac>)
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	4a26      	ldr	r2, [pc, #152]	; (8009e04 <USBD_LL_Init+0xac>)
 8009d6c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 8009d70:	4b24      	ldr	r3, [pc, #144]	; (8009e04 <USBD_LL_Init+0xac>)
 8009d72:	4a25      	ldr	r2, [pc, #148]	; (8009e08 <USBD_LL_Init+0xb0>)
 8009d74:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8009d76:	4b23      	ldr	r3, [pc, #140]	; (8009e04 <USBD_LL_Init+0xac>)
 8009d78:	2208      	movs	r2, #8
 8009d7a:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8009d7c:	4b21      	ldr	r3, [pc, #132]	; (8009e04 <USBD_LL_Init+0xac>)
 8009d7e:	2202      	movs	r2, #2
 8009d80:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8009d82:	4b20      	ldr	r3, [pc, #128]	; (8009e04 <USBD_LL_Init+0xac>)
 8009d84:	2200      	movs	r2, #0
 8009d86:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8009d88:	4b1e      	ldr	r3, [pc, #120]	; (8009e04 <USBD_LL_Init+0xac>)
 8009d8a:	2200      	movs	r2, #0
 8009d8c:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8009d8e:	4b1d      	ldr	r3, [pc, #116]	; (8009e04 <USBD_LL_Init+0xac>)
 8009d90:	2200      	movs	r2, #0
 8009d92:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8009d94:	481b      	ldr	r0, [pc, #108]	; (8009e04 <USBD_LL_Init+0xac>)
 8009d96:	f7f8 fb45 	bl	8002424 <HAL_PCD_Init>
 8009d9a:	4603      	mov	r3, r0
 8009d9c:	2b00      	cmp	r3, #0
 8009d9e:	d001      	beq.n	8009da4 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 8009da0:	f7f7 fa42 	bl	8001228 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009daa:	2318      	movs	r3, #24
 8009dac:	2200      	movs	r2, #0
 8009dae:	2100      	movs	r1, #0
 8009db0:	f7f9 ffb9 	bl	8003d26 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009dba:	2358      	movs	r3, #88	; 0x58
 8009dbc:	2200      	movs	r2, #0
 8009dbe:	2180      	movs	r1, #128	; 0x80
 8009dc0:	f7f9 ffb1 	bl	8003d26 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009dca:	23c0      	movs	r3, #192	; 0xc0
 8009dcc:	2200      	movs	r2, #0
 8009dce:	2181      	movs	r1, #129	; 0x81
 8009dd0:	f7f9 ffa9 	bl	8003d26 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009dda:	f44f 7388 	mov.w	r3, #272	; 0x110
 8009dde:	2200      	movs	r2, #0
 8009de0:	2101      	movs	r1, #1
 8009de2:	f7f9 ffa0 	bl	8003d26 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009dec:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009df0:	2200      	movs	r2, #0
 8009df2:	2182      	movs	r1, #130	; 0x82
 8009df4:	f7f9 ff97 	bl	8003d26 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8009df8:	2300      	movs	r3, #0
}
 8009dfa:	4618      	mov	r0, r3
 8009dfc:	3708      	adds	r7, #8
 8009dfe:	46bd      	mov	sp, r7
 8009e00:	bd80      	pop	{r7, pc}
 8009e02:	bf00      	nop
 8009e04:	20000f7c 	.word	0x20000f7c
 8009e08:	40005c00 	.word	0x40005c00

08009e0c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8009e0c:	b580      	push	{r7, lr}
 8009e0e:	b084      	sub	sp, #16
 8009e10:	af00      	add	r7, sp, #0
 8009e12:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009e14:	2300      	movs	r3, #0
 8009e16:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009e18:	2300      	movs	r3, #0
 8009e1a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009e22:	4618      	mov	r0, r3
 8009e24:	f7f8 fc09 	bl	800263a <HAL_PCD_Start>
 8009e28:	4603      	mov	r3, r0
 8009e2a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009e2c:	7bfb      	ldrb	r3, [r7, #15]
 8009e2e:	4618      	mov	r0, r3
 8009e30:	f000 f94e 	bl	800a0d0 <USBD_Get_USB_Status>
 8009e34:	4603      	mov	r3, r0
 8009e36:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009e38:	7bbb      	ldrb	r3, [r7, #14]
}
 8009e3a:	4618      	mov	r0, r3
 8009e3c:	3710      	adds	r7, #16
 8009e3e:	46bd      	mov	sp, r7
 8009e40:	bd80      	pop	{r7, pc}

08009e42 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8009e42:	b580      	push	{r7, lr}
 8009e44:	b084      	sub	sp, #16
 8009e46:	af00      	add	r7, sp, #0
 8009e48:	6078      	str	r0, [r7, #4]
 8009e4a:	4608      	mov	r0, r1
 8009e4c:	4611      	mov	r1, r2
 8009e4e:	461a      	mov	r2, r3
 8009e50:	4603      	mov	r3, r0
 8009e52:	70fb      	strb	r3, [r7, #3]
 8009e54:	460b      	mov	r3, r1
 8009e56:	70bb      	strb	r3, [r7, #2]
 8009e58:	4613      	mov	r3, r2
 8009e5a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009e5c:	2300      	movs	r3, #0
 8009e5e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009e60:	2300      	movs	r3, #0
 8009e62:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009e6a:	78bb      	ldrb	r3, [r7, #2]
 8009e6c:	883a      	ldrh	r2, [r7, #0]
 8009e6e:	78f9      	ldrb	r1, [r7, #3]
 8009e70:	f7f8 fd81 	bl	8002976 <HAL_PCD_EP_Open>
 8009e74:	4603      	mov	r3, r0
 8009e76:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009e78:	7bfb      	ldrb	r3, [r7, #15]
 8009e7a:	4618      	mov	r0, r3
 8009e7c:	f000 f928 	bl	800a0d0 <USBD_Get_USB_Status>
 8009e80:	4603      	mov	r3, r0
 8009e82:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009e84:	7bbb      	ldrb	r3, [r7, #14]
}
 8009e86:	4618      	mov	r0, r3
 8009e88:	3710      	adds	r7, #16
 8009e8a:	46bd      	mov	sp, r7
 8009e8c:	bd80      	pop	{r7, pc}

08009e8e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009e8e:	b580      	push	{r7, lr}
 8009e90:	b084      	sub	sp, #16
 8009e92:	af00      	add	r7, sp, #0
 8009e94:	6078      	str	r0, [r7, #4]
 8009e96:	460b      	mov	r3, r1
 8009e98:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009e9a:	2300      	movs	r3, #0
 8009e9c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009e9e:	2300      	movs	r3, #0
 8009ea0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009ea8:	78fa      	ldrb	r2, [r7, #3]
 8009eaa:	4611      	mov	r1, r2
 8009eac:	4618      	mov	r0, r3
 8009eae:	f7f8 fdc8 	bl	8002a42 <HAL_PCD_EP_Close>
 8009eb2:	4603      	mov	r3, r0
 8009eb4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009eb6:	7bfb      	ldrb	r3, [r7, #15]
 8009eb8:	4618      	mov	r0, r3
 8009eba:	f000 f909 	bl	800a0d0 <USBD_Get_USB_Status>
 8009ebe:	4603      	mov	r3, r0
 8009ec0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009ec2:	7bbb      	ldrb	r3, [r7, #14]
}
 8009ec4:	4618      	mov	r0, r3
 8009ec6:	3710      	adds	r7, #16
 8009ec8:	46bd      	mov	sp, r7
 8009eca:	bd80      	pop	{r7, pc}

08009ecc <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009ecc:	b580      	push	{r7, lr}
 8009ece:	b084      	sub	sp, #16
 8009ed0:	af00      	add	r7, sp, #0
 8009ed2:	6078      	str	r0, [r7, #4]
 8009ed4:	460b      	mov	r3, r1
 8009ed6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009ed8:	2300      	movs	r3, #0
 8009eda:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009edc:	2300      	movs	r3, #0
 8009ede:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009ee6:	78fa      	ldrb	r2, [r7, #3]
 8009ee8:	4611      	mov	r1, r2
 8009eea:	4618      	mov	r0, r3
 8009eec:	f7f8 fe88 	bl	8002c00 <HAL_PCD_EP_SetStall>
 8009ef0:	4603      	mov	r3, r0
 8009ef2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009ef4:	7bfb      	ldrb	r3, [r7, #15]
 8009ef6:	4618      	mov	r0, r3
 8009ef8:	f000 f8ea 	bl	800a0d0 <USBD_Get_USB_Status>
 8009efc:	4603      	mov	r3, r0
 8009efe:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009f00:	7bbb      	ldrb	r3, [r7, #14]
}
 8009f02:	4618      	mov	r0, r3
 8009f04:	3710      	adds	r7, #16
 8009f06:	46bd      	mov	sp, r7
 8009f08:	bd80      	pop	{r7, pc}

08009f0a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009f0a:	b580      	push	{r7, lr}
 8009f0c:	b084      	sub	sp, #16
 8009f0e:	af00      	add	r7, sp, #0
 8009f10:	6078      	str	r0, [r7, #4]
 8009f12:	460b      	mov	r3, r1
 8009f14:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009f16:	2300      	movs	r3, #0
 8009f18:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009f1a:	2300      	movs	r3, #0
 8009f1c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009f24:	78fa      	ldrb	r2, [r7, #3]
 8009f26:	4611      	mov	r1, r2
 8009f28:	4618      	mov	r0, r3
 8009f2a:	f7f8 fec9 	bl	8002cc0 <HAL_PCD_EP_ClrStall>
 8009f2e:	4603      	mov	r3, r0
 8009f30:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009f32:	7bfb      	ldrb	r3, [r7, #15]
 8009f34:	4618      	mov	r0, r3
 8009f36:	f000 f8cb 	bl	800a0d0 <USBD_Get_USB_Status>
 8009f3a:	4603      	mov	r3, r0
 8009f3c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009f3e:	7bbb      	ldrb	r3, [r7, #14]
}
 8009f40:	4618      	mov	r0, r3
 8009f42:	3710      	adds	r7, #16
 8009f44:	46bd      	mov	sp, r7
 8009f46:	bd80      	pop	{r7, pc}

08009f48 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009f48:	b480      	push	{r7}
 8009f4a:	b085      	sub	sp, #20
 8009f4c:	af00      	add	r7, sp, #0
 8009f4e:	6078      	str	r0, [r7, #4]
 8009f50:	460b      	mov	r3, r1
 8009f52:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009f5a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8009f5c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009f60:	2b00      	cmp	r3, #0
 8009f62:	da0c      	bge.n	8009f7e <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8009f64:	78fb      	ldrb	r3, [r7, #3]
 8009f66:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009f6a:	68f9      	ldr	r1, [r7, #12]
 8009f6c:	1c5a      	adds	r2, r3, #1
 8009f6e:	4613      	mov	r3, r2
 8009f70:	009b      	lsls	r3, r3, #2
 8009f72:	4413      	add	r3, r2
 8009f74:	00db      	lsls	r3, r3, #3
 8009f76:	440b      	add	r3, r1
 8009f78:	3302      	adds	r3, #2
 8009f7a:	781b      	ldrb	r3, [r3, #0]
 8009f7c:	e00b      	b.n	8009f96 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8009f7e:	78fb      	ldrb	r3, [r7, #3]
 8009f80:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009f84:	68f9      	ldr	r1, [r7, #12]
 8009f86:	4613      	mov	r3, r2
 8009f88:	009b      	lsls	r3, r3, #2
 8009f8a:	4413      	add	r3, r2
 8009f8c:	00db      	lsls	r3, r3, #3
 8009f8e:	440b      	add	r3, r1
 8009f90:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 8009f94:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009f96:	4618      	mov	r0, r3
 8009f98:	3714      	adds	r7, #20
 8009f9a:	46bd      	mov	sp, r7
 8009f9c:	bc80      	pop	{r7}
 8009f9e:	4770      	bx	lr

08009fa0 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8009fa0:	b580      	push	{r7, lr}
 8009fa2:	b084      	sub	sp, #16
 8009fa4:	af00      	add	r7, sp, #0
 8009fa6:	6078      	str	r0, [r7, #4]
 8009fa8:	460b      	mov	r3, r1
 8009faa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009fac:	2300      	movs	r3, #0
 8009fae:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009fb0:	2300      	movs	r3, #0
 8009fb2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009fba:	78fa      	ldrb	r2, [r7, #3]
 8009fbc:	4611      	mov	r1, r2
 8009fbe:	4618      	mov	r0, r3
 8009fc0:	f7f8 fcb4 	bl	800292c <HAL_PCD_SetAddress>
 8009fc4:	4603      	mov	r3, r0
 8009fc6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009fc8:	7bfb      	ldrb	r3, [r7, #15]
 8009fca:	4618      	mov	r0, r3
 8009fcc:	f000 f880 	bl	800a0d0 <USBD_Get_USB_Status>
 8009fd0:	4603      	mov	r3, r0
 8009fd2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009fd4:	7bbb      	ldrb	r3, [r7, #14]
}
 8009fd6:	4618      	mov	r0, r3
 8009fd8:	3710      	adds	r7, #16
 8009fda:	46bd      	mov	sp, r7
 8009fdc:	bd80      	pop	{r7, pc}

08009fde <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8009fde:	b580      	push	{r7, lr}
 8009fe0:	b086      	sub	sp, #24
 8009fe2:	af00      	add	r7, sp, #0
 8009fe4:	60f8      	str	r0, [r7, #12]
 8009fe6:	607a      	str	r2, [r7, #4]
 8009fe8:	461a      	mov	r2, r3
 8009fea:	460b      	mov	r3, r1
 8009fec:	72fb      	strb	r3, [r7, #11]
 8009fee:	4613      	mov	r3, r2
 8009ff0:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009ff2:	2300      	movs	r3, #0
 8009ff4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009ff6:	2300      	movs	r3, #0
 8009ff8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8009ffa:	68fb      	ldr	r3, [r7, #12]
 8009ffc:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800a000:	893b      	ldrh	r3, [r7, #8]
 800a002:	7af9      	ldrb	r1, [r7, #11]
 800a004:	687a      	ldr	r2, [r7, #4]
 800a006:	f7f8 fdb8 	bl	8002b7a <HAL_PCD_EP_Transmit>
 800a00a:	4603      	mov	r3, r0
 800a00c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a00e:	7dfb      	ldrb	r3, [r7, #23]
 800a010:	4618      	mov	r0, r3
 800a012:	f000 f85d 	bl	800a0d0 <USBD_Get_USB_Status>
 800a016:	4603      	mov	r3, r0
 800a018:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a01a:	7dbb      	ldrb	r3, [r7, #22]
}
 800a01c:	4618      	mov	r0, r3
 800a01e:	3718      	adds	r7, #24
 800a020:	46bd      	mov	sp, r7
 800a022:	bd80      	pop	{r7, pc}

0800a024 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800a024:	b580      	push	{r7, lr}
 800a026:	b086      	sub	sp, #24
 800a028:	af00      	add	r7, sp, #0
 800a02a:	60f8      	str	r0, [r7, #12]
 800a02c:	607a      	str	r2, [r7, #4]
 800a02e:	461a      	mov	r2, r3
 800a030:	460b      	mov	r3, r1
 800a032:	72fb      	strb	r3, [r7, #11]
 800a034:	4613      	mov	r3, r2
 800a036:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a038:	2300      	movs	r3, #0
 800a03a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a03c:	2300      	movs	r3, #0
 800a03e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800a040:	68fb      	ldr	r3, [r7, #12]
 800a042:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800a046:	893b      	ldrh	r3, [r7, #8]
 800a048:	7af9      	ldrb	r1, [r7, #11]
 800a04a:	687a      	ldr	r2, [r7, #4]
 800a04c:	f7f8 fd41 	bl	8002ad2 <HAL_PCD_EP_Receive>
 800a050:	4603      	mov	r3, r0
 800a052:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a054:	7dfb      	ldrb	r3, [r7, #23]
 800a056:	4618      	mov	r0, r3
 800a058:	f000 f83a 	bl	800a0d0 <USBD_Get_USB_Status>
 800a05c:	4603      	mov	r3, r0
 800a05e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a060:	7dbb      	ldrb	r3, [r7, #22]
}
 800a062:	4618      	mov	r0, r3
 800a064:	3718      	adds	r7, #24
 800a066:	46bd      	mov	sp, r7
 800a068:	bd80      	pop	{r7, pc}

0800a06a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a06a:	b580      	push	{r7, lr}
 800a06c:	b082      	sub	sp, #8
 800a06e:	af00      	add	r7, sp, #0
 800a070:	6078      	str	r0, [r7, #4]
 800a072:	460b      	mov	r3, r1
 800a074:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a07c:	78fa      	ldrb	r2, [r7, #3]
 800a07e:	4611      	mov	r1, r2
 800a080:	4618      	mov	r0, r3
 800a082:	f7f8 fd63 	bl	8002b4c <HAL_PCD_EP_GetRxCount>
 800a086:	4603      	mov	r3, r0
}
 800a088:	4618      	mov	r0, r3
 800a08a:	3708      	adds	r7, #8
 800a08c:	46bd      	mov	sp, r7
 800a08e:	bd80      	pop	{r7, pc}

0800a090 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800a090:	b480      	push	{r7}
 800a092:	b083      	sub	sp, #12
 800a094:	af00      	add	r7, sp, #0
 800a096:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800a098:	4b02      	ldr	r3, [pc, #8]	; (800a0a4 <USBD_static_malloc+0x14>)
}
 800a09a:	4618      	mov	r0, r3
 800a09c:	370c      	adds	r7, #12
 800a09e:	46bd      	mov	sp, r7
 800a0a0:	bc80      	pop	{r7}
 800a0a2:	4770      	bx	lr
 800a0a4:	20001268 	.word	0x20001268

0800a0a8 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800a0a8:	b480      	push	{r7}
 800a0aa:	b083      	sub	sp, #12
 800a0ac:	af00      	add	r7, sp, #0
 800a0ae:	6078      	str	r0, [r7, #4]

}
 800a0b0:	bf00      	nop
 800a0b2:	370c      	adds	r7, #12
 800a0b4:	46bd      	mov	sp, r7
 800a0b6:	bc80      	pop	{r7}
 800a0b8:	4770      	bx	lr

0800a0ba <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a0ba:	b480      	push	{r7}
 800a0bc:	b083      	sub	sp, #12
 800a0be:	af00      	add	r7, sp, #0
 800a0c0:	6078      	str	r0, [r7, #4]
 800a0c2:	460b      	mov	r3, r1
 800a0c4:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800a0c6:	bf00      	nop
 800a0c8:	370c      	adds	r7, #12
 800a0ca:	46bd      	mov	sp, r7
 800a0cc:	bc80      	pop	{r7}
 800a0ce:	4770      	bx	lr

0800a0d0 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800a0d0:	b480      	push	{r7}
 800a0d2:	b085      	sub	sp, #20
 800a0d4:	af00      	add	r7, sp, #0
 800a0d6:	4603      	mov	r3, r0
 800a0d8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a0da:	2300      	movs	r3, #0
 800a0dc:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800a0de:	79fb      	ldrb	r3, [r7, #7]
 800a0e0:	2b03      	cmp	r3, #3
 800a0e2:	d817      	bhi.n	800a114 <USBD_Get_USB_Status+0x44>
 800a0e4:	a201      	add	r2, pc, #4	; (adr r2, 800a0ec <USBD_Get_USB_Status+0x1c>)
 800a0e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a0ea:	bf00      	nop
 800a0ec:	0800a0fd 	.word	0x0800a0fd
 800a0f0:	0800a103 	.word	0x0800a103
 800a0f4:	0800a109 	.word	0x0800a109
 800a0f8:	0800a10f 	.word	0x0800a10f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800a0fc:	2300      	movs	r3, #0
 800a0fe:	73fb      	strb	r3, [r7, #15]
    break;
 800a100:	e00b      	b.n	800a11a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a102:	2302      	movs	r3, #2
 800a104:	73fb      	strb	r3, [r7, #15]
    break;
 800a106:	e008      	b.n	800a11a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a108:	2301      	movs	r3, #1
 800a10a:	73fb      	strb	r3, [r7, #15]
    break;
 800a10c:	e005      	b.n	800a11a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a10e:	2302      	movs	r3, #2
 800a110:	73fb      	strb	r3, [r7, #15]
    break;
 800a112:	e002      	b.n	800a11a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800a114:	2302      	movs	r3, #2
 800a116:	73fb      	strb	r3, [r7, #15]
    break;
 800a118:	bf00      	nop
  }
  return usb_status;
 800a11a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a11c:	4618      	mov	r0, r3
 800a11e:	3714      	adds	r7, #20
 800a120:	46bd      	mov	sp, r7
 800a122:	bc80      	pop	{r7}
 800a124:	4770      	bx	lr
 800a126:	bf00      	nop

0800a128 <__libc_init_array>:
 800a128:	b570      	push	{r4, r5, r6, lr}
 800a12a:	2600      	movs	r6, #0
 800a12c:	4d0c      	ldr	r5, [pc, #48]	; (800a160 <__libc_init_array+0x38>)
 800a12e:	4c0d      	ldr	r4, [pc, #52]	; (800a164 <__libc_init_array+0x3c>)
 800a130:	1b64      	subs	r4, r4, r5
 800a132:	10a4      	asrs	r4, r4, #2
 800a134:	42a6      	cmp	r6, r4
 800a136:	d109      	bne.n	800a14c <__libc_init_array+0x24>
 800a138:	f000 f822 	bl	800a180 <_init>
 800a13c:	2600      	movs	r6, #0
 800a13e:	4d0a      	ldr	r5, [pc, #40]	; (800a168 <__libc_init_array+0x40>)
 800a140:	4c0a      	ldr	r4, [pc, #40]	; (800a16c <__libc_init_array+0x44>)
 800a142:	1b64      	subs	r4, r4, r5
 800a144:	10a4      	asrs	r4, r4, #2
 800a146:	42a6      	cmp	r6, r4
 800a148:	d105      	bne.n	800a156 <__libc_init_array+0x2e>
 800a14a:	bd70      	pop	{r4, r5, r6, pc}
 800a14c:	f855 3b04 	ldr.w	r3, [r5], #4
 800a150:	4798      	blx	r3
 800a152:	3601      	adds	r6, #1
 800a154:	e7ee      	b.n	800a134 <__libc_init_array+0xc>
 800a156:	f855 3b04 	ldr.w	r3, [r5], #4
 800a15a:	4798      	blx	r3
 800a15c:	3601      	adds	r6, #1
 800a15e:	e7f2      	b.n	800a146 <__libc_init_array+0x1e>
 800a160:	0800a278 	.word	0x0800a278
 800a164:	0800a278 	.word	0x0800a278
 800a168:	0800a278 	.word	0x0800a278
 800a16c:	0800a27c 	.word	0x0800a27c

0800a170 <memset>:
 800a170:	4603      	mov	r3, r0
 800a172:	4402      	add	r2, r0
 800a174:	4293      	cmp	r3, r2
 800a176:	d100      	bne.n	800a17a <memset+0xa>
 800a178:	4770      	bx	lr
 800a17a:	f803 1b01 	strb.w	r1, [r3], #1
 800a17e:	e7f9      	b.n	800a174 <memset+0x4>

0800a180 <_init>:
 800a180:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a182:	bf00      	nop
 800a184:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a186:	bc08      	pop	{r3}
 800a188:	469e      	mov	lr, r3
 800a18a:	4770      	bx	lr

0800a18c <_fini>:
 800a18c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a18e:	bf00      	nop
 800a190:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a192:	bc08      	pop	{r3}
 800a194:	469e      	mov	lr, r3
 800a196:	4770      	bx	lr
